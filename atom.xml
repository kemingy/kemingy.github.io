<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Cyanide</title>
	<link href="https://blog.mapotofu.org/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.mapotofu.org"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2023-08-18T00:00:00+00:00</updated>
	<id>https://blog.mapotofu.org/atom.xml</id>
	<entry xml:lang="en">
		<title>My journey with envd</title>
		<published>2023-08-18T00:00:00+00:00</published>
		<updated>2023-08-18T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/envd/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/envd/</id>
		<content type="html">&lt;p&gt;&lt;code&gt;envd&lt;&#x2F;code&gt; is a frontend of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;moby&#x2F;buildkit&quot;&gt;BuildKit&lt;&#x2F;a&gt;. Just like the Dockerfile. It has been more than a year since I started working on this project. Since the features are relatively stable, I&#x27;d like to write a blog about my journey with &lt;code&gt;envd&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;why-we-need-this-tool&quot;&gt;Why we need this tool&lt;&#x2F;h2&gt;
&lt;p&gt;The machine learning development environment has been a pain point for a while. &amp;quot;Which Python are you using now?&amp;quot; is definitely a newbie slayer. It&#x27;s even worse if you need to use CUDA. &amp;quot;It works on my machine!&amp;quot; happens a lot.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;envd&lt;&#x2F;code&gt; was created to solve the problem of the machine learning development environment. However, it goes far beyond that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;infrastructure-as-code-iac&quot;&gt;Infrastructure as code (IaC)&lt;&#x2F;h2&gt;
&lt;p&gt;What a fancy name! Here it means by using the &lt;code&gt;envd&lt;&#x2F;code&gt; config file, you will be able to get the same environment on different machines, whether it&#x27;s a local machine, a remote server, or a Kubernetes cluster.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;naming&quot;&gt;Naming&lt;&#x2F;h2&gt;
&lt;p&gt;It was named &lt;code&gt;MIDI&lt;&#x2F;code&gt; in the beginning. But that is not friendly for SEO.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;d&lt;&#x2F;code&gt; in &lt;code&gt;envd&lt;&#x2F;code&gt; has no official meaning (as far as I know). It can be &amp;quot;docker&amp;quot;, &amp;quot;deep learning&amp;quot;, &amp;quot;dev&amp;quot;, etc.&lt;&#x2F;p&gt;
&lt;p&gt;For more information, check this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd&#x2F;issues&#x2F;2#issuecomment-1119175904&quot;&gt;issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;logo&quot;&gt;Logo&lt;&#x2F;h2&gt;
&lt;p&gt;We have a cute logo designed by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lilylee1874&quot;&gt;Lily&lt;&#x2F;a&gt;. It&#x27;s a cat face with the &lt;code&gt;envd&lt;&#x2F;code&gt; characters.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;12974685&#x2F;200007223-cd94fe9a-266d-4bbd-ac23-e71043d0c3dc.svg&quot; alt=&quot;envd&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Actually, the cat only blinked once when we created the GIF. The recording tool on macOS is tricky to use. That&#x27;s why it ends up blinking twice. By the way, we replaced it with SVG to make the animation clear and smooth. Writing the SVG animation from scratch is not that hard.&lt;&#x2F;p&gt;
&lt;p&gt;You can find the drafts &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd&#x2F;issues&#x2F;326&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;Obviously, &lt;code&gt;envd&lt;&#x2F;code&gt; is a Golang project. However, our target audiences are mainly using Python. That&#x27;s why we spend a lot of effort to support installation through &lt;code&gt;pip&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As we know, Python has never done a good job of distributing pre-compiled binaries. I didn&#x27;t find any good document about how to create a Python pre-compiled binary distribution. People just copy &amp;amp; paste the code from other projects. So does &lt;code&gt;envd&lt;&#x2F;code&gt;. The code is mainly copied from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mosecorg&#x2F;mosec&quot;&gt;&lt;code&gt;mosec&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I do learn something new from others&#x27; contributions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;cibuildwheel&quot;&gt;cibuildwheel&lt;&#x2F;a&gt; has become mature nowadays. It&#x27;s a great tool for setting up the multi-platform distribution pipeline in CI.&lt;&#x2F;li&gt;
&lt;li&gt;You can &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd&#x2F;pull&#x2F;1254&quot;&gt;package a binary file without any Python code&lt;&#x2F;a&gt;. (by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frostming&quot;&gt;frostming&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;You can create the Python &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd&#x2F;pull&#x2F;1324&quot;&gt;ABI-agnostic wheel&lt;&#x2F;a&gt;. (by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frostming&quot;&gt;frostming&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Of course, you can use &lt;code&gt;conda-forge&lt;&#x2F;code&gt;. I have tried to create &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;conda-forge&#x2F;staged-recipes&#x2F;pull&#x2F;22367&quot;&gt;a recipe for &lt;code&gt;mosec&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. It has a totally different packaging logic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rootless&quot;&gt;Rootless&lt;&#x2F;h2&gt;
&lt;p&gt;As a developer, I don&#x27;t like to run the command with &lt;code&gt;sudo&lt;&#x2F;code&gt; unless I have to. When I was trying to debug with the &lt;code&gt;buildkit&lt;&#x2F;code&gt; daemon, I found that we can run it &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;moby&#x2F;buildkit&#x2F;blob&#x2F;master&#x2F;docs&#x2F;rootless.md&quot;&gt;in rootless mode&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;starlark&quot;&gt;Starlark&lt;&#x2F;h2&gt;
&lt;p&gt;Starlark is a dialect of Python, which makes it easy to use for machine learning engineers and data scientists.&lt;&#x2F;p&gt;
&lt;p&gt;I know that lots of configuration files are written in YAML. I personally don&#x27;t like it. You may also heard lots of complaints about the YAML format. I think the configuration file should be able to validate itself.&lt;&#x2F;p&gt;
&lt;p&gt;You can use if-condition, for-loop, etc. in Starlark. The following code works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;libs&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;gpu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;ubuntu:20.04&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;gpu:
&lt;&#x2F;span&gt;&lt;span&gt;        base &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;nvidia&#x2F;cuda:11.2.2-cudnn8-runtime-ubuntu20.04&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;lib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sorted(libs)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;install.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;python_packages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[lib])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more information, check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bazelbuild&#x2F;starlark&#x2F;blob&#x2F;master&#x2F;spec.md&quot;&gt;Starlark spec&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Although Starlark has an interpreting order, we don&#x27;t rely on that. We will parse the file to an internal graph and construct the BuildKit Low-Level Build (LLB) graph on top of it. This tradeoff makes it easy to cache the layers.&lt;&#x2F;p&gt;
&lt;p&gt;Starlark is also easy to extend. We added lots of &lt;code&gt;envd&lt;&#x2F;code&gt; specific functions to make it more powerful. You can find them in the &lt;a href=&quot;https:&#x2F;&#x2F;envd.tensorchord.ai&#x2F;api&#x2F;starlark&#x2F;v1&#x2F;global.html&quot;&gt;reference&lt;&#x2F;a&gt;. It has a &lt;code&gt;load&lt;&#x2F;code&gt; function which is similar to &lt;code&gt;import&lt;&#x2F;code&gt; in Python to load another file. We create a new one called &lt;a href=&quot;https:&#x2F;&#x2F;envd.tensorchord.ai&#x2F;api&#x2F;starlark&#x2F;v1&#x2F;global.html#include&quot;&gt;&lt;code&gt;include&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (because &lt;code&gt;import&lt;&#x2F;code&gt; is reserved) to import functions from a git repository. People can create their own &lt;code&gt;envd&lt;&#x2F;code&gt; build functions and share them with others.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vscode-support&quot;&gt;VSCode support&lt;&#x2F;h2&gt;
&lt;p&gt;To make it more user-friendly, we have a VSCode &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;vscode-envd&quot;&gt;extension&lt;&#x2F;a&gt; for &lt;code&gt;envd&lt;&#x2F;code&gt;, which provides the following features:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd-lsp&quot;&gt;LSP&lt;&#x2F;a&gt;: this enables the Starlark auto-completion.&lt;&#x2F;li&gt;
&lt;li&gt;manage &lt;code&gt;envd&lt;&#x2F;code&gt; environment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;buildkit&quot;&gt;BuildKit&lt;&#x2F;h2&gt;
&lt;p&gt;This is the backend of &lt;code&gt;envd&lt;&#x2F;code&gt;. Integrating with it is troublesome. Mainly because it doesn&#x27;t have any documentation. The only way to learn it is to read the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;moby&#x2F;buildkit&#x2F;tree&#x2F;master&#x2F;examples&quot;&gt;examples&lt;&#x2F;a&gt;. Since the source code is written in a functional style, it&#x27;s a bit hard to understand. Once you get used to it, things will be easier.&lt;&#x2F;p&gt;
&lt;p&gt;There are some nice features in BuildKit:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Parallel build&lt;&#x2F;li&gt;
&lt;li&gt;Distributable workers&lt;&#x2F;li&gt;
&lt;li&gt;Better cache&lt;&#x2F;li&gt;
&lt;li&gt;Advanced operators&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will go through them one by one.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parallel-build&quot;&gt;Parallel build&lt;&#x2F;h3&gt;
&lt;p&gt;The main idea is to split the build graph into multiple sub-graphs and run them in parallel if possible. This is a great feature when some steps take a long time to finish while there is no overlap among them. For example, we can install the system packages and Conda environments in parallel.&lt;&#x2F;p&gt;
&lt;p&gt;The related operators are &lt;code&gt;diff&lt;&#x2F;code&gt; and &lt;code&gt;merge&lt;&#x2F;code&gt;. In the &lt;code&gt;merge&lt;&#x2F;code&gt; list, the later state will override the previous stats if they change the same directories. Sometimes, it may take longer than you expect to get the diff and merge them together. This should be used when you&#x27;re sure that the parallelism will save time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;distributable-workers&quot;&gt;Distributable workers&lt;&#x2F;h3&gt;
&lt;p&gt;Basically, the frontend will construct the build graph and serialize it in a Protocol Buffer format, then send it to the backend workers through TCP or Unix Domain Socket.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s recommended to set up a long-running BuildKit daemon and use it as a remote worker since in this way it can benefit from the cache.&lt;&#x2F;p&gt;
&lt;p&gt;By default, we will create a &lt;code&gt;buildkitd&lt;&#x2F;code&gt; container for &lt;code&gt;envd&lt;&#x2F;code&gt; to build the image.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;better-cache&quot;&gt;Better cache&lt;&#x2F;h3&gt;
&lt;p&gt;BuildKit can import&#x2F;export the cache from&#x2F;to the local&#x2F;inline&#x2F;registry. You can choose to export the intermediate layer or not.&lt;&#x2F;p&gt;
&lt;p&gt;By default, the cache limit is 10% of your disk space. You can configure this through the &lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;build&#x2F;buildkit&#x2F;toml-configuration&#x2F;&quot;&gt;buildkit config&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;envd&lt;&#x2F;code&gt; v0 will download a pre-build base image that contains the basic development tools and Python environment. This image can be used as the cache layer if none of the dependencies change. This is a great way to speed up the build process. You can check the nightly build &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd-nightly&quot;&gt;benchmark&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;moby&quot;&gt;Moby&lt;&#x2F;h2&gt;
&lt;p&gt;For now, the best user experience is to use &lt;code&gt;envd&lt;&#x2F;code&gt; v1 with &lt;code&gt;moby&lt;&#x2F;code&gt; worker. This requires the docker engine version &amp;gt;= 22. To enable it, you can create a new &lt;code&gt;envd&lt;&#x2F;code&gt; context like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;envd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; context create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; moby&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --builder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; moby-worker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --use
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Need to mention that the &lt;code&gt;moby&lt;&#x2F;code&gt; worker is still experimental. Due to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;moby&#x2F;moby&#x2F;issues&#x2F;45111&quot;&gt;issue&lt;&#x2F;a&gt;, we have to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd&#x2F;pull&#x2F;1699&quot;&gt;disable the &lt;code&gt;merge&lt;&#x2F;code&gt; operator&lt;&#x2F;a&gt; used in &lt;code&gt;envd&lt;&#x2F;code&gt; when using the &lt;code&gt;moby&lt;&#x2F;code&gt; worker. Thus the build step might be slower but the export step will be much faster. Overall it&#x27;s still faster, especially when you have a large image, which is the common case for machine learning.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cache&quot;&gt;Cache&lt;&#x2F;h2&gt;
&lt;p&gt;Docker layer cache is a common optimization for image building. Besides, we also enable the cache for the APT packages, Python wheels, VSCode extensions, and &lt;code&gt;oh-my-zsh&lt;&#x2F;code&gt; plugins. This is done by mounting a cache directory during the build time. The machine learning related pip wheels can be huge, which makes the cache very useful.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;horust&quot;&gt;Horust&lt;&#x2F;h2&gt;
&lt;p&gt;I totally agree that for the online environment, one container should only do one thing, usually, that means running only one service. However, for the development environment, it&#x27;s totally fine to run as many processes as you like, as long as they don&#x27;t conflict with each other.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s why we need a process management tool to control all of these processes. We have explored several options like &lt;a href=&quot;https:&#x2F;&#x2F;systemd.io&#x2F;&quot;&gt;systemd&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;just-containers&#x2F;s6-overlay&quot;&gt;s6 overlay&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Supervisor&#x2F;supervisor&quot;&gt;Supervisor&lt;&#x2F;a&gt;. In the end, we decided to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FedericoPonzi&#x2F;Horust&quot;&gt;Horust&lt;&#x2F;a&gt; which is both simple and powerful. You can check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd&#x2F;issues&#x2F;930&quot;&gt;discussion&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shell-prompt&quot;&gt;Shell prompt&lt;&#x2F;h2&gt;
&lt;p&gt;I personally use &lt;code&gt;fish&lt;&#x2F;code&gt; with &lt;code&gt;starship&lt;&#x2F;code&gt;, which gives a great out-of-box shell experience. &lt;code&gt;starship&lt;&#x2F;code&gt; can work well with the most common shells like &lt;code&gt;bash&lt;&#x2F;code&gt;, &lt;code&gt;zsh&lt;&#x2F;code&gt;, &lt;code&gt;fish&lt;&#x2F;code&gt;, etc. It&#x27;s easy to configure and extend. You can check the &lt;a href=&quot;https:&#x2F;&#x2F;starship.rs&#x2F;&quot;&gt;starship documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It works better when you have the &lt;a href=&quot;https:&#x2F;&#x2F;www.nerdfonts.com&#x2F;&quot;&gt;Nerd font&lt;&#x2F;a&gt;, but we cannot control the users&#x27; terminal configuration, we have to disable some fancy icons.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coding-in-jupyter-notebook-and-vscode&quot;&gt;Coding in Jupyter Notebook and VSCode&lt;&#x2F;h2&gt;
&lt;p&gt;These are the most common coding tools for machine learning engineers and data scientists.&lt;&#x2F;p&gt;
&lt;p&gt;Whether it&#x27;s Jupyter Notebook or Jupyter Lab, it can be exposed as a normal web service.&lt;&#x2F;p&gt;
&lt;p&gt;VSCode really did a good job on the remote development. You can use the VSCode on your local machine to connect to the remote server or even the container running on a remote server.&lt;&#x2F;p&gt;
&lt;p&gt;Limited by the license, we have to use the &lt;a href=&quot;https:&#x2F;&#x2F;open-vsx.org&#x2F;&quot;&gt;Open VSX Registry&lt;&#x2F;a&gt;. Sometimes the related CI test fails due to its stability.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;develop-in-the-kubernetes-cluster&quot;&gt;Develop in the Kubernetes cluster&lt;&#x2F;h2&gt;
&lt;p&gt;We were hoping to monetize &lt;code&gt;envd&lt;&#x2F;code&gt; with this feature. But not many people are interested in this one. The code is open sourced as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd-server&#x2F;&quot;&gt;&lt;code&gt;envd-server&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Maybe we can bring this feature to the new &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;openmodelz&#x2F;issues&#x2F;105&quot;&gt;openmodelz&lt;&#x2F;a&gt; project. Although you can run &lt;code&gt;mdz exec {name} -ti bash&lt;&#x2F;code&gt; to get into a container, but it doesn&#x27;t support VScode-Remote for now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;use-pointer-receivers&quot;&gt;Use pointer receivers&lt;&#x2F;h2&gt;
&lt;p&gt;This is the most common bug during the development with &lt;code&gt;envd&lt;&#x2F;code&gt;. We have an internal build graph, which has many methods to build the LLB graph. Not all of these methods are using the pointer receivers, which results in the inconsistent state of the internal graph. I would prefer to use the pointer receivers for all of the methods.&lt;&#x2F;p&gt;
&lt;p&gt;You might be curious how come the lint doesn&#x27;t catch this. That&#x27;s because it can be used in a nested way, with the outer function using the value receiver while the inner function uses the pointer receiver.&lt;&#x2F;p&gt;
&lt;p&gt;This is also a good example to show the language design (personal option). You won&#x27;t see this kind of bug in Rust. But Rust doesn&#x27;t have a good container ecosystem. :(&lt;&#x2F;p&gt;
&lt;h2 id=&quot;progress-bar&quot;&gt;Progress bar&lt;&#x2F;h2&gt;
&lt;p&gt;The default docker progress bar is really complex. When I was implementing the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd&#x2F;pull&#x2F;1708&quot;&gt;&lt;code&gt;moby&lt;&#x2F;code&gt; push&lt;&#x2F;a&gt; feature, I chose to reuse another progress bar lib to make life easier. Although it lacks multi-line log support.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ssh-agent-forwarding&quot;&gt;SSH agent forwarding&lt;&#x2F;h2&gt;
&lt;p&gt;Actually, we can forward the host SSH credentials to the container. So we can use the &lt;code&gt;git&lt;&#x2F;code&gt; command as we&#x27;re in the host machine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;envd-v1&quot;&gt;&lt;code&gt;envd&lt;&#x2F;code&gt; v1&lt;&#x2F;h2&gt;
&lt;p&gt;This new version is created to address the inappropriate design of the &lt;code&gt;envd&lt;&#x2F;code&gt; v0. The main idea is that &lt;code&gt;envd&lt;&#x2F;code&gt; file should be a more general frontend of BuildKit. It should be able to build any image, not only for the machine learning development environment.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a comparison:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Features&lt;&#x2F;th&gt;&lt;th&gt;v0&lt;&#x2F;th&gt;&lt;th&gt;v1&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;is default for &lt;code&gt;envd&amp;lt;v1.0&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;✅&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;support dev&lt;&#x2F;td&gt;&lt;td&gt;✅&lt;&#x2F;td&gt;&lt;td&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;support CUDA&lt;&#x2F;td&gt;&lt;td&gt;✅&lt;&#x2F;td&gt;&lt;td&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;support serving&lt;&#x2F;td&gt;&lt;td&gt;⚠️&lt;&#x2F;td&gt;&lt;td&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;support custom base image&lt;&#x2F;td&gt;&lt;td&gt;⚠️&lt;&#x2F;td&gt;&lt;td&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;support installing multiple languages&lt;&#x2F;td&gt;&lt;td&gt;⚠️&lt;&#x2F;td&gt;&lt;td&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;support &lt;code&gt;moby&lt;&#x2F;code&gt; builder&lt;&#x2F;td&gt;&lt;td&gt;❌&lt;&#x2F;td&gt;&lt;td&gt;✅&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;make-it-faster&quot;&gt;Make it faster&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd&#x2F;blob&#x2F;3b5fae2de801b6e8fee98d1f2e743dce63a20085&#x2F;pkg&#x2F;lang&#x2F;ir&#x2F;v1&#x2F;system.go#L346&quot;&gt;&lt;code&gt;compileBaseImage&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function should be able to run faster. You can try it if you&#x27;re interested in the &lt;code&gt;envd&lt;&#x2F;code&gt; development.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;regrets&quot;&gt;Regrets&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd&#x2F;pull&#x2F;972&quot;&gt;state-based implementation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This feature will make it much more powerful, but also comes with complexity.&lt;&#x2F;p&gt;
&lt;p&gt;Users can use low-level operators to build the graph. We can execute the commands from &lt;code&gt;envd&lt;&#x2F;code&gt; file in the user-defined order.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorchord&#x2F;envd&#x2F;pull&#x2F;1459&quot;&gt;incremental development environment&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Lots of development environments are not built in one shot. This proposal wants to track the changes in the running environment and update the &lt;code&gt;envd&lt;&#x2F;code&gt; file accordingly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;It is the first time that I can work on an open source project as my daily work.I have learned a lot from the community. I hope more people can benefit from &lt;code&gt;envd&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>PyChon China 2022 - envd</title>
		<published>2022-12-17T00:00:00+00:00</published>
		<updated>2022-12-17T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/pycon-china-2022-envd/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/pycon-china-2022-envd/</id>
		<content type="html">&lt;p&gt;Develop machine learning applications inside the containers&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;presentation&#x2F;d&#x2F;e&#x2F;2PACX-1vTPrXjF_ae__fJv5F7W_n8W10NT8Fqu04sLbucd7vtgjEsV67De5xPMj1cOdEnif5IXOMLCu_yxZf0v&#x2F;embed?start=false&amp;loop=false&amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;960&quot; height=&quot;569&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Why not multiprocessing</title>
		<published>2021-09-29T00:00:00+00:00</published>
		<updated>2021-09-29T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/python-multiprocessing/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/python-multiprocessing/</id>
		<content type="html">&lt;p&gt;Be careful to use multiprocessing in production.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;start-from-a-segment-fault&quot;&gt;start from a segment fault&lt;&#x2F;h2&gt;
&lt;p&gt;Here is a code snippet that will run well on Darwin but trigger a segment fault on Unix.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;multiprocessing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;mp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;sleep
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;wait_for_event&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;is_set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;trigger_segment_fault&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;get_context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;spawn&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;wait_for_event, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(event,))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# this will show the exitcode=-SIGSEGV
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print(p)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;terminate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;__main__&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;trigger_segment_fault&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yeah, the pure Python code can trigger a segment fault.&lt;&#x2F;p&gt;
&lt;p&gt;The reason is because of the new process start method. According to the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;multiprocessing.html#contexts-and-start-methods&quot;&gt;Python document&lt;&#x2F;a&gt;, &lt;code&gt;spawn&lt;&#x2F;code&gt; is the default one on macOS (start from Python 3.8) while &lt;code&gt;fork&lt;&#x2F;code&gt; is the default one on Unix. But the start method also affects the &lt;code&gt;Event&lt;&#x2F;code&gt; creation. Let&#x27;s check the source code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._cond &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Condition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Semaphore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The initialization takes a &lt;code&gt;ctx&lt;&#x2F;code&gt; which is related to the start method. So when you try to access a forked event in a spawned process, this segment fault occurs. The way to solve this is simple -- using the same context. (Actually, you can use the &lt;em&gt;spawn&lt;&#x2F;em&gt; event in the forked process)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fork-or-spawn&quot;&gt;&lt;em&gt;fork&lt;&#x2F;em&gt; or &lt;em&gt;spawn&lt;&#x2F;em&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Another question is that, which start method should I use?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;spawn&lt;&#x2F;em&gt;: The parent process starts a &lt;strong&gt;fresh&lt;&#x2F;strong&gt; python interpreter process. The child process will only inherit those resources necessary to run the process objects run() method. In particular, unnecessary file descriptors and handles from the parent process will not be inherited.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;fork&lt;&#x2F;em&gt;: The parent process uses &lt;code&gt;os.fork()&lt;&#x2F;code&gt; to fork the Python interpreter. The child process, when it begins, is effectively identical to the parent process. All resources of the parent are inherited by the child&#x27;s process. Note that safely forking a multithreaded process is &lt;strong&gt;problematic&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We can see that &lt;em&gt;spawn&lt;&#x2F;em&gt; will create a new Python process and only inherit necessary resources. &lt;em&gt;fork&lt;&#x2F;em&gt; will call the underlying &lt;code&gt;os.fork()&lt;&#x2F;code&gt;, but the implementation in CPython is problematic.&lt;&#x2F;p&gt;
&lt;p&gt;When you are using &lt;em&gt;spawn&lt;&#x2F;em&gt;, accidentally access the main process variables may have some unexpected consequences.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;multiprocessing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;mp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Dummy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;init in pid: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getpid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Dummy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;x is None&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;__main__&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;get_context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;spawn&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;task)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above code snippet, if the &lt;em&gt;spawn&lt;&#x2F;em&gt; process tries to access the variable &lt;code&gt;x&lt;&#x2F;code&gt;, it will trigger the initialization of both &lt;code&gt;Dummy()&lt;&#x2F;code&gt; and &lt;code&gt;x = None&lt;&#x2F;code&gt;. So you can see the terminal will print two &amp;quot;init in pid&amp;quot; with different PIDs.&lt;&#x2F;p&gt;
&lt;p&gt;So what kind of problem can the &lt;em&gt;fork&lt;&#x2F;em&gt; cause? Let&#x27;s take a look at this article: &lt;a href=&quot;https:&#x2F;&#x2F;pythonspeed.com&#x2F;articles&#x2F;python-multiprocessing&#x2F;&quot;&gt;Why your multiprocessing Pool is stuck (it’s full of sharks!)&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;threading
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;multiprocessing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;mp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;AreYouOK&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;init in:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getpid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.lock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.lock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;locked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;acquire&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.lock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;acquire&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;delay_release&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;.lock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;greeter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;AreYouOK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;greeter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;acquire&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;threading.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;greeter.delay_release, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;daemon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;greeting&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print(os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;getpid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(), greeter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;check&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;__main__&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;get_context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;fork&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;greeting).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;greeting&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above example, after the lock is released, the child process still cannot acquire the lock. Why?&lt;&#x2F;p&gt;
&lt;p&gt;The main point is that fork doesn&#x27;t copy everything.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s check the &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man2&#x2F;fork.2.html&quot;&gt;man page of fork&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The child does not inherit its parent&#x27;s memory locks&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The child does not inherit semaphore adjustments from its parent&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So what happens here is that the child process has a lock already been acquired, but no thread will release the lock because that running thread won&#x27;t be copied to the &lt;em&gt;fork&lt;&#x2F;em&gt; process. These two locks are not the same (copied not shared). Here, the &lt;code&gt;threading.Lock&lt;&#x2F;code&gt; is obviously not process-safe and should be handled with cautions when it&#x27;s used in some other libraries (&lt;code&gt;queue.Queue&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;If we use &lt;em&gt;spawn&lt;&#x2F;em&gt; instead of &lt;em&gt;fork&lt;&#x2F;em&gt;, everything related will be &lt;strong&gt;rebuilt&lt;&#x2F;strong&gt; in the new process (including the Thread). That&#x27;s why  we should use &lt;em&gt;spawn&lt;&#x2F;em&gt; instead of &lt;em&gt;fork&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;multiprocessing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;set_start_method
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;set_start_method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;spawn&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code snippet above may cause some problems when the code is executed more than once.&lt;&#x2F;p&gt;
&lt;p&gt;My suggestion is to use the start method context:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;multiprocessing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;mp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;get_context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;spawn&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;garbage-collection-with-deadlock&quot;&gt;garbage collection with deadlock&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s take a look at another article: &lt;a href=&quot;https:&#x2F;&#x2F;codewithoutrules.com&#x2F;2017&#x2F;08&#x2F;16&#x2F;concurrency-python&#x2F;&quot;&gt;The tragic tale of the deadlocking Python queue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This code snippet is copied from the above article.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;queue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Queue
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Circular&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.circular &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;__del__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;Adding to queue in GC&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;range(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1000000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;iteration&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, i)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Create an object that will be garbage collected
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# asynchronously, and therefore have its __del__
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# method called later:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Circular&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;Adding to queue regularly&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Usually, we believe that Python runs one line at a time. But that&#x27;s not true.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Garbage collection can interrupt Python functions at any point, and run arbitrary other Python code: &lt;code&gt;__del__&lt;&#x2F;code&gt; methods and &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;weakref.html&quot;&gt;weakref&lt;&#x2F;a&gt; callbacks. So can signal handlers, which happen e.g. when you hit Ctrl-C (your process gets the SIGINT signal) or a subprocess dies (your process gets the SIGCHLD signal).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So when we try to &lt;code&gt;q.put(2)&lt;&#x2F;code&gt;, the queue needs to acquire the lock. Meanwhile, the GC will try to call the &lt;code&gt;__del__&lt;&#x2F;code&gt; which also does the &lt;code&gt;q.put(1)&lt;&#x2F;code&gt;. The &lt;code&gt;q.put(2)&lt;&#x2F;code&gt; is blocked by the GC, but the GC cannot acquire the lock because &lt;code&gt;q.put(2)&lt;&#x2F;code&gt; won&#x27;t release it. Deadlock happens!&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to the Python-dev team, this has been fixed in Python 3.7 by introducing the &lt;code&gt;SimpleQueue&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;copy-on-write&quot;&gt;Copy on write&lt;&#x2F;h2&gt;
&lt;p&gt;When running with multiprocessing, we hope the child process can share some data with the main process instead of copying from it. Especially when they are not used in the child process. This sounds reasonable. However, we missed another important part in Python: reference counting.&lt;&#x2F;p&gt;
&lt;p&gt;CPython contains two kinds of garbage collection methods: reference counting and generational garbage collection. The reference counting is the fundamental one and cannot be disabled. The generational garbage collection is mainly used to solve the reference cycles. Check this article for more details: &lt;a href=&quot;https:&#x2F;&#x2F;rushter.com&#x2F;blog&#x2F;python-garbage-collector&#x2F;&quot;&gt;Garbage collection in Python: things you need to know&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;devguide.python.org&#x2F;garbage_collector&#x2F;&quot;&gt;Design of CPython’s Garbage Collector&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look at the CPython implementation of PyObject:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; _object {
&lt;&#x2F;span&gt;&lt;span&gt;    _PyObject_HEAD_EXTRA
&lt;&#x2F;span&gt;&lt;span&gt;    Py_ssize_t ob_refcnt;
&lt;&#x2F;span&gt;&lt;span&gt;    PyTypeObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ob_type;
&lt;&#x2F;span&gt;&lt;span&gt;} PyObject;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a class member called &lt;code&gt;ob_refcnt&lt;&#x2F;code&gt; which is used to track the reference counting. If we call &lt;code&gt;fork()&lt;&#x2F;code&gt; in the new process, the reference counting of all the Python objects will increase. This means the object itself has changed although the data accessed by the user is still the same.&lt;&#x2F;p&gt;
&lt;!-- 
```python
import sys
import multiprocessing as mp


data = list(range(1000))

def get_ref_count():
    print(&quot;child process&quot;, sys.getrefcount(data))


if __name__ == &quot;__main__&quot;:
    print(&quot;main process:&quot;, sys.getrefcount(data))
    p = mp.get_context(&quot;spawn&quot;).Process(target=get_ref_count)
    p.start()
    p.join()
```

If we run the code above, we will see that the default reference count is 2 (because the function `sys.getrefcount()` will increase it by 1). In the child process, the reference count has changed to 3. --&gt;
&lt;p&gt;To handle this problem, the Instagram Engineering team has come up with a solution: &lt;a href=&quot;https:&#x2F;&#x2F;instagram-engineering.com&#x2F;copy-on-write-friendly-python-garbage-collection-ad6ed5233ddf&quot;&gt;Copy-on-write friendly Python garbage collection&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span&gt; PyObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;gc_freeze_impl&lt;&#x2F;span&gt;&lt;span&gt;(PyObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;*[clinic end generated code: output=502159d9cdc4c139 input=b602b16ac5febbe5]*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    GCState &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;gcstate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;get_gc_state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; NUM_GENERATIONS; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;i) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;gc_list_merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;GEN_HEAD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(gcstate, i), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;gcstate-&amp;gt;permanent_generation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        gcstate-&amp;gt;generations[i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    Py_RETURN_NONE;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s check the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;gc.html#gc.freeze&quot;&gt;Python document for GC&lt;&#x2F;a&gt;. In Python 3.7, it introduced a new method called &lt;code&gt;gc.freeze&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!-- Let&#x27;s modify the code to:

```python
import sys
import gc
import multiprocessing as mp


data = list(range(1000))

def get_ref_count():
    print(&quot;child process&quot;, sys.getrefcount(data))


if __name__ == &quot;__main__&quot;:
    gc.freeze()
    print(&quot;main process:&quot;, sys.getrefcount(data))
    p = mp.get_context(&quot;spawn&quot;).Process(target=get_ref_count)
    p.start()
    p.join()
```

It works now. The reference count in the child process is the same as the main process. --&gt;
&lt;p&gt;So will this solve the Copy-on-write problem? I&#x27;m not sure because I cannot come up with an example to reproduce it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;psutil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;multiprocessing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;mp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;display_memory_usage&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    process &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;psutil.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;print(msg, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, process.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;memory_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;processing&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;display_memory_usage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;child &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;__main__&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(range(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;10000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;mp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;get_context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;fork&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;processing)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;display_memory_usage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;parent&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code snippet above will print the memory usage of the main process and child process. You may get something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;child  &amp;gt; pmem(rss=414748672, vms=427634688, shared=2969600, text=2035712, lib=0, data=411791360, dirty=0)
&lt;&#x2F;span&gt;&lt;span&gt;parent &amp;gt; pmem(rss=419000320, vms=427634688, shared=7221248, text=2035712, lib=0, data=411791360, dirty=0)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see that they don&#x27;t share a lot. Although by default, the &lt;em&gt;fork&lt;&#x2F;em&gt; process should share the data with the parent process.&lt;&#x2F;p&gt;
&lt;p&gt;But if we change it to &lt;em&gt;spawn&lt;&#x2F;em&gt;, we will get something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;child  &amp;gt; pmem(rss=13848576, vms=23044096, shared=7069696, text=2035712, lib=0, data=7163904, dirty=0)
&lt;&#x2F;span&gt;&lt;span&gt;parent &amp;gt; pmem(rss=419139584, vms=428081152, shared=7196672, text=2035712, lib=0, data=412200960, dirty=0)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since the &lt;code&gt;data&lt;&#x2F;code&gt; is not used by the &lt;em&gt;spawn&lt;&#x2F;em&gt; process, so this won&#x27;t be copied to the new process.&lt;&#x2F;p&gt;
&lt;p&gt;I try to add the &lt;code&gt;gc.freeze()&lt;&#x2F;code&gt; before creating a new process, but it doesn&#x27;t work at all. Not sure what I have missed.&lt;&#x2F;p&gt;
&lt;p&gt;I found that some discussion in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;python&#x2F;cpython&#x2F;pull&#x2F;3705#issuecomment-420191452&quot;&gt;&lt;code&gt;gc.freeze()&lt;&#x2F;code&gt; PR&lt;&#x2F;a&gt;. It looks that the untouched data should be able to share among processes. Also, it has been 4 years for Gunicorn to process this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;benoitc&#x2F;gunicorn&#x2F;issues&#x2F;1640&quot;&gt;support for &lt;code&gt;gc.freeze()&lt;&#x2F;code&gt; for apps that use preloading&lt;&#x2F;a&gt;. I cannot found a good example to demonstrate that this method works well.&lt;&#x2F;p&gt;
&lt;p&gt;To my understanding, the &lt;code&gt;gc.freeze()&lt;&#x2F;code&gt; will disable the generational garbage collection. But the reference counting cannot be disabled. So if we &lt;em&gt;fork&lt;&#x2F;em&gt; a new process, everything will be shared with the new process, which means it will change all the reference count.&lt;&#x2F;p&gt;
&lt;p&gt;If we change the start method from &lt;em&gt;spawn&lt;&#x2F;em&gt; to &lt;em&gt;fork&lt;&#x2F;em&gt;, it doesn&#x27;t need the &lt;code&gt;gc.freeze()&lt;&#x2F;code&gt; to freeze the reference count, which has conflicts with the description in the Instagram blog.&lt;&#x2F;p&gt;
&lt;p&gt;Is there any method to avoid this? Yes. Check another blog written before the Instagram blog: &lt;a href=&quot;https:&#x2F;&#x2F;llvllatrix.wordpress.com&#x2F;2016&#x2F;02&#x2F;19&#x2F;python-vs-copy-on-write&#x2F;&quot;&gt;Python vs Copy on Write&lt;&#x2F;a&gt;. The solution is very straightforward:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can just use the &lt;a href=&quot;https:&#x2F;&#x2F;www.pypy.org&#x2F;&quot;&gt;PyPy&lt;&#x2F;a&gt; because it has &lt;a href=&quot;https:&#x2F;&#x2F;doc.pypy.org&#x2F;en&#x2F;latest&#x2F;cpython_differences.html#differences-related-to-garbage-collection-strategies&quot;&gt;a different way for garbage collection&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;You can use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;multiprocessing.html#shared-ctypes-objects&quot;&gt;Shared &lt;code&gt;ctypes&lt;&#x2F;code&gt; Objects&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;You can use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;multiprocessing.shared_memory.html&quot;&gt;shared memory&lt;&#x2F;a&gt; for Python &amp;gt;= 3.8.&lt;&#x2F;li&gt;
&lt;li&gt;You can use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;mmap.html&quot;&gt;mmap&lt;&#x2F;a&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;pythonspeed.com&#x2F;articles&#x2F;reduce-memory-array-copies&#x2F;&quot;&gt;reduce memory usage of array copies&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;suggestions&quot;&gt;Suggestions&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Try to use Go, Rust, or C++ to do concurrency computing.&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;em&gt;spawn&lt;&#x2F;em&gt; instead of &lt;em&gt;fork&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Be careful about the garbage collection behavior.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>CI&#x2F;CD for data science</title>
		<published>2021-04-13T00:00:00+00:00</published>
		<updated>2021-04-13T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/cicd-for-data-science/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/cicd-for-data-science/</id>
		<content type="html">&lt;p&gt;Lots of people are talking about MLOps recently. Continuous Integration (CI) and Continuous Delivery&#x2F;Deployment (CD) are the basic requirements for MLOps. This post will focus on some details about CI&#x2F;CD for data science.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;First of all, I want to declare that data science here means training machine learning (including deep learning) models and serving online requests. Most of the parts may look similar to the traditional backend services.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code&quot;&gt;Code&lt;&#x2F;h2&gt;
&lt;p&gt;Usually, the deep learning models require batch inference to fully utilize the GPU resources. I know there are lots of frameworks, for example, TensorFlow serving, Nvidia triton serving, AWS multi-model serving, etc. I do have built a better one (in my opinion). Or maybe you are still using Flask&#x2F;FastAPI&#x2F;Falcon to serve the models. It doesn&#x27;t matter for the CI&#x2F;CD part.&lt;&#x2F;p&gt;
&lt;p&gt;Logging is essential for online services. This one needs to be compatible with your log collectors. The most user-friendly way is sending JSON format logs to &lt;code&gt;stderr&lt;&#x2F;code&gt;. So the user doesn&#x27;t need to take care of log format, log file rotation, multiprocessing logging.&lt;&#x2F;p&gt;
&lt;p&gt;Another important part is the metrics monitoring. The ingress or service mesh may already have traffic monitoring. But the services need to collect more detailed metrics for monitoring and debugging. For example, you may want to know some distribution of the user requests and model batch inference time for different batch sizes.&lt;&#x2F;p&gt;
&lt;p&gt;Apart from that, machine learning models may need to collect some feedback from the online services for future training or debugging. This requirement is similar to logging.&lt;&#x2F;p&gt;
&lt;p&gt;To deploy the services into a cluster, the health check is fundamental but doesn&#x27;t get enough attention. For example, if you are using Kubernetes, usually you will need to provide the liveness and readiness probe. One is for the web service and another is for the model inference part. The health check can help us know the status of all the services so the load balancer can route the requests to the health services.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;&#x2F;h2&gt;
&lt;p&gt;I think there are lots of good materials talking about the best practices for the Dockerfile. I would like to list some of them:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;develop&#x2F;develop-images&#x2F;dockerfile_best-practices&#x2F;&quot;&gt;Dockerfile best practices&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pythonspeed.com&#x2F;docker&#x2F;&quot;&gt;Production-ready Docker packaging&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.docker.com&#x2F;blog&#x2F;intro-guide-to-dockerfile-best-practices&#x2F;&quot;&gt;Intro Guide to Dockerfile Best Practices&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cheatsheetseries.owasp.org&#x2F;cheatsheets&#x2F;Docker_Security_Cheat_Sheet.html&quot;&gt;Docker Security Cheat Sheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For the GPU container, I prefer to build from the CUDA runtime base image and install all the GPU-related libraries with miniconda. You may run into a lot of &lt;code&gt;xxx.so not found&lt;&#x2F;code&gt; errors. Remember, &lt;code&gt;ldconfig&lt;&#x2F;code&gt; can solve most of them unless the libraries are not installed.&lt;&#x2F;p&gt;
&lt;p&gt;One thing you need to pay attention to is the first PID in the container. Lots of people are using shell scripts to start the services. In this case, the first PID process will be the shell command instead of the real services. But when we need to terminate the service gracefully, the shell command will receive the &lt;code&gt;SIGTERM&lt;&#x2F;code&gt; signal and it won&#x27;t forward the signal to the child processes. If it doesn&#x27;t shut down in the pre-defined timeout, all the processes in the container will receive the &lt;code&gt;SIGKILL&lt;&#x2F;code&gt; signal.&lt;&#x2F;p&gt;
&lt;p&gt;There are some tools to handle this problem. But none of them are perfect. The most important thing is that your code should handle the graceful shutdown and forward the signal to its children processes.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;tini: https:&#x2F;&#x2F;github.com&#x2F;krallin&#x2F;tini&lt;&#x2F;li&gt;
&lt;li&gt;exec: https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;18351547&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;&#x2F;h2&gt;
&lt;p&gt;In fact, Kubernetes is the container scheduling and orchestration standard. The cluster is maintained by the SRE. But it&#x27;s good to know how does everything works.&lt;&#x2F;p&gt;
&lt;p&gt;Although some tools (NVIDIA A100 or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DualCoder&#x2F;vgpu_unlock&quot;&gt;vgpu_unlock&lt;&#x2F;a&gt;) can enable GPU virtualization, most of the time one container will take one GPU. This means the container should consume as much as it can to increase resource utilization.&lt;&#x2F;p&gt;
&lt;p&gt;When you found that you cannot reach the target services, you may need to check the ingress settings. For deep learning models, the request may reach the body size limitation. Getting familiar with the load balancer you are using can reduce a lot of effort for debugging.&lt;&#x2F;p&gt;
&lt;p&gt;For machine learning services, we need to version both the code and the model. The code part is easy, just use Git. But it&#x27;s a bad idea to use Git Large File Storage (Git LFS) to version the model. The Git storage is not designed to store such kind of large files (hundreds of megabytes or more for each version). The maintainer may send you a warning email : (.&lt;&#x2F;p&gt;
&lt;p&gt;For now, I use special Git tags to trace the model version. When I need to update the corresponding model version with the code commit, I will create a Git tag like &lt;code&gt;model-v1.0&lt;&#x2F;code&gt; and CI will help me package the new model from HDFS to the container registry. During the CD, the script will use the latest tag for the model image. This decoupled the code and model.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@christianberzi&#x2F;using-kubernetes-init-containers-to-decouple-the-deployment-of-machine-learning-applications-from-1d557ad52b99&quot;&gt;Using Kubernetes Init Containers to decouple the deployment of machine learning applications from their models&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;automation&quot;&gt;Automation&lt;&#x2F;h2&gt;
&lt;p&gt;Depends on which tools you are using, for example, Jenkins, GitLab CI Runner, GitHub Actions. I have to say that YAML is annoying. Hope there can be a better config format.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summarization&quot;&gt;Summarization&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m glad to see that there are lots of new tools coming out. Data science is a new and fast-growing area. MLOps is going to be an important part of all the companies that require machine learning solutions. We can still benefit a lot from the backend experiences. But we also need to explore the possibility of new tools to empower the data science development and deployment procedure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;martinfowler.com&#x2F;articles&#x2F;cd4ml.html&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;manjusaka.itscoder.com&#x2F;posts&#x2F;2021&#x2F;02&#x2F;28&#x2F;damn-the-init-process&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Long Time No See</title>
		<published>2021-03-30T00:00:00+00:00</published>
		<updated>2021-03-30T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/long-time-no-see/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/long-time-no-see/</id>
		<content type="html">&lt;p&gt;Why haven&#x27;t you post any blogs for the past half year?
In short, I&#x27;m too lazy.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;During the pandemic and circuit breaker, people are advised to stay at home and keep a safe distance. I thought that won&#x27;t affect my life since I&#x27;m a typical otaku. The truth is that this kind of environment will still bring some mental health problems. Fresh air, blue sky, shining stars, all the natural things become very attractive. Thankfully, I can get up early and go hiking in the park if I want now.&lt;&#x2F;p&gt;
&lt;p&gt;One thing that takes me a lot of time is preparing for the interviews. I do learn a lot after I became an interviewer. Now I understand that even though a lot of programmers don&#x27;t like the leetcode style coding questions, we don&#x27;t have very good alternative ways to know if the candidates are good at programming or not. However, as an interviewer, I try to come up with some coding questions that don&#x27;t require a lot of time to practice in the leetcode coding questions. Usually, these questions are related to algorithm implementations which only require basic data structure and programming language knowledge. For a qualified programmer, it won&#x27;t be a problem to solve them. So the coding practices will be an important standard.&lt;&#x2F;p&gt;
&lt;p&gt;However, as an interviewee, I&#x27;m still worried about the leetcode style questions. That&#x27;s why I speed a lot of time practicing. I know it&#x27;s ironic and pathetic. And sadly, I found that nobody gave me a hard leetcode question to stop me from getting the offer. It seems that there are too many articles talking about how hard the coding interview could be. Whether you don&#x27;t have good computer science knowledge or the company doesn&#x27;t want to hire more people at that time. Maybe for some very attractive positions, things will be different. That&#x27;s what we call &amp;quot;involution&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;During this period, I have talked to a lot of people from the Internet. Some of them are remarkably self-discipline. They keep working on and contributing to open-source projects. I used to maintain a small one, so I know how hard it will be. Especially when you are busy with something else. They also keep writing blogs to record what they have learned recently. I tried to do something similar in the past. But I didn&#x27;t stick to it. I know that without output, it&#x27;s hard to know how much I have learned.&lt;&#x2F;p&gt;
&lt;p&gt;Speaking of notes, I have tried a lot of products. OneNote, WizNote, Evernote, Typora, Foam, Jupyter Notebook, GitHub Gist, etc. After all, I&#x27;m tired of changing the platform. So I decide to use Markdown + GitHub private repo + &lt;code&gt;ripgrep&lt;&#x2F;code&gt;. That&#x27;s enough for me now. And it works very well. GitHub issues are another thing that can be used as a notebook. And you can get the (semantic?) search feature for free.&lt;&#x2F;p&gt;
&lt;p&gt;I will try to use English to write blogs to practice my poor written skills. All beginnings are hard. But it worth trying.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Note for Resilient Distributed Datasets</title>
		<published>2021-03-01T00:00:00+00:00</published>
		<updated>2021-03-01T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/spark/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/spark/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;people.csail.mit.edu&#x2F;matei&#x2F;papers&#x2F;2012&#x2F;nsdi_spark.pdf&quot;&gt;Resilient Distributed Datasets: A Fault-Tolerant Abstraction forIn-Memory Cluster Computing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;blockquote&gt;
&lt;p&gt;RDD is read-only, partitioned collection of records that can only be created through deterministic operations on either data in stable storage or other RDDs.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;RDDs are best suited for batch analytics that apply the same operation to all elements of a dataset.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;transformations&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;lazy operations&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;map&lt;&#x2F;li&gt;
&lt;li&gt;filter&lt;&#x2F;li&gt;
&lt;li&gt;flatMap&lt;&#x2F;li&gt;
&lt;li&gt;sample&lt;&#x2F;li&gt;
&lt;li&gt;groupByKey&lt;&#x2F;li&gt;
&lt;li&gt;reduceByKey&lt;&#x2F;li&gt;
&lt;li&gt;union&lt;&#x2F;li&gt;
&lt;li&gt;join&lt;&#x2F;li&gt;
&lt;li&gt;cogroup&lt;&#x2F;li&gt;
&lt;li&gt;crossProduct&lt;&#x2F;li&gt;
&lt;li&gt;mapValues&lt;&#x2F;li&gt;
&lt;li&gt;sort&lt;&#x2F;li&gt;
&lt;li&gt;partitionBy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;actions&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;launch a computation to return a value to the program or write data to external storage&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;count&lt;&#x2F;li&gt;
&lt;li&gt;collect&lt;&#x2F;li&gt;
&lt;li&gt;save&lt;&#x2F;li&gt;
&lt;li&gt;reduce&lt;&#x2F;li&gt;
&lt;li&gt;lookup&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;control&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;persistence&lt;&#x2F;li&gt;
&lt;li&gt;partitioning&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Spark keeps persistent RDDs in memory by default, but it can spill them to disk if there is not enough RAM.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;interface&quot;&gt;interface&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;partitions()&lt;&#x2F;li&gt;
&lt;li&gt;preferredLocations&lt;&#x2F;li&gt;
&lt;li&gt;dependencies()&lt;&#x2F;li&gt;
&lt;li&gt;iterator(p, paarentIters)&lt;&#x2F;li&gt;
&lt;li&gt;partitioner()&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;explain:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a set of partitions&lt;&#x2F;li&gt;
&lt;li&gt;a set of dependencies on parent RDDs
&lt;ul&gt;
&lt;li&gt;narrow&lt;&#x2F;li&gt;
&lt;li&gt;wide&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;a function for computing the dataset based on its parents&lt;&#x2F;li&gt;
&lt;li&gt;metadata about its partitioning scheme and data placement&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;compare-to-distribted-shared-memory&quot;&gt;Compare to Distribted Shared Memory&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dsm&quot;&gt;DSM&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;bulk writes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;rdd&quot;&gt;RDD&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;efficient fault tolerance&lt;&#x2F;li&gt;
&lt;li&gt;immutable nature lets a system mitigate slow nodes by running backup copies of slow tasks&lt;&#x2F;li&gt;
&lt;li&gt;bulk operations can be scheduled based on data locality&lt;&#x2F;li&gt;
&lt;li&gt;degrade gracefully&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementations&quot;&gt;Implementations&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;job-secheduling&quot;&gt;Job secheduling&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;DAG&lt;&#x2F;li&gt;
&lt;li&gt;assign tasks to nodes based on data locality using delay scheduling&lt;&#x2F;li&gt;
&lt;li&gt;materialize intermediate records on the nodes holding parent partitions for wide dependencies&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;interpreter-integration&quot;&gt;Interpreter integration&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;class shipping&lt;&#x2F;li&gt;
&lt;li&gt;modified code generation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;memory-management&quot;&gt;Memory management&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;LRU&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;support-for-checkpointing&quot;&gt;Support for checkpointing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;REPLICATE flag&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Note for MapReduce</title>
		<published>2020-12-25T00:00:00+00:00</published>
		<updated>2020-12-25T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/mapreduce/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/mapreduce/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pdos.csail.mit.edu&#x2F;6.824&#x2F;papers&#x2F;mapreduce.pdf&quot;&gt;MapReduce: Simplified Data Processing on Large Clusters&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;sending code to servers&lt;&#x2F;li&gt;
&lt;li&gt;tracking tasks&lt;&#x2F;li&gt;
&lt;li&gt;moving data from Map to Reduce&lt;&#x2F;li&gt;
&lt;li&gt;load balancing over servers&lt;&#x2F;li&gt;
&lt;li&gt;recovering from failures&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Limit&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;no interaction or state&lt;&#x2F;li&gt;
&lt;li&gt;no multi-stage pipeline&lt;&#x2F;li&gt;
&lt;li&gt;no real-time or streaming processing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Bottleneck&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;network&lt;&#x2F;li&gt;
&lt;li&gt;root switch&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Minimize network use&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;input is read from local disk (via GFS)&lt;&#x2F;li&gt;
&lt;li&gt;Map workers write to local disk&lt;&#x2F;li&gt;
&lt;li&gt;Reduce workers read directly from Map workers&lt;&#x2F;li&gt;
&lt;li&gt;intermediate data partitioned into files holding many keys&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;load balance&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;small tasks&lt;&#x2F;li&gt;
&lt;li&gt;Master hands out new tasks to workers who finish previous tasks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;fault tolerance&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;re-run the failed Maps and Reduces&lt;&#x2F;li&gt;
&lt;li&gt;Map and Reduce must be pure deterministic functions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;worker crash recovery&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Map
&lt;ul&gt;
&lt;li&gt;Master tells other workers to run those lost tasks&lt;&#x2F;li&gt;
&lt;li&gt;omit if Reduce workers already fetched the intermediate data&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Reduce
&lt;ul&gt;
&lt;li&gt;Master re-start worker&#x27;s unfinished tasks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;other failures&#x2F;problems&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Master gives 2 workers the same Map() task: tell Reduce workers about only one of them&lt;&#x2F;li&gt;
&lt;li&gt;Master gives 2 workers the same Reduce() task: GFS handle this&lt;&#x2F;li&gt;
&lt;li&gt;a single worker is very slow: Master starts a 2nd copy of the last few tasks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;conclusion&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;- not the most efficient or flexible
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ scales well
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#718c00;color:#ffffff;&quot;&gt;+ easy to program
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;procedure&quot;&gt;Procedure&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Splits input files into &lt;em&gt;M&lt;&#x2F;em&gt; pieces of typically 16 MB ~ 64 MB per piece.&lt;&#x2F;li&gt;
&lt;li&gt;Master picks idle workers and assigns each one a map task or a reduce task.&lt;&#x2F;li&gt;
&lt;li&gt;Map worker parses the input data and passes each key&#x2F;value pair to the user-defined &lt;em&gt;Map&lt;&#x2F;em&gt; function. Results are buffered in memory.&lt;&#x2F;li&gt;
&lt;li&gt;Periodically write the buffered pairs to local disk, partitioned into &lt;em&gt;R&lt;&#x2F;em&gt; regions. Pass the locations back to the master.&lt;&#x2F;li&gt;
&lt;li&gt;Reduce worker reads all the data through RPC and sorts it by the intermediate keys. An external sort is used when the intermediate data is too large to fit in memory.&lt;&#x2F;li&gt;
&lt;li&gt;Reduce worker passes the keys and the corresponding set of intermediate values to the user-defined &lt;em&gt;Reduce&lt;&#x2F;em&gt; function. Results are appended to a final output file.&lt;&#x2F;li&gt;
&lt;li&gt;After all map and reduce tasks have been completed, master wakes up the user program.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;master-data-structure&quot;&gt;Master Data Structure&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;State {
&lt;&#x2F;span&gt;&lt;span&gt;  idle,
&lt;&#x2F;span&gt;&lt;span&gt;  in_progress,
&lt;&#x2F;span&gt;&lt;span&gt;  completed,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Task {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: State,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;localtion&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fault-tolerance&quot;&gt;Fault Tolerance&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;worker failure&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;master pings every worker periodically&lt;&#x2F;li&gt;
&lt;li&gt;if no response, marks the worker as falied&lt;&#x2F;li&gt;
&lt;li&gt;any map tasks completed by the failed worker are reset (because the results are stored locally)&lt;&#x2F;li&gt;
&lt;li&gt;any map tasks or reduce tasks in progress on the failed worker are reset&lt;&#x2F;li&gt;
&lt;li&gt;notify the reduce worker&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;master failure&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;checkpoints for recovery&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;locality&quot;&gt;Locality&lt;&#x2F;h3&gt;
&lt;p&gt;The MapReduce master takes the location information of the input files into account and attempts to schedule a map task on a
machine that contains a replica of the coressponding input data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;task-granularity&quot;&gt;Task Granularity&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;scheduling: &lt;code&gt;O(M+R)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;states: &lt;code&gt;O(M*R)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;each piece of input data size: 16 MB to 64 MB&lt;&#x2F;li&gt;
&lt;li&gt;M = 200,000&lt;&#x2F;li&gt;
&lt;li&gt;R = 5,000&lt;&#x2F;li&gt;
&lt;li&gt;workers = 2,000&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;backup-tasks&quot;&gt;Backup Tasks&lt;&#x2F;h3&gt;
&lt;p&gt;When a MapReduce operation is close to completion, the master schedules backup executions of the remaining &lt;em&gt;in-progress&lt;&#x2F;em&gt; tasks.
The task is marked as completed whenever either the primary or the backup execution completes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;partitioning-function&quot;&gt;Partitioning Function&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;hash(func(key)) mod R&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ordering-guarantees&quot;&gt;Ordering Guarantees&lt;&#x2F;h3&gt;
&lt;p&gt;Within a given partition, the intermediate key&#x2F;value pairs are processed in increasing key order.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;combiner-function&quot;&gt;Combiner Function&lt;&#x2F;h3&gt;
&lt;p&gt;(Optional) Combiner function defined by user will partial merging the data after Map before sending to Reduce worker.&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes this can significantly speeds up the MapReduce operations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;input-and-output-types&quot;&gt;Input and Output Types&lt;&#x2F;h3&gt;
&lt;p&gt;Default &lt;em&gt;reader&lt;&#x2F;em&gt; function: the key is the offset in the file and the value is the contents of the line.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;skipping-bad-records&quot;&gt;Skipping Bad Records&lt;&#x2F;h3&gt;
&lt;p&gt;Each worker process installs a signal handler that catches segementation violations and bus errors. It will send a &amp;quot;last gasp&amp;quot; UDP packet that contains the sequence number to the master. When the master has seen more than one failure on a particular record, it indicates that the record should be skipped.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;counters&quot;&gt;Counters&lt;&#x2F;h3&gt;
&lt;p&gt;The counter values from individual worker machines are periodically propagated to the master (piggybacked on the ping response).&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Deep Learning Serving Framework</title>
		<published>2020-05-13T00:00:00+00:00</published>
		<updated>2020-05-13T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/deep-learning-serving/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/deep-learning-serving/</id>
		<content type="html">&lt;p&gt;Yet another deep learning serving framework that is easy to use.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Previously, I tested the performance of some &lt;a href=&quot;https:&#x2F;&#x2F;blog.mapotofu.org&#x2F;blogs&#x2F;serving-benchmark&#x2F;&quot;&gt;deep learning serving frameworks&lt;&#x2F;a&gt; like TensorFlow Serving, Triton, and I found that these frameworks are not that easy to use. By the way, they don&#x27;t have much advantage in the performance. So I just write one as a prototype.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kemingy&#x2F;ventu&quot;&gt;ventu&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kemingy&#x2F;batching&quot;&gt;batching&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;del&gt;Feel free to give it a try.&lt;&#x2F;del&gt; For production usage, check the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mosecorg&#x2F;mosec&quot;&gt;MOSEC&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basic-features&quot;&gt;Basic features&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;serve the deep learning models (HTTP)&lt;&#x2F;li&gt;
&lt;li&gt;preprocess and postprocess (optional)&lt;&#x2F;li&gt;
&lt;li&gt;dynamic batching (increase the throughput)&lt;&#x2F;li&gt;
&lt;li&gt;load balancing (idle workers first)&lt;&#x2F;li&gt;
&lt;li&gt;monitoring metrics (Prometheus)&lt;&#x2F;li&gt;
&lt;li&gt;health check (need to provide examples)&lt;&#x2F;li&gt;
&lt;li&gt;request &amp;amp; response validation&lt;&#x2F;li&gt;
&lt;li&gt;model inference warm-up (need to provide examples)&lt;&#x2F;li&gt;
&lt;li&gt;OpenAPI document&lt;&#x2F;li&gt;
&lt;li&gt;supports both JSON and msgpack serialization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;advantages&quot;&gt;Advantages&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;support all kinds of deep learning runtime&lt;&#x2F;li&gt;
&lt;li&gt;easy to implement the preprocess and postprocess part&lt;&#x2F;li&gt;
&lt;li&gt;validation for request&lt;&#x2F;li&gt;
&lt;li&gt;health check and warm-up with examples&lt;&#x2F;li&gt;
&lt;li&gt;OpenAPI document&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;design&quot;&gt;Design&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;                                       +-----------+
&lt;&#x2F;span&gt;&lt;span&gt;                                       | Inference |
&lt;&#x2F;span&gt;&lt;span&gt;                               +-------+ Worker    |
&lt;&#x2F;span&gt;&lt;span&gt;                               |       +-----------+
&lt;&#x2F;span&gt;&lt;span&gt;+----------+        +--------+ |
&lt;&#x2F;span&gt;&lt;span&gt;|          |        |        +-+       +-----------+
&lt;&#x2F;span&gt;&lt;span&gt;| Batching |        | Unix   |         | Inference |
&lt;&#x2F;span&gt;&lt;span&gt;| Service  +--------&amp;gt; Domain +---------+ Worker    |
&lt;&#x2F;span&gt;&lt;span&gt;| (HTTP)   &amp;lt;--------+ Socket |         +-----------+
&lt;&#x2F;span&gt;&lt;span&gt;|          |        |        +-+
&lt;&#x2F;span&gt;&lt;span&gt;+----------+        +--------+ |       +-----------+
&lt;&#x2F;span&gt;&lt;span&gt;                               |       | Inference |
&lt;&#x2F;span&gt;&lt;span&gt;                               +-------+ Worker    |
&lt;&#x2F;span&gt;&lt;span&gt;                                       +-----------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dynamic-batching&quot;&gt;Dynamic Batching&lt;&#x2F;h3&gt;
&lt;p&gt;To implement the dynamic batching, we need a high-performance job queue that can be consumed by multiple workers. Go channel will be a good choice. In this situation, we have one producer and multiple consumers, so it&#x27;s very easy to close the channel for the graceful shutdown.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Batching &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;Name       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; socket name
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;socket     net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Listener
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;maxLatency time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Duration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; max latency for a batch inference to wait
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;batchSize  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; max batch size for a batch inference
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;capacity   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; the capacity of the batching queue
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;timeout    time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Duration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; timeout for jobs in the queue
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;logger     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;zap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Logger
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;queue      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Job &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; job queue
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;jobs       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Job &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; use job id as the key to find the job
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;jobsLock   sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Mutex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; lock for jobs
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For jobs in this queue, we need to create a UUID as a key. So after the inference, we can find this job by searching the key in a hash table. That means we also need a mutex for the hash table.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Job &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;id        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;done      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;chan &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;bool
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;data      &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; request data
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;result    &lt;&#x2F;span&gt;&lt;span&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;byte &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; inference result or error message
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;errorCode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; HTTP Error Code
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;expire    time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Time
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because the batching service and Python inference workers are on the same machine (or the same pod), so the most efficient communication should be the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unix_domain_socket&quot;&gt;Unix domain socket&lt;&#x2F;a&gt;. And we also need to define a simple protocol for our use case. Since we only need to transfer the data of a batch jobs, let&#x27;s keep everything as simple as we can.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;| length  |       data        |
&lt;&#x2F;span&gt;&lt;span&gt;| 4 bytes |   {length} bytes  |
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Data used in this protocol is a hash table &lt;code&gt;&amp;lt;string:bytes&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;workers send the first request with empty data to the batching service&lt;&#x2F;li&gt;
&lt;li&gt;batching service collects a batch of jobs and sends to the workers&lt;&#x2F;li&gt;
&lt;li&gt;worker processes these jobs
&lt;ul&gt;
&lt;li&gt;preprocess (for a single job)&lt;&#x2F;li&gt;
&lt;li&gt;inference (for a batch of jobs)&lt;&#x2F;li&gt;
&lt;li&gt;postprocess (for a single job)&lt;&#x2F;li&gt;
&lt;li&gt;send to the results to the batching service&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;batching service notifies the handler that this job is done, then the handler sends the result to the original client and goes to #2&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;error-handling&quot;&gt;Error handling&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;timeout&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If a job is not processed by one of the workers for a long time, the batching service will delete this job from the hash table and return 408.&lt;&#x2F;p&gt;
&lt;p&gt;When the batching service tries to collect these jobs from the queue channel, it will check the &lt;code&gt;expire&lt;&#x2F;code&gt; attribute first.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;validation error&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To make sure the requested data is valid, we use &lt;a href=&quot;pydantic-docs.helpmanual.io&#x2F;&quot;&gt;pydantic&lt;&#x2F;a&gt; to do the validation. So the user needs to define the data schema with &lt;code&gt;pydantic&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If one job data is invalid, this one will be marked and the result for this job is the validation error message generated by &lt;code&gt;pydantic&lt;&#x2F;code&gt;. And this won&#x27;t affect other jobs in the same batch. That part is handled by the &lt;code&gt;ventu&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;pass the errors from the workers to the batching service&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The data received by workers will be validated first. If some of the jobs are invalided, the job ids will be put into a error ids array. Only the valid jobs will be processed through the &lt;code&gt;preprocess -&amp;gt; inference -&amp;gt; postprocess&lt;&#x2F;code&gt; progress. After that, the results will be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;&amp;#39;valid&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;ID&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;inference&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;&amp;#39;error&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;ID&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;&amp;#39;`error_id`&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;the&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;IDs&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the batching server receives these data, it will mark the error jobs&#x27; status code as 422. After that, all the jobs in this batch will be attached with the corresponding results and marked as done. So the handler know this job has validation errors and can return the error message to the client.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;simple-http-service-without-dynamic-batching&quot;&gt;Simple HTTP service without dynamic batching&lt;&#x2F;h3&gt;
&lt;p&gt;For this part, we use &lt;a href=&quot;falcon.readthedocs.io&#x2F;&quot;&gt;falcon&lt;&#x2F;a&gt; which is a very powerful Python framework for web APIs. To generate the OpenAPI document and validate the request data, we use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0b01001001&#x2F;spectree&quot;&gt;spectree&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you would like to use &lt;code&gt;gunicorn&lt;&#x2F;code&gt;, &lt;code&gt;ventu&lt;&#x2F;code&gt; also expose the &lt;code&gt;app&lt;&#x2F;code&gt; element.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Deep Learning Serving Benchmark</title>
		<published>2020-04-22T00:00:00+00:00</published>
		<updated>2020-04-22T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/serving-benchmark/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/serving-benchmark/</id>
		<content type="html">&lt;p&gt;There is no black magic, everything follows the rules.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;what-does-the-deep-learning-serving-frameworks-do&quot;&gt;What does the deep learning serving frameworks do?&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;respond to request (RESTful HTTP or RPC)&lt;&#x2F;li&gt;
&lt;li&gt;model inference (with runtime)&lt;&#x2F;li&gt;
&lt;li&gt;preprocessing &amp;amp; postprocessing (optional)&lt;&#x2F;li&gt;
&lt;li&gt;queries dynamic batching (increase throughput)&lt;&#x2F;li&gt;
&lt;li&gt;monitoring metrics&lt;&#x2F;li&gt;
&lt;li&gt;service health check&lt;&#x2F;li&gt;
&lt;li&gt;versioning&lt;&#x2F;li&gt;
&lt;li&gt;multiple instances&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Actually, when we are trying to deploy the models with kubernetes, we only need part of these features. But we do care about the performance of these frameworks. So let&#x27;s do a benchmark.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benchmark&quot;&gt;Benchmark&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Environments&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CPU: Intel(R) Xeon(R) Gold 6130 CPU @ 2.10GHz&lt;&#x2F;li&gt;
&lt;li&gt;GPU: NVIDIA V100&lt;&#x2F;li&gt;
&lt;li&gt;Memory: 251GiB&lt;&#x2F;li&gt;
&lt;li&gt;OS: Ubuntu 16.04.6 LTS (Xenial Xerus)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Docker Images&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;tensorflow&#x2F;tensorflow:latest-gpu&lt;&#x2F;li&gt;
&lt;li&gt;tensorflow&#x2F;serving:latest-gpu&lt;&#x2F;li&gt;
&lt;li&gt;nvcr.io&#x2F;nvidia&#x2F;tensorrtserver:19.10-py3&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The cost of time is recorded after &lt;strong&gt;warmup&lt;&#x2F;strong&gt;. Dynamic batching &lt;strong&gt;disabled&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All the code can be found in this &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;kemingy&#x2F;a382528b29f6e34c47b464cf16806731&quot;&gt;gist&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;Framework&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Model&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Model Type&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Images&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Batch size&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Time(s)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Tensorflow&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;ResNet50&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;TF Savedmodel&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32000&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;83.189&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Tensorflow&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;ResNet50&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;TF Savedmodel&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32000&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;10&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;86.897&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Tensorflow Serving&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;ResNet50&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;TF Savedmodel&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32000&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;120.496&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Tensorflow Serving&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;ResNet50&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;TF Savedmodel&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32000&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;10&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;116.887&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Triton (TensorRT Inference Server)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;ResNet50&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;TF Savedmodel&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32000&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;201.855&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Triton (TensorRT Inference Server)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;ResNet50&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;TF Savedmodel&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32000&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;10&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;171.056&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Falcon + msgpack + Tensorflow&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;ResNet50&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;TF Savedmodel&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32000&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;115.686&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Falcon + msgpack + Tensorflow&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;ResNet50&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;TF Savedmodel&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;32000&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;10&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;115.572&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;According to the benchmark, Triton is not ready for production, TF Serving is a good option for TensorFlow models, and self-host service is also quite good (you may need to implement dynamic batching for production).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comparing&quot;&gt;Comparing&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;tensorflow-serving&quot;&gt;Tensorflow Serving&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;tfx&#x2F;serving&quot;&gt;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;tfx&#x2F;serving&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;coupled with Tensorflow ecosystem (also support other format, not out-of-box)&lt;&#x2F;li&gt;
&lt;li&gt;A&#x2F;B testing&lt;&#x2F;li&gt;
&lt;li&gt;provide both gRPC and HTTP RESTful API&lt;&#x2F;li&gt;
&lt;li&gt;prometheus integration&lt;&#x2F;li&gt;
&lt;li&gt;batching&lt;&#x2F;li&gt;
&lt;li&gt;multiple models&lt;&#x2F;li&gt;
&lt;li&gt;preprocessing &amp;amp; postprocessing can be implemented with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;tensorflow&#x2F;issues&#x2F;31055&quot;&gt;signatures&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;triton-inference-server&quot;&gt;Triton Inference Server&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NVIDIA&#x2F;triton-inference-server&#x2F;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;NVIDIA&#x2F;triton-inference-server&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;support multiply backends: ONNX, PyTorch, TensorFlow, Caffe2, TensorRT&lt;&#x2F;li&gt;
&lt;li&gt;both gRPC and HTTP with SDK&lt;&#x2F;li&gt;
&lt;li&gt;internal health check and prometheus metrics&lt;&#x2F;li&gt;
&lt;li&gt;batching&lt;&#x2F;li&gt;
&lt;li&gt;concurrent model execution&lt;&#x2F;li&gt;
&lt;li&gt;preprocessing &amp;amp; postprocessing can be done with ensemble models&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;shm-size&lt;&#x2F;code&gt;, &lt;code&gt;memlock&lt;&#x2F;code&gt;, &lt;code&gt;stack&lt;&#x2F;code&gt; configurations are not available for Kubernetes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;multi-model-server&quot;&gt;Multi Model Server&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;multi-model-server&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;multi-model-server&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;require Java 8&lt;&#x2F;li&gt;
&lt;li&gt;provide HTTP&lt;&#x2F;li&gt;
&lt;li&gt;Java layer communicates with Python workers through Unix Domain Socket or TCP&lt;&#x2F;li&gt;
&lt;li&gt;batching (not mature)&lt;&#x2F;li&gt;
&lt;li&gt;multiple models&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;log4j&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;management API&lt;&#x2F;li&gt;
&lt;li&gt;need to write model loading and inference code (means can use any runtime you want)&lt;&#x2F;li&gt;
&lt;li&gt;easy to add preprocessing and postprocessing to the service&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;graphpipe&quot;&gt;GraphPipe&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;oracle.github.io&#x2F;graphpipe&quot;&gt;https:&#x2F;&#x2F;oracle.github.io&#x2F;graphpipe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;use flatbuffer which is more efficient&lt;&#x2F;li&gt;
&lt;li&gt;2 years ago...&lt;&#x2F;li&gt;
&lt;li&gt;Oracle laid off the whole team&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;torchserve&quot;&gt;TorchServe&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pytorch&#x2F;serve&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;pytorch&#x2F;serve&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;fork from Multi Model Server&lt;&#x2F;li&gt;
&lt;li&gt;developing...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rate Limiter Implementation</title>
		<published>2020-02-20T00:00:00+00:00</published>
		<updated>2020-02-20T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/rate-limiter/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/rate-limiter/</id>
		<content type="html">&lt;p&gt;Rate limiter is used to constrain the request for a certain period, which can reduce the pressure of servers, prevent malicious attacks, offer more stable services.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;basic-knowledge&quot;&gt;Basic Knowledge&lt;&#x2F;h3&gt;
&lt;p&gt;Usually, the target of the rate limiter is the authorized users, or the API endpoint, or both.&lt;&#x2F;p&gt;
&lt;p&gt;To implement a rate limiter, we have several algorithms:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Leaky Bucket&lt;&#x2F;li&gt;
&lt;li&gt;Fixed Window&lt;&#x2F;li&gt;
&lt;li&gt;Sliding Log&lt;&#x2F;li&gt;
&lt;li&gt;Sliding Window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The algorithm details can be found in several blogs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;konghq.com&#x2F;blog&#x2F;how-to-design-a-scalable-rate-limiting-algorithm&#x2F;&quot;&gt;Kong: how to design a scalable rate limiting algorithm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.figma.com&#x2F;blog&#x2F;an-alternative-approach-to-rate-limiting&#x2F;&quot;&gt;Figma: an alternative approach to rate limiting&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;engineering.classdojo.com&#x2F;blog&#x2F;2015&#x2F;02&#x2F;06&#x2F;rolling-rate-limiter&#x2F;&quot;&gt;ClassDojo: rolling rate limiter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you are trying to find an out of box Go package, I would recommend &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RussellLuo&#x2F;slidingwindow&quot;&gt;slidingwindow&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Next, I&#x27;ll share some experience in the implementation of a rate limiter in large projects.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;choice&quot;&gt;Choice&lt;&#x2F;h3&gt;
&lt;p&gt;Among these algorithms, I prefer to use &lt;strong&gt;sliding window&lt;&#x2F;strong&gt;. This is due to my use case. I want to reduce the network calls between rate limiters and centralized data store (Redis). Although that may harm the counter precision. But this is the tradeoff you must do.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h3&gt;
&lt;p&gt;To cache the count for the current window and previous window, there should be a local count and a global count in the window. When trying to sync the local records to Redis, there may be new requests comes in. So it&#x27;s better to not just lock the window during the whole sync procedure. Then we need another cache count that will be used during sync and store the count if sync failed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Window &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;local &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;uint32
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;uint32
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;cache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;uint32
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, to get this window count, just need to add these 3 counter together.&lt;&#x2F;p&gt;
&lt;p&gt;When trying to sync, there will be a pre-sync and sync process. Pre sync will try to move local count to cache, while sync will update global count by Redis returned value and reset cache.&lt;&#x2F;p&gt;
&lt;p&gt;In this implementation, every time you try to do the &lt;code&gt;increment&lt;&#x2F;code&gt; to a limiter, it will check if the current window is expired and update the count, then check if the last sync is expired and send this limiter to sync queue. There will be another goroutine watching the sync queue and do the sync in a new goroutine.&lt;&#x2F;p&gt;
&lt;p&gt;The window is created with the limiter and can be reused as it only contains the counters. The time key is yet in the limiter structure.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Limiter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;mu sync&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;RWMutex
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;windowKey time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Time
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;currWindow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Window
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;prevWindow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Window
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;windowPeriod time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Duration
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;syncInterval time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Duration
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;expiryTime time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;Time
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;attentions&quot;&gt;Attentions&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;if the limiter doesn&#x27;t exist, then after you lock and try to create the limiter, you need to re-check if another goroutine already create one before this thread get the lock&lt;&#x2F;li&gt;
&lt;li&gt;solve the race since there may be multiple threads try to sync the same limiter (this is introduced by separate the sync procedure into pre-sync and sync)&lt;&#x2F;li&gt;
&lt;li&gt;every time you need update the current window and previous window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python Descriptor Short Note</title>
		<published>2020-01-16T00:00:00+00:00</published>
		<updated>2020-01-16T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/python-descriptor/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/python-descriptor/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Define&lt;&#x2F;strong&gt;: a descriptor is an object attribute with &amp;quot;binding behavior&amp;quot;, one whose attribute access has been overridden by methods in the descriptor protocal.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;code&gt;a.x&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;a.__dict__[&#x27;x&#x27;]&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;type(a).__dict__[&#x27;x&#x27;]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;descriptor-protocol&quot;&gt;Descriptor Protocol&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;descr.__get__(self, obj, type=None) -&amp;gt; value&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;descr.__set__(self, obj, value) -&amp;gt; None&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;descr.__delete__(self, obj) -&amp;gt; None&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If only implements &lt;code&gt;__get__&lt;&#x2F;code&gt; then it&#x27;s said to be a &lt;strong&gt;non-data descriptor&lt;&#x2F;strong&gt;. If implements &lt;code&gt;__set__&lt;&#x2F;code&gt; and &lt;code&gt;__del__&lt;&#x2F;code&gt; then it&#x27;s said to be a &lt;strong&gt;data descriptor&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lookup-chain&quot;&gt;Lookup Chain&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;__get__&lt;&#x2F;code&gt; of the data descriptor&lt;&#x2F;li&gt;
&lt;li&gt;object&#x27;s &lt;code&gt;__dict__&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;__get__&lt;&#x2F;code&gt; of the non-data descriptor&lt;&#x2F;li&gt;
&lt;li&gt;object type&#x27;s &lt;code&gt;__dict__&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;object parent type&#x27;s &lt;code&gt;__dict__&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;repeat for all the parent type&#x27;s &lt;code&gt;__dict__&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;AttributionError&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;use-case&quot;&gt;Use case&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;lazy properties&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t repeat yourself(D.R.Y.) code &lt;code&gt;__set_name__&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;decorator&quot;&gt;Decorator&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;wrap-3-layers&quot;&gt;Wrap 3 layers&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;arguments for decorator &lt;code&gt;@decorator(*args, **kwargs)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;wrapped function &lt;code&gt;wrapped_func(func)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;arguments for wrapped function &lt;code&gt;@wrap(func)(somefunc(*args, **kwargs))&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;decorator_func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;kwargs&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;wrapper&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        @functools.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;wraps&lt;&#x2F;span&gt;&lt;span&gt;(func)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;somefunc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;func_args&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;func_kwargs&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;            resp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;func_args, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;func_kwargs)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;resp
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;somefunc
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;wrapper
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>SpecTree</title>
		<published>2020-01-07T00:00:00+00:00</published>
		<updated>2020-01-07T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/spectree/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/spectree/</id>
		<content type="html">&lt;p&gt;SpecTree: Yet another tool to generate OpenAPI document and validate request &amp;amp; response with Python annotations.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;之前分别跟 Flask 和 Flacon 写了插件来做这件事，本来想着可能不太会去做一个 general core 了，够用就行了。然而马上就被打脸了。&lt;&#x2F;p&gt;
&lt;p&gt;目前遇到的问题主要有：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;两者有不少共同的逻辑，每次需要调整的时候两边都需要改，还不敢保证效果一致&lt;&#x2F;li&gt;
&lt;li&gt;写 test 的话，又要写很多重复的 test case 了，文档同理&lt;&#x2F;li&gt;
&lt;li&gt;如果想支持其他 framework，例如 starlette 就需要从头写了，虽然可以参考&lt;&#x2F;li&gt;
&lt;li&gt;两个包也存在一部分不一致的地方，感觉设计的时候很多地方欠考虑&lt;&#x2F;li&gt;
&lt;li&gt;&lt;del&gt;我想造轮子了&lt;&#x2F;del&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;说干就干……然后 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0b01001001&#x2F;spectree&quot;&gt;spectree&lt;&#x2F;a&gt; 就这样诞生了。主要完成了以下改进：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;作为一个 core，可以增加对其他 framework 的支持，只需要实现几个方法即可&lt;&#x2F;li&gt;
&lt;li&gt;增加了 test，不然每次都搞不清楚改动是不是影响到其他模块了，不写测试心里没底&lt;&#x2F;li&gt;
&lt;li&gt;参考了一些 API design guideline，重新设计了 response 的格式，显式声明 status code 和对应的 data model&lt;&#x2F;li&gt;
&lt;li&gt;统一的 request data 获取方式，都从 &lt;code&gt;request.context&lt;&#x2F;code&gt; 中获取&lt;&#x2F;li&gt;
&lt;li&gt;使用各个 framework 原生的返回样式，减少代码的修改量&lt;&#x2F;li&gt;
&lt;li&gt;关于 design 方面的考虑，都写进 issue 里面打上 ‘design’ 的 label，方面之后查询&lt;&#x2F;li&gt;
&lt;li&gt;顺手增加了 headers 和 cookies 的支持&lt;&#x2F;li&gt;
&lt;li&gt;尽可能拆分开 core 部分处理的内容和针对每个 framework 需要做的不同处理，可以适配 sync 和 async&lt;&#x2F;li&gt;
&lt;li&gt;添加了 lgtm.com 检查代码中的问题，当然这个 code quality 真的就是看着开心，A&#x2F;A+ 大概是常态……&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;简单写点感想吧：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;动手之前很有必要广泛阅读相关的各种 standard，guidelines，或 best practice&lt;&#x2F;li&gt;
&lt;li&gt;中间遇到设计上的考量，写到 issue 里备查，方便自己和他人查阅&lt;&#x2F;li&gt;
&lt;li&gt;release 最终版之前，最好留点余地，说不定会发现什么 bug 或者 interface 设计问题&lt;&#x2F;li&gt;
&lt;li&gt;必要的测试真的很有必要，这样每次添加 feature 或者修改 bug 都能心里有点底，写测试的过程也有助于发现一些小问题&lt;&#x2F;li&gt;
&lt;li&gt;多跟社区的人交流一下，广泛听取群众的意见……&lt;&#x2F;li&gt;
&lt;li&gt;还是不太会推广，就简单去 framework 的 add-ons 页面加了一条&lt;&#x2F;li&gt;
&lt;li&gt;Python descriptor 确实很复杂……&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2019 回顾</title>
		<published>2019-12-30T00:00:00+00:00</published>
		<updated>2019-12-30T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/2019recap/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/2019recap/</id>
		<content type="html">&lt;p&gt;划水摸鱼又一年。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;zhuang-tai&quot;&gt;状态&lt;&#x2F;h3&gt;
&lt;p&gt;今年可能算是目前最懒的一年了，大概是因为生活过于安逸？没有那么多糟心的事情了，日子过得十分平淡。&lt;&#x2F;p&gt;
&lt;p&gt;有多懒呢？现在睡到自然醒可能就 9 点多了。想起来以前只有熬夜打比赛的情况下才可能发生这种事情。晚上下班回家也不再刷 MOOC 或者看书学习了，基本就是洗完澡瘫在床上刷视频。&lt;&#x2F;p&gt;
&lt;p&gt;身体还算健康吧，虽然还是不可避免发生了一些意外……现在已经不怎么敢碰咖啡和巧克力了。偶尔吃一点也是很谨慎。考虑到自己膝盖的伤病，以及我实在不够强壮，现在彻底放弃打篮球了。其实并不算怎么艰难的决定，无兄弟不篮球，我这样的实在很难融入一个篮球团体。现在改打乒乓球了。可惜的是，乒乓球起码也需要两个人，但是好像怎么都找不到一个对手，没人一起玩的时候就只能去健身房装模作样练两下。可能是因为饮食习惯的改变，体重降了一些，增重实在太难了。以前没怎么意识到自己吃了太多的糖，大概这也是我血压有点偏高的原因吧，现在真的是很注意了，吃个零食都会查看成分表，看看糖和盐有没有超标。差不多每天都会吃一顿沙拉，而且我自己做的是完全不加任何酱的，体验食物原生味道，感觉还行吧，没有很难下咽。&lt;&#x2F;p&gt;
&lt;p&gt;对看过的技术书籍没什么印象了。非技术类的，像《数学女孩》还是不错的🍋。可能是翻译的书看太多了，文笔水平越来越差，确实很有必要看一些优秀的中文原作了，英文的非技术类大概暂时也没心思看。&lt;&#x2F;p&gt;
&lt;p&gt;本来以为每个月一篇 blog 应该没问题，前面也很好坚持了，但是到了后面我是真的懒到不可思议，鸽了好几次……&lt;&#x2F;p&gt;
&lt;p&gt;今年的 Hacktoberfest 某种程度上算是好好参与了，起码拿到衣服了，虽然至今为止也没有给别人提过修改代码的 PR。&lt;&#x2F;p&gt;
&lt;p&gt;用 Rust 写了点后端的项目，算是熟悉了点生态吧，其实我之前并没有用 Python 做 CRUD 的经验，所以没办法怎么对比，而是纯入门的感觉。&lt;&#x2F;p&gt;
&lt;p&gt;重拾了书法，开始继续练字了，虽然还是写得很难看，不过今年多少还是有点进步了。读帖、临帖真的是一种享受啊！除了二王，现在最喜欢赵孟頫的字了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-xie-shi&quot;&gt;一些事&lt;&#x2F;h3&gt;
&lt;p&gt;如果说有什么很大的变化的话，大概就是去吃了很多中国美食。听起来好像怪怪的，人在外面飘反而各种去找国内的馆子，在国内的时候反而没去试过。其实我并不介意别的食物，平时面包、燕麦片、沙拉什么的也吃的很多了，大概隔一段时间会有想吃面条的冲动，此外就没什么了。吃了各种菜之后，感觉都是第一次很新奇，然后就没多少兴趣了，大概美食真的对我没太多吸引力吧。&lt;&#x2F;p&gt;
&lt;p&gt;今年新加坡的空气也出现了两个月的雾霾，不算特别严重，但也足够难受了。基本上雾霾的情况下，整个人脑子都是晕乎乎的，也没什么心情。那段日子真的很难过，但是看看湾区、澳大利亚的大火……可能全世界都没多少地方真的全年都有清新的空气。再看看家里，基本上常年各种污染严重，也基本看不到治理的希望。&lt;&#x2F;p&gt;
&lt;p&gt;借别人的 Switch 玩了下，塞尔达确实很让人沉迷，尤其是我这种意志力薄弱的……不免又想去试试 PS&#x2F;Xbox 的游戏了。但我这种极简流浪式生活的人，似乎是没希望自己购买了。甚至犹豫了好久，最后也没有去买一台轻薄的游戏本，正式当上了云玩家，想看剧情的就看看剪辑，手痒就自己搓玻璃板打打手游。&lt;&#x2F;p&gt;
&lt;p&gt;又开始留长发了，这次不会随便剪掉了。其实我的头发很软，长了之后还有点卷，也很飘，不是很适合长发。虽然我很久之前就是想体验下用发簪的感受，渐渐的，自己也习惯了，就想继续留下去了。大概再过半年就可以实现了。不过我估计也不会剪掉，最多定期修一下，毕竟手艺不能丢。&lt;&#x2F;p&gt;
&lt;p&gt;总算下定决心去看牙了。其实也就是补了下，运气还行吧，没有很严重的。至于智齿，那大概就是在面瘫和牙疼之间抉择。&lt;&#x2F;p&gt;
&lt;p&gt;从 Chrome 换到了 Firefox，拥抱开源。书签、密码什么能直接迁移过去，插件大部分也有对应的，主要还是一些行为不太一样，要适应一下。我试了下从 Google 换到 DuckDuckGo，不过好像不行，搜索结果有点差，还是换回去了。邮箱也没有想到有什么比较好用的，Google Suite 也还在用。说到底这次去 Google 化最后也只换了个浏览器而已。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wei-lai&quot;&gt;未来&lt;&#x2F;h3&gt;
&lt;p&gt;差不多也休息够了，是时候拿出上学时候那种劲头了，不然就真的是要一路菜下去了。尽可能减少一些乱七八糟的事情，想放松也该选一些经典的动漫或者电影，而不是一些搞笑视频了。当然也不能太宅了，还是要多出去走走散散心。&lt;&#x2F;p&gt;
&lt;p&gt;开源的事情我还是会继续，现在看别人源代码也轻松了不少了，PR 和 issues 都要跟上了。&lt;&#x2F;p&gt;
&lt;p&gt;身体健康当然还是很重要的，这个年纪已经不敢随便熬夜了，还是要保证基本的休息时间。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Kubernetes in action note</title>
		<published>2019-11-27T00:00:00+00:00</published>
		<updated>2019-11-27T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/k8s-in-action/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/k8s-in-action/</id>
		<content type="html">&lt;p&gt;k8s is really complex...&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;how-linux-make-container-possible&quot;&gt;How Linux make container possible&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Linux namespace&lt;&#x2F;li&gt;
&lt;li&gt;Linux control groups (cgroups) [=systemd]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Container images are composed of layers, which can be shared and reused across multiple images.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Docker command and arguments&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ENTRYPOINT: [&amp;quot;python&amp;quot;, &amp;quot;app.py&amp;quot;]&lt;&#x2F;li&gt;
&lt;li&gt;CMD: [&amp;quot;-w&amp;quot;, &amp;quot;4&amp;quot;]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;entrypoint is the default part, cmd can be override.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;components&quot;&gt;Components&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;master&quot;&gt;Master&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;API server&lt;&#x2F;li&gt;
&lt;li&gt;Scheduler&lt;&#x2F;li&gt;
&lt;li&gt;Controller manager&lt;&#x2F;li&gt;
&lt;li&gt;etcd&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;worker&quot;&gt;Worker&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Container runtime&lt;&#x2F;li&gt;
&lt;li&gt;Kubelet&lt;&#x2F;li&gt;
&lt;li&gt;kube-proxy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;type&quot;&gt;Type&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;ClusterIP: internal network&lt;&#x2F;li&gt;
&lt;li&gt;LoadBalancer: external access&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;services&quot;&gt;Services&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;solve pods&#x27; IP problem&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;when-to-use-multiple-containers-in-a-pod&quot;&gt;When to use multiple containers in a Pod?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Do they need to be run together or can they run on different hosts?&lt;&#x2F;li&gt;
&lt;li&gt;Do they represent a single whole or are they independent components?&lt;&#x2F;li&gt;
&lt;li&gt;Must they be scaled together or individually?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Namespace&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Does &lt;strong&gt;not&lt;&#x2F;strong&gt; offer isolation for nodes or network(depends on the networking solution deployed with k8s).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Liveness Probes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;spec.containers[0].livenessProbe&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP GET probe&lt;&#x2F;li&gt;
&lt;li&gt;TCP Socket probe&lt;&#x2F;li&gt;
&lt;li&gt;Exec probe&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If liveness probe failed, the pod will be terminated.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Readiness Probes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Exec&lt;&#x2F;li&gt;
&lt;li&gt;HTTP GET&lt;&#x2F;li&gt;
&lt;li&gt;TCP Socekt&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If Readiness probe failed, the pod will be removed from endpoints.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ReplicationController&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;keep pods running&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;label selector&lt;&#x2F;li&gt;
&lt;li&gt;replica count&lt;&#x2F;li&gt;
&lt;li&gt;pod template&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;pods can be removed from the controller by changing the label&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ReplicaSet&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;similar to ReplicationController but more powerful in labels matching&lt;&#x2F;p&gt;
&lt;p&gt;Always use ReplicaSet instead of ReplicationController.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;DaemonSet&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To run a pod on all cluster nodes. (even the unschedulable node)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Job&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Terminate the pod when job is done successfully.&lt;&#x2F;p&gt;
&lt;p&gt;spec.template.spec.restartPolicy:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Always (default, need to change)&lt;&#x2F;li&gt;
&lt;li&gt;OnFailure&lt;&#x2F;li&gt;
&lt;li&gt;Never&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;sequentially: spec.completions: n (run n jobs)&lt;&#x2F;p&gt;
&lt;p&gt;parallel: spec.parallelism: n (run n jobs parallel)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;CronJob&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;cron job for k8s.&lt;&#x2F;p&gt;
&lt;p&gt;spec.schedule: &amp;quot;minute, hour, day of month, month, day of week&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Service&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Create a single, constant point of entry to a group of pods. ( TCP&#x2F;UDP level)&lt;&#x2F;p&gt;
&lt;p&gt;redirect by IP: spec.sessionAffinity: ClientIP (default: None) (keep-alive connection will always hit the same pod even it set to None)&lt;&#x2F;p&gt;
&lt;p&gt;Pods start after Service can get the IP:PORT from environment variables.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;SERVICE_NAME&amp;gt;_SERVICE_HOST&lt;&#x2F;li&gt;
&lt;li&gt;&amp;lt;SERVICE_NAME&amp;gt;_SERVICE_PORT&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Dashes in the service name will be converted to underscores and all letters are uppercased.&lt;&#x2F;p&gt;
&lt;p&gt;FQDN (fully qualified domain name):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;span style=&amp;quot;text-decoration: underline;&amp;quot;&amp;gt;&amp;lt;service_name&amp;gt;.&amp;lt;namespace&amp;gt;.svc.cluster.local&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;quot;svc.cluster.local&amp;quot; can be omitted. If they are in the same namespace, it can also be omitted.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;spec.type
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;ExternalName: pods connect to this service will directly connect to an external endpoint&lt;&#x2F;li&gt;
&lt;li&gt;NodePort: each node opens a port and redirects traffic to the underlying service&lt;&#x2F;li&gt;
&lt;li&gt;LoadBalancer: provided by cloud infrastructure k8s is running on&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;spec.externalTrafficPolicy&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Local: the traffic will only be redirected to the Pod on the Node it hits (if no local pod can be found, it will hang) (also load balance will be node locally)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;EndPoints&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This can expose service to external endpoints.&lt;&#x2F;p&gt;
&lt;p&gt;metadata.name must match service name&lt;&#x2F;p&gt;
&lt;p&gt;IPs are list in subsets.addresses.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ingress&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;HTTP level (cookie-based or header-based session affinity). (L4 is also planned)&lt;&#x2F;p&gt;
&lt;p&gt;Ingress needs a ingress controller to do the load balance, like Nginx.&lt;&#x2F;p&gt;
&lt;p&gt;The Ingress controller doesn&#x27;t forward the request to the service. It only use it to select a pod.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Headless Service&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;set &amp;quot;spec.clusterIP: None&amp;quot; to get a headless service.&lt;&#x2F;p&gt;
&lt;p&gt;With headless services, DNS will return the pods&#x27; IPs directly. It still provides load balancing across pods, but through the DNS round-robin mechanism instead of through the service proxy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Volumes&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;types:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;emptyDir: lifetime is tied to the pod (disk or memory)&lt;&#x2F;li&gt;
&lt;li&gt;hostPath: mount directories from the worker node&#x27;s filesystem (DaemonSet)&lt;&#x2F;li&gt;
&lt;li&gt;gitRepo: init by checking out the contents of a Git repo&lt;&#x2F;li&gt;
&lt;li&gt;nfs: NFS share mounted into the pod&lt;&#x2F;li&gt;
&lt;li&gt;gcePersistentDisk(GCE), awsElasticBlockStore(AWS), azureDisk(Azure)&lt;&#x2F;li&gt;
&lt;li&gt;cinder, cephfs, iscsi, flocker, glusterfs, quobyte, rbd, flexVolume, vsphereVolume, photonPersistentDisk, scaleIO: other types of network storage&lt;&#x2F;li&gt;
&lt;li&gt;configMap, secret, downwardAPI: used to expose certain K8s resources and cluster information (metadata not data)&lt;&#x2F;li&gt;
&lt;li&gt;persistentVolumeClaim: pre- or dynamically provisioned persistent storage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;PersistentVolume&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ask the admin to setup this volume storage.&lt;&#x2F;p&gt;
&lt;p&gt;Still need Volume as a backup.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;capacity&lt;&#x2F;li&gt;
&lt;li&gt;accessModes&lt;&#x2F;li&gt;
&lt;li&gt;persistemtVolumeRecalimPolicy (Retain or Delete)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;PV don&#x27;t belong to any namespace.&lt;&#x2F;p&gt;
&lt;p&gt;Mode:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;RWO: ReadWriteOnce&lt;&#x2F;li&gt;
&lt;li&gt;ROX: ReadOnlyMany&lt;&#x2F;li&gt;
&lt;li&gt;RWX: ReadWriteMany&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;PersistentVolumeClaim&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;resources&lt;&#x2F;li&gt;
&lt;li&gt;accessModes&lt;&#x2F;li&gt;
&lt;li&gt;storageClassName&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;PVC can only be created in a specific namespace.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;StorageClass&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;StorageClass resources aren&#x27;t namespaced. It&#x27;s dynamic. So it&#x27;s impossible to run out of PV(but storage space).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Enveronment Variables&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;spec.container[*].image:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;command: override ENTRYPOINT&lt;&#x2F;li&gt;
&lt;li&gt;args: override CMD&lt;&#x2F;li&gt;
&lt;li&gt;env[*]{name:value}: environment variables&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;ConfigMap&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;define: key-value pairs in metadata&lt;&#x2F;p&gt;
&lt;p&gt;usage:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;spec.containers[&lt;em&gt;].env[&lt;&#x2F;em&gt;].valueFrom.configMapKeyRef&lt;&#x2F;li&gt;
&lt;li&gt;spec.containers[*].envFrom.configMapRef&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This can also be used in volume.&lt;&#x2F;p&gt;
&lt;p&gt;Mounting a directory hides existing files in that directory. (unless you use volumeMount.subPath)&lt;&#x2F;p&gt;
&lt;p&gt;Changes in ConfigMap will be updated in pods without reload. (exclude mounted files in volume)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Secrets&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The contents of a Secret&#x27;s entries are shown as base64 encoded strings.&lt;&#x2F;p&gt;
&lt;p&gt;Maximum size is limited to 1MB.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Downward API for metadata&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;pod&#x27;s name, IP, namespace, labels, annotations,&lt;&#x2F;li&gt;
&lt;li&gt;name of node, name of service account&lt;&#x2F;li&gt;
&lt;li&gt;CPU and memory requests&#x2F;limits for each container&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These can be passed into pods with environment variables or volumes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Deployment&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A Deployment is backed by a ReplicaSet.&lt;&#x2F;p&gt;
&lt;p&gt;When rolling update, it will create a new ReplicaSet to handle the new version pods. So it will create a ReplicaSet for each new version. (revisionHistoryLimit is 2 by default)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl rollout undo deployment &amp;lt;name&amp;gt; --to-revision=1
&lt;&#x2F;span&gt;&lt;span&gt;kubectl rollout history deployment &amp;lt;name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;maxSurge: how many pod instances allow to exist above the desired replica count&lt;&#x2F;li&gt;
&lt;li&gt;maxUnavailable: how many pod instances allow to be unavailable relative to the desired replica count&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl rollout pause deployment &amp;lt;name&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl rollout resume deployment &amp;lt;name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;useful-cmd&quot;&gt;Useful CMD&lt;&#x2F;h2&gt;
&lt;p&gt;kubelet explain pod
kubelet explain pod.spec&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl exec &amp;lt;pod&amp;gt; -- &amp;lt;cmd&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl exec -it &amp;lt;pod&amp;gt; &#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl run &amp;lt;name&amp;gt; --image=&amp;lt;&amp;gt; --generator=run-pod&#x2F;v1 --command -- sleep infinity
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl get endpoints
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl port-forward &amp;lt;name&amp;gt; &amp;lt;port_client&amp;gt;:&amp;lt;port_pod&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl exec downward env
&lt;&#x2F;span&gt;&lt;span&gt;kubectl exec downward ls -1L &#x2F;etc&#x2F;downward
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl proxy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;kubectl patch deployment &amp;lt;name&amp;gt; -p &amp;#39;{&amp;quot;spec&amp;quot;: {&amp;quot;minReadySeconds&amp;quot;: 10}}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;details&quot;&gt;Details&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;GPU schedual&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;kubectl label node gpu-node gpu=true
&lt;&#x2F;span&gt;&lt;span&gt;pod.spec.nodeSelector: gpu: &amp;quot;true&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>systemd command cheatsheet</title>
		<published>2019-09-27T00:00:00+00:00</published>
		<updated>2019-09-27T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/systemd/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/systemd/</id>
		<content type="html">&lt;p&gt;useful command for &lt;code&gt;systemd&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;during-current-session&quot;&gt;During current session&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# during current session
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl start app.service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# start a systemd service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl start app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl stop app.service
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl restart app.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl reload app.service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# reload the configuration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl reload-or-restart app.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;at-boot&quot;&gt;at boot&lt;&#x2F;h3&gt;
&lt;p&gt;This will createa a symbolic link from system&#x27;s copy of the service file (usually &lt;code&gt;&#x2F;lib&#x2F;systemd&#x2F;system&lt;&#x2F;code&gt; or
&lt;code&gt;&#x2F;etc&#x2F;systemd&#x2F;system&lt;&#x2F;code&gt;) into the location on disk where &lt;code&gt;systemd&lt;&#x2F;code&gt; looks for autostart file (usually
&lt;code&gt;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;some_target.target.wants&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl enable app.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl disable app.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;check&quot;&gt;Check&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; status app.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; is-active app.serivce
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; is-enabled app.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; is-failed app.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; list-units
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; list-units&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --all
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; list-units&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --all --state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;inacitve
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; list-units&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;service
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; list-unit-files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;unit-management&quot;&gt;Unit management&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; cat app.serivce
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; list-dependencies app.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; show app.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mask-units&quot;&gt;Mask units&lt;&#x2F;h3&gt;
&lt;p&gt;mark a unit as completely unstartable&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl mask app.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl unmask app.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;edit-file&quot;&gt;Edit file&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl edit app.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl edit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; app.service
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl rm &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;app.service.d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;target&quot;&gt;Target&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; get-default
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl set-default algorithm.target
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; list-unit-files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;format
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; list-units&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;target
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; list-denpendecies multi-user.target
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl isolate multi-user.target
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shortcuts&quot;&gt;Shortcuts&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl rescue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl halt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl poweroff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; systemctl reboot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>写了两个 Python service API doc&amp;verify 工具</title>
		<published>2019-09-25T00:00:00+00:00</published>
		<updated>2019-09-25T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/apispec/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/apispec/</id>
		<content type="html">&lt;p&gt;最近在看一些 API 规范化的资料，鉴于没有很合适的，就自己写了两个 Python 的包，顺便记录下感想。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;先放上两个包的地址：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Flaskerk for Flask：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kemingy&#x2F;flaskerk&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;kemingy&#x2F;flaskerk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Falibrary for Falcon：&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kemingy&#x2F;falibrary&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;kemingy&#x2F;falibrary&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why&quot;&gt;Why&lt;&#x2F;h2&gt;
&lt;p&gt;说到规范，那基本就是 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;OAI&#x2F;OpenAPI-Specification&quot;&gt;OpenAPI&lt;&#x2F;a&gt; 了。目前最常用的工具就是 &lt;a href=&quot;https:&#x2F;&#x2F;swagger.io&#x2F;&quot;&gt;Swagger&lt;&#x2F;a&gt;。第一次接触这个是看到果壳的一个有几百 star 的开源项目，扩展了官方的包，主要用来根据配置生成几个 Python Web Framework 的代码结构。当时重构 Dashboard 的时候还考虑过，看了下相关文档就放弃了，因为这个配置文件写起来真的很麻烦。这次重拾，也没打算真的让别人通过这种方式来规范化 API，感觉学习成本有点大，而且配置文件出错也不太好找原因（大概有相关工具）。&lt;&#x2F;p&gt;
&lt;p&gt;看了一下目前有的几个 Python 的包，&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flasgger&#x2F;flasgger&quot;&gt;Flasgger&lt;&#x2F;a&gt; 算是比较有代表性的一个，Date Science 各种教程里的后端基本也都是 Flask，直接选这个工具其实也是可以的。然后也看了下 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tiangolo&#x2F;fastapi&quot;&gt;FastAPI&lt;&#x2F;a&gt;，这个项目真的挺有意思的，换了一种思路来做，通过 Python3 的注解取代配置文件里的类型，这里多亏了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;samuelcolvin&#x2F;pydantic&quot;&gt;pydantic&lt;&#x2F;a&gt; 的封装，可以轻松定义数据类型，获取对应的 spec，还能做类型校验，非常好用。&lt;&#x2F;p&gt;
&lt;p&gt;这些库的 validation 大概有两种，一种是利用 marshmallow，另一种是 JSON，写起来其实都不如 pydantic 方便。&lt;&#x2F;p&gt;
&lt;p&gt;调查到这里，基本上就有点眉目了，首先否定了各种需要配置文件的库，这个太麻烦了，pydantic 已经做得很好了，实在没必要去写那些繁琐的配置。鉴于大多数人还是更熟悉 Flask，而且对异步没有要求，常用工具能满足需求就没必要换，所以 FastAPI 虽然不错但暂时不考虑。这时候就剩下两条路了，要么给 Flasgger 提 PR 增加新 feature，要么自己造轮子。&lt;&#x2F;p&gt;
&lt;p&gt;其实我本来倾向于 PR 的，这个东西已经小有名气了，代码质量也可以，接口也算是久经检验，更容易进行推广。不过后来发现了问题，pydantic 是 Python 3.6+ 的，而 Flasgger 还支持 Python2，这就剩下几个月的寿命了，没必要再折腾这个问题。而且为了兼容，Flasgger 的代码里面有很多略显冗余的代码，我要改的话可能也要考虑很多东西进去，这样就太麻烦了，估计 PR 也很难被 merge。思来想去，还是自己另外造个轮子吧，只需要满足自己的需求就可以了，不需要做那么多兼容的工作。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implement&quot;&gt;Implement&lt;&#x2F;h2&gt;
&lt;p&gt;接下来就要开始动手了，这个工具的要求就是简单易用，能生成 API 文档，能做参数校验就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;接口的设计，像 Flask 的 route 这样，用一个 decorator 就很方便，写起来很舒服，也被很多后端框架采用。剩下的部分参考 extensions／addons 规范来就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;我 decorator 用的不多，只好临时再多学一下了，Real Python 有一篇不错的文章 &lt;a href=&quot;https:&#x2F;&#x2F;realpython.com&#x2F;primer-on-python-decorators&#x2F;&quot;&gt;Primer on Python Decorators&lt;&#x2F;a&gt;，详细介绍了各种情况下 decorator 的用法。不过对于我的情况，还需要自己好好琢磨，比如我用了这个 decorator 之后，哪部分代码是初始化的时候被执行的，哪部分只会在调用该 function 的时候才会执行，修改哪个对应的 function 才是我从 route maps 里面拿到的那个 function。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面就是对 Python 里面一切皆是 class 的理解，动态语言这方面还是有很高的可玩性，我可以在初始化的时候直接把对应的属性动态写入到 route function 上面去，然后生成文档的时候去 route maps 里面找就行了，这种做法比另外弄个 hashtable 之类的来折腾要舒服很多。&lt;&#x2F;p&gt;
&lt;p&gt;真正开始动手写的时候，才发现有很多东西文档里找不到，毕竟是做开发而不是使用，很多东西都需要去翻看源代码，详细了解整个设计和实现，找到合适的切入点。鉴于 Flask 和 Falcon 的设计都不错，所以很多事情做起来也还轻松。然后就是 interface 的设计和调整了，针对我自己的使用经验，只做了 query，JSON data，response，status code，其他我平时没怎么接触过的也就先不做实现了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;difference&quot;&gt;Difference&lt;&#x2F;h2&gt;
&lt;p&gt;这两个框架还是有些区别的。&lt;&#x2F;p&gt;
&lt;p&gt;首先，Flask 的 route 部分是放在 Werkzeug 里面的，最后 register 到 Flask app 里面，拿到的是一个简单的 hash table，key 是路径，value 是对应的 function。而 Falcon 是自己实现了这部分，可以看到有个状态机一样的东西。当然本质上都是一回事，而且拿过来之后都要根据对应的规则做一部分 parse，把路径里面的变量和参数提取出来。&lt;&#x2F;p&gt;
&lt;p&gt;然后是对 Exception 的处理，包括一些 HTTP status code，Flask 这部分也都是在 Werkzeug 里面，为了使用方便，我给它加了个自定义 status code 的功能。Falcon 里面分成了两部分，一个是 response 的 status code，一个是 HTTPStatus 的具体内容，我只需要知道可能的 code 用来生成文档就行了，所以这里简单把 status code 用正则处理了一下就完事儿。&lt;&#x2F;p&gt;
&lt;p&gt;最明显的使用差距，一个默认注册 route function，一个默认注册 route class，这一点反倒没有太多影响。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-not-flask&quot;&gt;Why not Flask&lt;&#x2F;h2&gt;
&lt;p&gt;其实我本来只实现了 Flaskerk，毕竟 Flask 是多数人的选择。但是后来在我去写 Service Template 的过程中，我发现很多东西要做得非常规范的话，就要用上 blueprint 之类的，否则新手写来写去很容易会遇到 circling import 的问题，虽然官方也给出了一个可行的做法，但是明显有点脏了，这里面涉及到 Python import 的细节，对新手极不友好。可以说，新手很容易就能用 Flask，但跟老手用起来完全不是一个概念，遇到点问题可能就很痛苦了。&lt;&#x2F;p&gt;
&lt;p&gt;其次就是 Flask 本身虽然是 microservice，但也包括了 template 部分，而 Data Science 需要的其实是一个纯粹的 API service 就可以了，Flask 默认返回的是 HTML 页面，不是 JSON 数据之类的，所以我封装 &lt;code&gt;abort&lt;&#x2F;code&gt; 的时候就顺手改了一下。Falcon 其实更适合，没有第三方依赖（当然还是需要 WSGI），很适合且本身就是为 API service 设计的。&lt;&#x2F;p&gt;
&lt;p&gt;最后 performance 的问题，当然是 Falcon 好了，不过这一点其实没那么重要，毕竟实际中 IO 不是瓶颈，CPU&#x2F;GPU 部分的计算才是瓶颈。这也是为什么用不到新的异步特性。&lt;&#x2F;p&gt;
&lt;p&gt;在后面实现 Falibrary 的过程中，相当于重新思考了一遍，找出来原来实现上的一些小毛病，大概跟修改自己的作文一个效果吧，也不能算没有收获。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rethink&quot;&gt;Rethink&lt;&#x2F;h2&gt;
&lt;p&gt;我看到有人给 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;marshmallow-code&#x2F;apispec&quot;&gt;APIspec&lt;&#x2F;a&gt; 加了 Falcon 的实现，想着大概也可以抽象出来一部分，不同的框架作为类似 middleware 的东西插进去，不过看起来好像也没有太多重复的部分，所以暂时不折腾了。&lt;&#x2F;p&gt;
&lt;p&gt;现在并没有正式对外推广的打算，虽然本身就是开源的项目。先给同事用着看看情况吧，而且我本来就是为了满足 Data Science 需求的，都没有去考虑 Cookie 之类的，以后再说吧。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>NGINX Cookbook note</title>
		<published>2019-07-27T00:00:00+00:00</published>
		<updated>2019-07-27T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/nginx/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/nginx/</id>
		<content type="html">&lt;p&gt;NGINX Plus looks great :)&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;config-file&quot;&gt;Config file&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;location: &lt;code&gt;&#x2F;etc&#x2F;nginx&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;main: &lt;code&gt;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;include: &lt;code&gt;&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;basic config:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen 80 default_server;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# port, default_server means all the traffic and ignore server_name
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server_name www.example.com;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# only match the request for this server_name
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# all traffic
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# file location
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;index index.html index.htm;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# default file
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;test config: &lt;code&gt;nginx -t&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;graceful reload: &lt;code&gt;nginx -s reload&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;high-performance&quot;&gt;High performance&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;load-balance&quot;&gt;Load balance&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;upstream backend {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;least_conn;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# load balancing method
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server 10.0.0.1:80 weight=1 max_fails=3 fail_timeout=3s;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server app.example.com:80 weight=2;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen 80;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_pass backend;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;health_check interval=10 passes=2 fails=3;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Load balancing methods:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Round Robin&lt;&#x2F;li&gt;
&lt;li&gt;Least connection&lt;&#x2F;li&gt;
&lt;li&gt;Least time (plus)&lt;&#x2F;li&gt;
&lt;li&gt;Generic hash&lt;&#x2F;li&gt;
&lt;li&gt;IP hash&lt;&#x2F;li&gt;
&lt;li&gt;Random&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;traffic-management&quot;&gt;Traffic management&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;a-b-testing&quot;&gt;A&#x2F;B testing&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;split_clients &amp;quot;${remote_addr}AAA&amp;quot; $variant {
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;20.0%              &amp;quot;backendv2&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;               *                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;backendv1&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_pass http:&#x2F;&#x2F;api.com&#x2F;$variant
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;limiting-connections&quot;&gt;Limiting connections&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;http {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;limit_conn_zone $binary_remote_addr zone=limitbyaddr:10m;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;limit_conn_status 429;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;limit_conn limitbyaddr 40;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# limit_zone &amp;amp; allowed number
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;limiting-rate&quot;&gt;Limiting rate&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;http {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;limit_req_zone $binary_remote_addr zone=limitbyaddr:10m rate=1r&#x2F;s;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;limit_req_status 429;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;limit_req zone=limitbyaddr burst=10 nodelay;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;limiting-bandwidth&quot;&gt;Limiting bandwidth&lt;&#x2F;h3&gt;
&lt;p&gt;This limit is per connection.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;location &#x2F;download&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    limit_rate_after 10m;
&lt;&#x2F;span&gt;&lt;span&gt;    limit_rate 1m;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;massive-scalable-content-caching&quot;&gt;Massive scalable content caching&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_cache_path &#x2F;var&#x2F;nginx&#x2F;cache
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;keys_zone=CACHE:60m
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;levels=1:2
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;inactive=3h
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;max_size=20g;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_cache_key &amp;quot;$host$request_uri $cookie_user&amp;quot;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# default is $scheme$proxy_host$request_uri
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_set_header Range $slice_range;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_http_version 1.1;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_cache_valid 200 206 1h;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_cache_bypass $http_cache_bypass;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_cache CACHE;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;slice 1m;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# for HTML5 video
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_pass http:&#x2F;&#x2F;origin:80;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location ~* \.(css|js)$ {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;expires 1y;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;add_header Cache-Control &amp;quot;public&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;http-basic-authentication&quot;&gt;HTTP basic authentication&lt;&#x2F;h3&gt;
&lt;p&gt;Provide a username-password file like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;name1:password1
&lt;&#x2F;span&gt;&lt;span&gt;name2:password2:comment
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both &lt;code&gt;openssl&lt;&#x2F;code&gt; and &lt;code&gt;htpasswd&lt;&#x2F;code&gt; can generate passwords with the &lt;code&gt;apr1&lt;&#x2F;code&gt; algorithm, which can be understand by Nginx.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;auth_basic &amp;quot;Not allowed for unauthenticated users&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;auth_basic_user_file conf.d&#x2F;passwd;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;authentication-subrequest&quot;&gt;Authentication subrequest&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F;private&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;auth_request &#x2F;auth;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;auth_request_set $auth_status $upstream_status;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location = &#x2F;auth {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;internal;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_pass http:&#x2F;&#x2F;auth-server;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_pass_request_body off;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_set_header Content-Length &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_set_header X-Original-URI $request_uri;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;security-controls&quot;&gt;Security controls&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;access-based-on-ip-address&quot;&gt;Access based on IP address&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F;admin&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;deny 10.0.0.1;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;allow 10.0.0.0&#x2F;20;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;allow 2001:0db8::&#x2F;32;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;deny all;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;allowing-cross-origin-resource-sharing&quot;&gt;Allowing cross-origin resource sharing&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;map $request_method $cors_method {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;OPTIONS 11;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;GET 1;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;POST 1;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;default 0;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;if ($cors_method ~ &amp;#39;1&amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;add_header &amp;#39;Access-Control-Allow-Methods&amp;#39; &amp;#39;GET,POST,OPTIONS&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;add_header &amp;#39;Access-Control-Allow-Origin&amp;#39; &amp;#39;*.example.com&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;add_header &amp;#39;Access-Control-Allow-Headers&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;DNT,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;                        Keep-Alive,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;                        User-Agent,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;                        X-Requested-With,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;                        If-Modified-Since,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;                        Cache-Control,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;                        Content-Type&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;if ($cors_method = &amp;#39;11&amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;add_header &amp;#39;Access-Control-Max-Age&amp;#39; 1728000;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;add_header &amp;#39;Content-Type&amp;#39; &amp;#39;text&#x2F;plain; charset=UTF-8&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;add_header &amp;#39;Content-Length&amp;#39; 0;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;return 204;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;client-side-encryption&quot;&gt;Client-side encryption&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;http { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# All directives used below are also valid in stream
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen 8433 ssl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_protocols TLSv1.2 TLSv1.3;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_ciphers HIGH:!aNULL:!MD5;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;example.pem;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;example.key;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;example.ecdsa.crt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;example.ecdsa.key;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_session_cache shared:SSL:10m;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_session_timeout 10m;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Elliptic Curve Cryptography(ECC) certifications are found to be faster than the equivalent-strength RSA certifications.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;upstream-encryption&quot;&gt;Upstream Encryption&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_pass https:&#x2F;&#x2F;upstream.example.com;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_ssl_verify on;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_ssl_verify_depth 2;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_ssl_protocols TLSv1.2;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;securing-a-location&quot;&gt;Securing a location&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F;resources {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;secure_link_secret mySecret;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;if ($secure_link = &amp;quot;&amp;quot;) { return 403; }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;rewrite ^ &#x2F;secured&#x2F;$secure_link;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F;secured&#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;internal;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;root &#x2F;var&#x2F;www;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;securing-a-location-with-an-expire-date&quot;&gt;Securing a location with an expire date&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F;resources {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;root &#x2F;var&#x2F;www;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;secure_link $arg_md5,$arg_expires;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;secure_link_md5 &amp;quot;$secure_link_expires$uri$remote_addr mySecret&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;if ($secure_link = &amp;quot;&amp;quot;) { return 403; }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;if ($secure_link = 0) { return 410; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;https-redirects&quot;&gt;HTTPS redirects&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen 80 default_server;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen [::]:80 default_server;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server_name _;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;return 301 https:&#x2F;&#x2F;$host$request_uri;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;redirecting-to-https-where-ssl-tls-is-terminated-before-nginx&quot;&gt;Redirecting to HTTPS where SSL&#x2F;TLS is terminated before Nginx&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen 80 default_server;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen [::]:80 default_server;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server_name _;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;if ($http_x_forwarded_proto = &amp;#39;http&amp;#39;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;return 301 https:&#x2F;&#x2F;$host$request_uri;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;satisfying-any-number-of-security-methods&quot;&gt;Satisfying any number of security methods&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;satisfy any;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;allow 192.168.1.0&#x2F;24;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;deny all;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;auth_basic &amp;quot;closed site&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;auth_basic_user_file conf&#x2F;htpasswd;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;http-2&quot;&gt;HTTP&#x2F;2&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;basic-configuration&quot;&gt;Basic configuration&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen 443 ssl http2 default_server;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_certificate server.crt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_certificate_key server.key;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# add gRPC
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F;service1 {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;grpc_pass grpc:&#x2F;&#x2F;backend.local:50051;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# unencrypted
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F;service2 {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;grpc_pass grpcs:&#x2F;&#x2F;backend.local:50052;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# encrypted
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;grpc&quot;&gt;gRPC&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen 80 http2;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# unencrypted
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;grpc_pass grpc:&#x2F;&#x2F;backend.local:50051;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;http-2-server-push&quot;&gt;HTTP&#x2F;2 server push&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen 443 ssl http2 default_server;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_certificate server.crt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ssl_certificate_key server.key;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location = &#x2F;demo.html {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;http2_push &#x2F;style.css;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;http2_push &#x2F;image1.jpg;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;sophisticated-media-streaming&quot;&gt;Sophisticated media streaming&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;serving-mp4-and-flv&quot;&gt;Serving MP4 and FLV&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;http {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F;videos&#x2F; {  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# files in this directory are in MP4 format type
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;mp4;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location ~ \.flv$ {  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# any files ending in .flv are in FLV format
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;flv;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;containers-microservices&quot;&gt;Containers&#x2F;Microservices&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;official-nginx-image&quot;&gt;Official NGINX image&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; my-nginx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 80:80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; &#x2F;path&#x2F;to&#x2F;content:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html:ro&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This maps &lt;code&gt;locolhost:80&lt;&#x2F;code&gt; to port 80 of the container, and mounts the local directory &lt;code&gt;&#x2F;path&#x2F;to&#x2F;content&lt;&#x2F;code&gt; as a container volume at &lt;code&gt;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&lt;&#x2F;code&gt; as read only.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;creating-an-nginx-dockerfile&quot;&gt;Creating an NGINX Dockerfile&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; centos:7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;yum -y install epel-release &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    yum -y install nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#c82829;color:#ffffff;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ADD &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;nginx-conf &#x2F;etc&#x2F;nginx
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;EXPOSE &lt;&#x2F;span&gt;&lt;span&gt;80 443
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;CMD &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;nginx&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;use-environment-variables-in-nginx&quot;&gt;Use environment variables in NGINX&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;daemon off;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;env APP_NDS;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;include &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;modules&#x2F;*.conf;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;http {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;perl_set $upstream_app &amp;#39;sub { return $ENV{&amp;quot;APP_DNS&amp;quot;}; }&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_pass https:&#x2F;&#x2F;$upstream_app;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To use &lt;code&gt;perl_set&lt;&#x2F;code&gt; you must have the &lt;code&gt;ngx_http_perl_module&lt;&#x2F;code&gt; installed. (&lt;code&gt;yum -y install nginx nginx-mod-http-perl&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;advanced-activity-monitoring&quot;&gt;Advanced activity monitoring&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;enable-nginx-open-source-stub-status&quot;&gt;Enable NGINX Open Source stub status&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F;stub_status {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;stub_status;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;allow 127.0.0.1;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;deny all;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;debuggin-and-troubleshooting-with-access-logs-error-logs-and-request-tracing&quot;&gt;Debuggin and troubleshooting with access logs, error logs, and request tracing&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;configuring-access-logs-and-error-logs&quot;&gt;Configuring access logs and error logs&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;http {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;log_format geoproxy
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;[$time_local] $remote_addr &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;$realip_remote_addr $remote_user &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;$request_method $server_protocol &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;$schema $server_name $uri $status &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;$request_time $body_bytes_sent &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;$geoip_city_country_code3 $geoip_region &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;&amp;quot;$geoip_city&amp;quot; $http_x_forwarded_for &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;$upstream_status $upstream_response_time &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;&amp;quot;$http_referer&amp;quot; &amp;quot;$http_user_agent&amp;quot;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log geoproxy;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;forwarding-to-syslog&quot;&gt;Forwarding to syslog&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;error_log syslog:server=10.0.0.1 debug;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;access_log syslog:server=10.0.0.1,tag=nginx,severity=info geoproxy;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A common log aggregation stack is ElasticSearch, Logstash, and Kibana(ELK stack).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;request-tracing&quot;&gt;Request tracing&lt;&#x2F;h3&gt;
&lt;p&gt;Using &lt;code&gt;request_id&lt;&#x2F;code&gt; to track request. It will generate string of 32 hex characters.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;log_format trace &amp;#39;$remote_addr - $remote_user [$time_local] &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;&amp;quot;$request&amp;quot; $status $body_bytes_sent &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;&amp;quot;$http_referer&amp;quot; &amp;quot;$http_user_agent&amp;quot; &amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;&amp;quot;$http_x_forwarded_for&amp;quot; $request_id&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;upstream backend {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server 10.0.0.1;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;listen 80;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;add_header X-Request-ID $request_id;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_pass http:&#x2F;&#x2F;backend;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_set_header X-Request_ID $request_id;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access_trace.log trace;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;performance-tuning&quot;&gt;Performance tuning&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;keeping-connections-open-to-clients&quot;&gt;Keeping connections open to clients&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;http {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;keepalive_requests 320;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# default 100
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;keepalive_timeout 300s;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# default 75
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;keeping-connections-open-upstream&quot;&gt;Keeping connections open upstream&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_http_version 1.1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_set_header Connection &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;upstream backend {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server 10.0.0.1;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server 10.0.0.2;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;keepalive 32;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;buffering-responses&quot;&gt;Buffering responses&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_buffering on;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_buffer_size 8k;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_buffers 8 32;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;proxy_busy_buffer_size 64k;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;buffering-access-log&quot;&gt;Buffering access log&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;http {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log main buffer=32k flush=1m;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# flush the log older than 1 minute
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;os-tuning&quot;&gt;OS tuning&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;connection number: &lt;code&gt;net.core.osmaxconn&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;open file descriptors: &lt;code&gt;sys.fs.file_max&lt;&#x2F;code&gt;, &lt;code&gt;worker_connections&lt;&#x2F;code&gt;, &lt;code&gt;worker_rlimit_nofile&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;enable more ephemeral ports: &lt;code&gt;net.ipv4.ip_local_port_range&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>极简流浪生活</title>
		<published>2019-07-21T00:00:00+00:00</published>
		<updated>2019-07-21T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/minimalist/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/minimalist/</id>
		<content type="html">&lt;p&gt;Less(poor) is more(hard).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;我并没有看过《断舍离》之类的书，也没有被什么文章洗脑，我过着极简的生活，更多的是出于对未来生活的悲观和贫穷的现状。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wu-pin&quot;&gt;物品&lt;&#x2F;h3&gt;
&lt;p&gt;基本上保证自己的所有物品都能通过一个24寸行李箱和一个双肩包带走。这也就注定不会考虑各种大件物品，诸如 PS4，山地车，电饭锅之类的。之前买过最大的就是空气净化器了，这个也是出于无奈，不买的话我可能早就被逼疯了。但其实那个空气净化器我是装行李箱带回家的……&lt;&#x2F;p&gt;
&lt;p&gt;在坡县的话，衣服被子就少很多了，只需要准备夏装就可以。加上公司会时不时发一些T恤，虽然质量不怎么样，不过也偶尔有几件算是能穿的出去的。最占地方的可能是篮球鞋了，现在觉得还是膝盖和命更重要，已经不太会去打篮球了。电子产品的话，从手机、kindle、iPad、键盘、降噪耳机到笔记本电脑，这一堆也真的是比较占地方了。之前没考虑到会出国，买了个小主机，现在想想确实不如买个树莓派玩玩，要省很多钱，现在带着也很麻烦。之后大概会换个轻薄游戏本吧，毕竟我是切身体会到只能写写代码的电脑是多么没用了…… kindle 由于吃灰太多，而我也不怎么需要泡面，所以就丢家里了。换了个安卓旗舰之后，感觉 iPad 的用处也不大了，下次也可以丢家里了，而且这个性能也有点跟不上。键盘我大概还是会继续带着，甚至有想再买一把的冲动，不过带个 Filco minila 和 iKBC poker 应该问题不大。&lt;&#x2F;p&gt;
&lt;p&gt;剩下的就是平时要克制住，少买非刚需的东西，有些真的需要买的就买点扔了不心疼的。比如 IKEA 的小方桌和厨具，走的时候直接扔就行了。当然总这么克制不花钱也很难受，所以钱更多的是花在游戏上了，买就买了，不玩也没关系，反正又不占地方。暂时没有什么付费的软件需要我出钱，工作相关的公司会提供。电子书的话，开源的都看不完。各种课，买过一些技术相关的，有的还行，不过还是觉得效果不够理想。各种活动，现在已经懒得去了，基本上没有什么收获。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xin-xi&quot;&gt;信息&lt;&#x2F;h3&gt;
&lt;p&gt;这方面我大概算不上极简了，本来就是有点靠着过度的信息量来跟别人竞争的，毕竟自己阅历太少。但还是会时常更新各种渠道，以保证高效和精简。Twitter、Telegram、Reddit 都算是不错的渠道了，挑一些自己需要的关注即可。&lt;&#x2F;p&gt;
&lt;p&gt;以前刚开始读英文的论文的时候，会从头到尾一个字不差读一遍，更多的是锻炼阅读能力，熟悉论文的结构。这样当然效率很低，一天读三篇不太多公式的就已经很累了，而且也觉得学不到太多东西。熟悉之后就开始跳读了，直奔主题，找到自己感兴趣的东西看看，或者带着挑毛病的心态读一部分，觉得有价值的才会细细品味。&lt;&#x2F;p&gt;
&lt;p&gt;现在看的比较多的是别人的 blog，有价值的多数还是自己搭建的，瞎折腾大概也是 geek 的常态了。一些技术 blog 写得确实很好，例子也到位，能动手练习一下最好。另外就是一些日常 blog，记录着生活经历和感想，有时候这些东西反而更重要，毕竟人是要先正常活着才有机会谈技术。说起来，也确实有几个人的 blog 对我影响颇深，并不是因为解答了我的技术问题，而是让我看到了生活的更多的可能，让我觉得人活着还是能去探索一些东西，即使走上了别人眼中的死路，也还是能继续走下去，甚至谁也说不准未来是什么样的。&lt;&#x2F;p&gt;
&lt;p&gt;当然，也是会经常看一些没用的信息，逛逛论坛，看别人水贴和吵架。也算是生活的一部分吧，三省吾身，有则改之，无则加勉。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ren-ji-guan-xi&quot;&gt;人际关系&lt;&#x2F;h3&gt;
&lt;p&gt;一直以来都是宁缺毋滥。平时联系很多的朋友不会超过 3 个。有时候也会遇到很多话不知道该找谁说，后来就开始锁推疯狂发给自己了，有时间可以下载下来看看哪段时间的自己最无聊。&lt;&#x2F;p&gt;
&lt;p&gt;我自己也是挑的很，经常会因为一点小事就觉得不是一路人。不过见微知著，也没有太多坏处，维持太多关系反而会冷落重要的朋友吧。以前一直被教育说要和别人好好相处，广交友，也算是给未来多留条路。可是时至今日，路从来都是自己走出来的，什么时候轮到别人给我路了。我也一直坚信只有自己才是最可靠的，想找别人帮忙，就先做到能承担得起别人搞砸的后果。&lt;&#x2F;p&gt;
&lt;p&gt;同时，正因为朋友很少，才不会被绊住，很多时候做决定只需要考虑自身的利益就好，什么对自己最有利就去做什么，也不会有人让我分心。某种程度上讲，相对自由。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;相比其他国家，中国的美食实在太多。感触最深的一次就是第一次在外过年的时候，去快餐店吃炸鱼块，那叫一个难吃，感觉都对不起食材。不过平时并不怎么重视，现在也经常吃沙拉，经常连酱都不用，就是品尝蔬菜本身的味道。可能在很多人看来都有点病态了，不过我一直都喜欢吃点清淡的，偶尔尝尝其他的就行了。大概是因为喜欢少油少盐，才对外面的各种食物没有多少欲望，很少下馆子，营养差不多够了就行，也并不会觉得吃到美食就感觉活着真好之类的……&lt;&#x2F;p&gt;
&lt;p&gt;也很少出游。从小长在山脚下，见多了怪石、河流、湖泊，现在海也见过了，虽然这些都有很多种类，但我也没有太多的好奇。说到文物，去过最大的博物馆大概是湖北省博物馆了，还是跟室友骑车过去逛的。其他地方的风俗我也没多少好奇。大概是因为如此，很少有想去旅游的念头，反而是觉得很累很麻烦，还不如看看书，打打游戏。&lt;&#x2F;p&gt;
&lt;p&gt;这样的生活过得并不舒服。当然，也没觉得现在是能舒服的时候。其实更多的是对未来的悲观。不确定的事情太多了，运气又是最靠不住的，各种意外也算常客，我也不是很乐观的人，无非就是做好最坏的打算，该走就走，该放下就放下，没有太多的负担。不过希望自己三十岁的时候，能有一个相对安稳的生活吧。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>极客的爱情</title>
		<published>2019-06-17T00:00:00+00:00</published>
		<updated>2019-06-17T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/geek-love/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/geek-love/</id>
		<content type="html">&lt;p&gt;我并非故意要标榜极客是多么另类的群体，只不过当两个极客相遇并惺惺相惜，他们之间法生的很多事情确实有趣的很，至少对其他极客来讲。而这样的事情，放在普通人身上或许只会让人觉得奇怪吧。嗯，看起来还是比较另类的。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;matrix67-localhost&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.matrix67.com&#x2F;blog&#x2F;&quot;&gt;Matrix67&lt;&#x2F;a&gt; &amp;amp; &lt;a href=&quot;https:&#x2F;&#x2F;localhost-8080.com&quot;&gt;localhost&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;第一次见到 Matrix67 这个名字，大概是在果壳上吧。这里放上一篇他在果壳上发表的文章：&lt;a href=&quot;https:&#x2F;&#x2F;www.guokr.com&#x2F;article&#x2F;57837&#x2F;&quot;&gt;七夕特献：数学家们的爱情故事&lt;&#x2F;a&gt;。之后就开始关注他的博客，里面又很多数学相关的内容，我那时也已经是数学系的学生了，不过自知能力远不如他。他的那本&lt;a href=&quot;https:&#x2F;&#x2F;book.douban.com&#x2F;subject&#x2F;10779597&#x2F;&quot;&gt;《思考的乐趣》&lt;&#x2F;a&gt;，是我在果壳实习的时候利用通勤的时间看完的。这里就不过多吹捧了，作为一个天天被各路神人虐的人，也早就麻木了。&lt;&#x2F;p&gt;
&lt;p&gt;直到今年，偶然间想去看看他停更的博客还有没有什么动静。随手搜了一下，找到了他的 Twitter，才知道他已经是有孩子的大叔了。接着看了下他结婚对象的博客，没想到也是有很多有趣的文章。原来他最后跟同样志趣的人结婚了！&lt;&#x2F;p&gt;
&lt;p&gt;忍不住刷了很多篇，一点点感受他们的故事。虽然时间已经过去好几年了，可是那些文字中透露出的情感却是一样的浓烈。找到志同道合的人时的兴奋，与对方交流时的欢欣，怕自己不够优秀的焦虑，面对现实时的迷茫，这一切都像是书里才存在的故事，可是现在，我看到了活生生的例子。有这样的先例在，我理当确信自己所追求的并非是虚无缥缈的，大概目标会更加坚定吧。&lt;&#x2F;p&gt;
&lt;p&gt;他们的故事，也让我觉得写博客还是有点必要的。虽然我的博客里面基本没有技术相关的东西，多是自己的碎碎念，也很难指望靠这个找到自己喜欢的人，不过凡事都要先迈出第一步。也许有人觉得博客有点过时了，但我并没有找到更好的信息载体。GitHub 是我非常喜欢的网站，用 GitHub Pages 写博客也差不多可以满足我的需求了，起码在这个时候，国内的互联网越来越封闭，各家公司之间竞争激烈，甚至于很多东西都对搜索引擎不可见了，这绝对不是互联网该有的样子，相比之下可能传统的博客更合适吧。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shu-xue-nu-hai&quot;&gt;数学女孩&lt;&#x2F;h2&gt;
&lt;p&gt;前几天突然想看一下评价极高的数学女孩到底写了点什么。开始翻阅后，就再难停下来了，一口气读完了三本。&lt;a href=&quot;https:&#x2F;&#x2F;www.hyuki.com&#x2F;girl&#x2F;en.html&quot;&gt;Mathematical Girls&lt;&#x2F;a&gt;系列讲的是男主和几个女同学学习讨论数学问题的事情，当然这几个女同学的设定也都是非常漂亮的:)。Tetra 是那种非常努力的热情少女，Milka 则是高冷的天才少女，他们从简单的方程，集合，讨论到费马大定理，哥德尔不完备定理，这个过程实在是太吸引人了，没想到我这种数学系半途而废的人也能轻松看懂证明过程。&lt;&#x2F;p&gt;
&lt;p&gt;书中的故事自然是离我十万八千里的。我没有机会在中学认识这样优秀的人，大学也过得一般般吧，开始工作后慢慢接触到一些有趣的人。只不过，想要有一群书中描述的那样的互相讨论问题的朋友，怕是很难了。这有点像是《大学之路》中所描述的理想中的大学的样子，一群好奇心强且聪明的青年聚在一起，他们互相探讨问题，互相学习，不知道这辈子有没有机会体验一下这样的生活呢？&lt;&#x2F;p&gt;
&lt;p&gt;当然也要吐槽下书里的套路了。被一群女孩子喜欢还真是……让人羡慕啊，关键是这么优秀的女生。不愧是主角光环。想来想去，还是高木同学和西片同学更美好，一对一不说，两人都是很普通的设定，没有谁大富大贵或智力超群，但是日常真的很甜。中和一下，大概就是理想的爱情了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fitz-simmons&quot;&gt;Fitz &amp;amp; Simmons&lt;&#x2F;h2&gt;
&lt;p&gt;这大概是一对被诅咒的情侣吧。很可能是被编剧诅咒的……总之，从他们出现在神盾局中开始，就一直经历各种苦难，外星致命细菌，困在海底，大脑受损，被传送到外星球，被传送到几十年后，他们之间的感情大概真称得上是穿越了时间空间和生死吧。这一路走来，他们俩都从初出校门的胆怯学生，变成了勇往直前的特工，当然也一直都是天才科学家。影片中我感触最深的一幕是他们重归于好的时候，但愿一切能回到他们的 16 岁，两个青少年，对世界有着无尽的好奇心，一个是工程师，另一个是生物化学家，互相补充，开始一段只属于他们的旅程。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rintaro-kurisu&quot;&gt;Rintaro &amp;amp; Kurisu&lt;&#x2F;h2&gt;
&lt;p&gt;Steins;Gate 可以算是神作了吧。一开始伦太郎看起来就是一个中二病晚期患者，面对红莉栖这样的天才少女，也只有各种被教育的份儿。他鼓捣出来的那一堆发明，堪比手工耿了，基本上没有什么是能用的。桶子好歹也是一流的黑客了，虽然典型死肥宅，那也是技术流的，被由季喜欢也算合理。冈伦的中二实在是太强了，掩盖了他身上很多亮点。直到后期，面对各种危险，才凸显出他的勇敢果决、领导和分析能力。最后一招欺骗世界来拯救助手，算是给出了一个像样的完美结局。&lt;&#x2F;p&gt;
&lt;p&gt;冈伦的 Future Gadget Laboratory 也是我向往的，一群 geek 聚在一起，随便折腾点乱七八糟的东西也是很有趣的。一开始只不过是他一个人的妄想，然后拉着真由里过来凑个数，桶子算是大大提搞了生产力，后面又加进来一系列的人，才让整个 lab 热闹起来。不过事实往往就是，从创立到最后倒闭也只有一个人在苦苦支撑:(。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zui-hou&quot;&gt;最后&lt;&#x2F;h2&gt;
&lt;p&gt;理想很美好，现实很残酷。不过还是要守着这样的想法走下去的。该折腾的 lab 还是要折腾的，然后就是广泛阅读，没事多写写代码和博客，不指望有谁看到，起码留点足迹吧。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Ansible tutorial for human</title>
		<published>2019-06-12T00:00:00+00:00</published>
		<updated>2019-06-12T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/ansible-tutorial-for-human/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/ansible-tutorial-for-human/</id>
		<content type="html">&lt;p&gt;We need documents for human, not for robots.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;blockquote&gt;
&lt;p&gt;What is ansible?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ansible is a tool for DevOps. It can be used to：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;define server groups in inventory&lt;&#x2F;li&gt;
&lt;li&gt;control a group of servers like localhost&lt;&#x2F;li&gt;
&lt;li&gt;setup environments on servers
&lt;ul&gt;
&lt;li&gt;install, update, remove apps&lt;&#x2F;li&gt;
&lt;li&gt;write, copy files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;execute command on servers&lt;&#x2F;li&gt;
&lt;li&gt;use playbooks to execute a series of tasks&lt;&#x2F;li&gt;
&lt;li&gt;use others&#x27; playbooks as roles from ansible galaxy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tutorial&quot;&gt;Tutorial&lt;&#x2F;h2&gt;
&lt;p&gt;The easiest way to learn how to use ansible is learning from examples. Only when you find some key words that confuse you that you need to check the official documents with search engines.&lt;&#x2F;p&gt;
&lt;p&gt;Here I&#x27;d like to give you some simple introductions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;inventory&quot;&gt;Inventory&lt;&#x2F;h3&gt;
&lt;p&gt;TOML like file that defines the group of servers. If you already defined some hosts in &lt;code&gt;$HOME&#x2F;.ssh&#x2F;config&lt;&#x2F;code&gt;, you can use the host name instead of IP address.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;master&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;10.0.0.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;worker&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;10.0.10.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;10.0.10.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;10.0.10.3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the file above, we define two groups of servers. Then you can use &lt;code&gt;master&lt;&#x2F;code&gt;, &lt;code&gt;worker&lt;&#x2F;code&gt;, &lt;code&gt;all&lt;&#x2F;code&gt; as group name. Save this file as &lt;code&gt;&#x2F;etc&#x2F;ansible&#x2F;hosts&lt;&#x2F;code&gt; so you can use it anywhere.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ansible-cmd&quot;&gt;Ansible cmd&lt;&#x2F;h3&gt;
&lt;p&gt;Ping all the servers: &lt;code&gt;ansible all -m ping&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Run a live command: &lt;code&gt;ansible worker -a &amp;quot;&#x2F;bin&#x2F;echo $USER&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;playbooks-and-roles&quot;&gt;Playbooks and roles&lt;&#x2F;h3&gt;
&lt;p&gt;You can execute a series of tasks defined in the playbooks. First of all, check if there exists roles that already done the same thing you need. Roles can be found from &lt;a href=&quot;https:&#x2F;&#x2F;galaxy.ansible.com&#x2F;&quot;&gt;Ansible Galaxy&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Playbooks is defined in yaml file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;hosts&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;all
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;become&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;roles&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;nvidia.nvidia_driver
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;nvidia.nvidia_docker
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;tasks&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;turn off swap
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;swapoff -a
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;ansible_swaptotal_mb &amp;gt; 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;add k8s GPG key
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;apt_key&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;url=https:&#x2F;&#x2F;packages.cloud.google.com&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg
&lt;&#x2F;span&gt;&lt;span&gt;      
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;install kubectl kubelet kubeadm
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;apt&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;kubelet&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;kubectl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;kubeadm&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;present
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;update_cache&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For each task, you can do almost everything like &lt;code&gt;command&lt;&#x2F;code&gt;, &lt;code&gt;apt&lt;&#x2F;code&gt;, &lt;code&gt;copy&lt;&#x2F;code&gt;, &lt;code&gt;replace&lt;&#x2F;code&gt;. Find what you need with search engines.&lt;&#x2F;p&gt;
&lt;p&gt;Execute playbooks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;ansible-playbook&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; inventory k8s.yml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;&#x2F;h2&gt;
&lt;p&gt;This is almost everything you need to know about ansible as a beginner :)&lt;&#x2F;p&gt;
&lt;p&gt;As usual, GitHub and StackOverflow are still your best friends.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>996ICU</title>
		<published>2019-04-28T00:00:00+00:00</published>
		<updated>2019-04-28T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/996/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/996/</id>
		<content type="html">&lt;p&gt;那个 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;996icu&#x2F;996.ICU&quot;&gt;996.icu&lt;&#x2F;a&gt; 的项目也快一个月了，现在 star 增长不多了，估计不会突破 250k。我早就觉得有写点什么的必要了。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;zhe-jian-shi-zhi-qian&quot;&gt;这件事之前&lt;&#x2F;h2&gt;
&lt;p&gt;996，朝九晚九一周六天，这个概念在我还没毕业的时候就广泛流行于程序员界。当时大家的看法是，基本上所有国内的公司都是这样的，最少也是 995 起步，而 965 的就很少见了。只要钱给够，997 也不在话下。当然我还是老实去了一家 965 的公司，毕竟保命要紧。当然，说不羡慕同学 996 高工资那肯定是不可能的，刚出门就比我高出一截，那以后还不上天了？&lt;&#x2F;p&gt;
&lt;p&gt;但我是不会因为这种事情就跑去海投简历，找高工资的公司的。一方面是因为我很懒，有个合适的坑就先混了；另一方面，我对自己的身体没有信心，真要我 996 怕是半年都撑不下来，我是真的受够了进医院了，也不想沦为庸医的实验品。除此之外，还可以骗自己说不加班才有充足的时间学习。（难道不是下班动漫游戏打篮球吗？）&lt;&#x2F;p&gt;
&lt;p&gt;说不加班，也只是没必要加班工作而已。但其实经常八九点下班，这也是常态，虽然比不上东哥的兄弟们留到 11 点的那种精神。干这一行的，要学的新东西实在多得吓人。很多时候不光是机器学习相关的，基本的前后端、数据库、设计，还是要会一些的。另外，刚毕业还单身的人，回去很多时候也特别无聊，尤其是我这种走极 pin 简 qiong 路线的人，回去也只能躺床上刷刷 iPad，根本没有合适的学习环境，还不如留在公司刷刷 blog。严格讲，这样子也不算加班了，你说占用公司水电网薅羊毛也不假。反正公司也不吃亏，我水平上去了对公司又没什么坏处。&lt;&#x2F;p&gt;
&lt;p&gt;当然，这些年一直能看到程序员加班猝死的新闻，各种颈椎病之类的工伤更是不在话下。自己除了叹息以外，也没有太多感触，毕竟我又不需要疯狂加班，工资低也无所谓，反正又买不起房，也不是之前那种没钱吃饭的时候了。&lt;&#x2F;p&gt;
&lt;p&gt;让我一个没有真正 996 过的人来讨论这个，我只能说，我是不会去 996 的公司的，这里没有真香的可能，除非是我自己跑出去创业。&lt;&#x2F;p&gt;
&lt;p&gt;那么 996 到底有没有意义呢？我记得之前湾区日报曾经做过一次调查，程序员每天有意义的工作时长，大部分人选了 3-4 个小时。这其实是非常合理的，脑力劳动一天 12 个小时简直天方夜谭，8 个小时中好好干活 4 个小时无疑已经算是高产了，本来这 8 个小时就已经把划水的时间算进去了，人又不是机器，不可能一直不分心的。另外，超长时间的工作对身体和精神的伤害是巨大的，很有可能变成“有命加班，没命花钱”，后面也不会是“老婆改嫁，孩子叫别人爸”，因为一般也没有女朋友的，这种早出晚归，秃头油腻又不修边幅的，正常人见了都要躲开。就算是没有严重到进 ICU，各种潜在的伤病，比如颈椎病，腰椎病，腱鞘炎等等，以后要命的日子可多了去了。精神问题也很重要，长期加班很容易感觉不到人生的意义，彷佛就是不停给资本家卖命干活，一辈子买不起房，只能当韭菜，那还活个屁啊。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-qing-bao-fa&quot;&gt;事情爆发&lt;&#x2F;h2&gt;
&lt;p&gt;这个项目是目前 GitHub star 增长最快的，很夸张，一周就登上历史第二了，Vue 刚到历史第二没几天就被挤下来了。&lt;&#x2F;p&gt;
&lt;p&gt;中国的程序员们表现出无比的热情，当然泼冷水的亦不在少数。这样一个项目，就算吹上天也只是网上的集体狂欢，实际中能否有作用还要靠所有人团结一致，拿出实际行动来抵制 996。就目前来看，还是有点行动的，比如，相关的 badge，License，996 list，955 list，法律依据，海外工作介绍，相关疾病介绍，给相关部门寄信。至少，在这次网络舆论中，让大家重新认识到，本来我们都可以过上朝九晚五，work life balance 的生活的，而不是像现在这样被工作压得喘不过气，没有时间跟家人在一起，像标准社畜一样苟活着。&lt;&#x2F;p&gt;
&lt;p&gt;GitHub trending 霸榜数周，也让全世界开始关注这件事。Python 之父 Guido van Rossum 也站出来呼吁人们反抗这种资本剥削，拿回属于自己的权利。Microsoft 的工作人员也组织了联名抵抗。当然，国内的大公司也并非无动于衷，比如，多个浏览器屏蔽了 996.icu 网站……这波操作实在是秀，人民日报都说了，“崇尚奋斗，不等于强制 996”。当然少不了各位大佬出来发声，马云称其为“福报”，刘强东大概也表露了不奋斗的不配当我兄弟。毕竟大家立场不一样了，无产阶级跟资本阶级不能相提并论。&lt;&#x2F;p&gt;
&lt;p&gt;另外，其他群体也出来发声。医生说你们知道什么是 007 吗？工人说你们知道什么叫没有休假吗？人们的矛头开始乱指。行行都不容易，无产阶级看起来还不够团结，即使是有共同利益，也会因为彼此间不同的处境而刀剑相向。这次是中国程序员发声，他们虽然不善于走上街头，但至少键盘还是会敲的，在社区一呼百应也不算难。其他职业，也许只能在微博上说几句吧，然后期望有大 V 帮忙转发。可不论是什么职业，只要是没有得到法定的权益，都应该站出来一起抗争。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xue-sheng-shi-dai&quot;&gt;学生时代&lt;&#x2F;h2&gt;
&lt;p&gt;遥想自己上中学的时候，学校盲目学习衡水中学，搞什么准军事化管理，各种封闭，各种畸形的规定，逼迫学生每天 5 点多起床，晚自习上到 10 点多，几乎每周都有考试，食堂的饭也很难吃，餐厅甚至连椅子都没有，真正的艰苦奋斗。然而这样的环境，彻底毁掉了我的身体，几乎总是处在生病的状态，很少有一周不请病假的情况。而且每天严重睡眠不足，上课睁不开眼，也就是那个时候养成的习惯，上课开始积极补觉，下课出去溜达一圈，后来慢慢演变成上课就睡，几乎所有的课都不听了，全靠课后看看书，效果可想而知，基本上全凭自己构建整个知识结构。这样算下来，每天其实也就在自习课上学一点东西，大概 3 个小时左右。最后当然也没有考上什么好学校。&lt;&#x2F;p&gt;
&lt;p&gt;到了大学，还是老样子，上课睡觉，课后学习，不少老师当然有意见了。虽说大学的老师一般也不管那些不打扰别人的行为，比如上课睡觉、玩手机，总归是影响不好，明明应该利用上课时间自学的啊。大学虽然待在数学系，却没有学多少数学，大部分时间都花在编程上面了，很遗憾没有多学点数学，这东西出了校门很难有环境去学了，更多的时候是不知道用在哪儿，该学什么来解决遇到的问题。&lt;&#x2F;p&gt;
&lt;p&gt;总之，没有那种惨无人道的生活后，不管是学习的热情还是成果，都得到来极大的提高。绕了这么一圈，还是觉得很亏啊。如果，当时只是正常作息来学习，大概结果会好很多吧？至少不需要经历那么多不必要的痛苦了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jing-shen-zi-ben-jia&quot;&gt;精神资本家&lt;&#x2F;h2&gt;
&lt;p&gt;这个词特指那些明明是无产阶级，手里更没有公司的股份，还把自己当成公司的股东，教育别人要努力奋斗。虽然我们经常说要多站在别人的立场考虑问题，但前提是双方是平等关系。面对资本剥削，还要傻傻站在对方立场，考虑怎么才能利润最大化，怎么剥削无产阶级的，大概是脑子有问题吧。&lt;&#x2F;p&gt;
&lt;p&gt;你不加班，他也不加班，都不老老实实被剥削，那让资本家怎么活？资本家的日子可苦了，全年没有休息日，经常加班到深夜，要陪客户吃饭喝酒，陪客户游山玩水，满世界跑，变得越来越油腻，都是为了你们工人能拿到工钱，摸着你的良心说，你们该不该多加班让资本家多挣点钱花？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gong-zei&quot;&gt;工贼？&lt;&#x2F;h2&gt;
&lt;p&gt;这大概算是一个不怎么友好的词了。之所以说是工贼，是因为他们窃取了工人阶级流血牺牲换来的基本权益，反而逼迫更多的人被压迫。&lt;&#x2F;p&gt;
&lt;p&gt;客观来看，在没有被要求加班的情况下，通过加班工作来做出更多业绩，以确保自己升职顺利，确实算不正当竞争。当然，你利用下班时间学习，然后靠实力打败别人，那别人肯定无话可说了。别的行业我不清楚，起码程序员加班写业务代码是远不如花时间学习对未来发展有利。&lt;&#x2F;p&gt;
&lt;p&gt;当然，这都是个人选择。既然要靠加班工作来博取认可，那八成工作能力也不怎么样，恐怕并不适合当前的工作，还是交给别人来做比较合适。决定这么做就别抱怨别人骂你了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hou-xu&quot;&gt;后续&lt;&#x2F;h2&gt;
&lt;p&gt;当初 Guido 在 Python 社区问，“&lt;a href=&quot;https:&#x2F;&#x2F;discuss.python.org&#x2F;t&#x2F;can-we-do-something-for-996-programmers-in-china&#x2F;1119&quot;&gt;Can we do something for 996 programmers in China?&lt;&#x2F;a&gt;“。但并没有得到多少有价值的回答，最好只好关闭该问题。&lt;&#x2F;p&gt;
&lt;p&gt;在我看来，这件事还是需要内部解决的，国人一向如此，特别能忍，能不出头就不出头，儒家思想中的腐朽成分可谓是贯彻始终。外国人如果掺一脚难民还会被扣上国外反动势力的帽子。在我看来，远程工作和招聘外国人会在一定程度上缓解这种问题。毕竟发达国家很多地方都缺人手，中国人也相对勤劳不闹事，有更好的机会，当然大家也会愿意出国工作的，这种事情已经渐渐变得很常见了，当然我也见过很多不靠谱的，比如东南亚的博彩事业……&lt;&#x2F;p&gt;
&lt;p&gt;不知道有多少人能认清现实，这样无休止的加班并不能过上更好的生活，反而会毁掉健康的身体，以后甚至都不一定有后悔的机会。为了自己的发展，明明应该少加班多学习。打工就不要当自己是资本家了，双方本应当是平等关系，拿规定的钱，做规定的事，如此而已。&lt;&#x2F;p&gt;
&lt;p&gt;最后，希望认清现实的人都能逃离 996，过上自己想要的生活。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>意难平</title>
		<published>2019-03-16T00:00:00+00:00</published>
		<updated>2019-03-16T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/yi-nan-ping/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/yi-nan-ping/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;巫炤，他惩罚别人，也惩罚自己。他只是意难平。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;我想写《古剑奇谭3》想很久了，一直在犹豫写些什么，这几天刚好看到一点历史信息，查了点地理位置，觉得很有趣，刚好可以凑一篇奇怪的（？）什么。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wu-zhao&quot;&gt;巫炤&lt;&#x2F;h2&gt;
&lt;p&gt;巫炤是个很有趣的人，生而为人，却天生具有强大的巫之血和极高的天赋，再加上智商，在游戏的世界观里，即使算上神仙妖魔，也一样是顶级的存在。生而强大，或许很难懂底层的人要怎么为生存而挣扎。对他而言，朋友、族人远远比人族的传承和兴衰重要的多。也许很多人觉得他有些狭隘，西陵人是人，难道轩辕丘的其他族就不是人了吗？非我族类，其心必异。即使放在今天，很多人也是这样想的。&lt;&#x2F;p&gt;
&lt;p&gt;在他心目中，大概嫘祖算是第一重要的，同族最强的两个人，惺惺相惜吧。看剧情好像他对嫘祖嫁给姬轩辕有些不满，或者说他从头到尾都对姬轩辕没多少好感，大概是三观的问题吧……毕竟姬轩辕要的是整个人族的兴盛，行事总要有所取舍，难免让巫炤觉得不可理喻。缙云也算嫘祖的徒弟了，剑法第一，鬼神皆斩，比起姬轩辕要单纯不少，这也是跟巫炤很谈得来的原因吧。&lt;&#x2F;p&gt;
&lt;p&gt;西陵人在巫炤心中是怎样的地位呢？我觉得更多的是他身为鬼师的责任感吧。他如果真的把族人看得很重，就算觉得很难接受，大概也会同意嫘祖的决定，把一切交给姬轩辕处理，而不是一直对西陵并入轩辕丘耿耿于怀。鬼师一职他也没多大兴趣，早就想找个徒弟传位了。他有能力去追求自己想要的，没必要为了别人的生死而奔波劳累。&lt;&#x2F;p&gt;
&lt;p&gt;魔族入侵，西陵城破，嫘祖战死，让他压抑许久的情绪爆发了。魔族自然是仇敌，对姬轩辕长久以来的不满和姬轩辕的选择，更让他愤怒。他当然知道，即使姬轩辕派人全力驰援西陵，也很难保住西陵，还会导致整体损失更加严重。但他从来也不在乎其他族的死活，甚至西陵的兴衰，哪怕姬轩辕拼命只救下嫘祖一个人，恐怕他也不会这么愤怒了。&lt;&#x2F;p&gt;
&lt;p&gt;巫炤，他在以天地为棋盘和世界对弈。他手中掌握的就是西陵。什么神仙妖魔，其他族人，于他而言，既可以是中立的，也可以是对立的。甚至必要的时候，他手中的棋子也一样可以全部牺牲掉。这就是为什么他一怒之下，逼死所有迁往轩辕丘的西陵人。违逆他心意的，就是对手。&lt;&#x2F;p&gt;
&lt;p&gt;为了朋友，他当然也可以作出牺牲。嫘祖的请求他不会拒绝，为了就缙云他也一样尽心尽力。但缙云最后选择相信姬轩辕，以大局为重，他一样可以斩断羁绊，以死相搏。即使是他再次醒来时，也愿意作很大的牺牲，给北洛送一份大礼。别说是别人的生死，就连他自己的生死，他也一样不放在心上。&lt;&#x2F;p&gt;
&lt;p&gt;一切都太突然了，巫炤什么都没了，他除了报复，什么都做不了。有时候他也会感叹，如果再晚三十年，也许姬轩辕的计划真的能行。可惜没有如果，一个落魄的棋手到了最后，也只能这么挣扎了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ju-shi&quot;&gt;局势&lt;&#x2F;h2&gt;
&lt;p&gt;之前看到一张图，古时候地名和现在地名的对比，发现西陵其实就是今天的宜昌，当然也有武汉黄陂区一说。总而言之，在湖北省是跑不了的。轩辕丘（有熊）也一样，一说是新郑（可能性更大），一说是开封，不过总归是中原地区。这两地的距离至少也是400公里，马匹够好还能换的话，大概大半天时间吧。那么集泷呢？当时说的是集泷、郾川、郝洺三邑，郝洺查不到，郾是漯河附近，游戏里有说到这三地应该很靠近，而且从西陵到集泷比有熊到集泷近很多，如采表白缙云的时候也说她父亲是姬水河畔最有名的做陶人，让缙云跟她回集泷，而姬水是今天的潩水，大概从新郑流经许昌往漯河方向，最后往右经周口到颍河。但是查到泷水远在广东……这么来看，集泷大概是在许昌、周口、漯河三市附近了吧，这样勉强对的上了，而且到有熊的距离也很近。如果是远在广东的话，那拼命驰援也没用了，况且那个时候还是主要生活在两河流域。从有熊到集泷三邑大概一百公里以内，赶过去还是来得及的。&lt;&#x2F;p&gt;
&lt;p&gt;另外还要考虑信息传递的延迟性，我们开上帝视角的话，也会同意先救集泷三邑，再跑去西陵。（可惜缙云救下如采，最后还是被巫炤杀了……）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yi-dian&quot;&gt;疑点&lt;&#x2F;h2&gt;
&lt;p&gt;根据游戏的世界观，魔是从梦境找到出口才跑到人间的。而巫臷民养的半魂莲，以及伴生的梦魂枝，是能够影响梦境的重要道具。巫臷民希望从中获取力量，但是他们也一直没有完全弄明白半魂莲和魔族的关系。巫臷国的灭亡大概也是跟魔族有关。就算是巫炤，当时估计也不清楚，但是西陵大量的半魂莲肯定是给魔族入侵提供了极大的便利。当然，这也不是批评他们作死了，连姬轩辕也说他们是人族的先驱，本来也就没有什么正确的方向，大家都只是不断尝试罢了。&lt;&#x2F;p&gt;
&lt;p&gt;巫炤之后肯定是明白魔族是怎么入侵的。毕竟破镜之战后，能从魔域跑到人间的，除了辟邪，就只能是通过梦境了。而半魂莲能催眠，把梦稳定住并拼接起来，后来发现人是承载魔气的绝佳容器，这才搞出鄢陵的事情。不知道巫炤想明白的时候是怎样一种心情，当年的西陵之难，很大程度上都是巫之堂追求力量，研究半魂莲的事故，还祸及整个人族。&lt;&#x2F;p&gt;
&lt;p&gt;当然，不管怎样，后来的巫炤，只想用自己最后的力量报复轩辕丘和魔族了。即使又被北洛杀死，想必还是留了后手。北洛没有用磔，那巫炤还有机会再次复活，只不过到时候还能有多少力量就很难说了。而他让鸤鸠带着怀庆去找其他有巫之血的人，我猜是他有办法从中唤醒这股古老的力量，说不定是能收为己用。当然，他也说了，胜负在他们死后才见分晓。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The worst practice for software engineering</title>
		<published>2019-03-13T00:00:00+00:00</published>
		<updated>2019-03-13T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/worst-practice/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/worst-practice/</id>
		<content type="html">&lt;p&gt;People will suffer a lot from bad design or bad code in software engineering. Today I&#x27;d like to share a number of the worst practices.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;put-code-in-ms-word-or-pdf-file&quot;&gt;Put code in MS Word, or PDF file&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, the code in Word is also colorful. By the way, I can cancel the modification easily. Oh, even cooperating with friends. That&#x27;s interesting.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Oh, come on. Don&#x27;t tell me that your code is for exhibiting?&lt;&#x2F;p&gt;
&lt;p&gt;All right. If your teachers tell you to do so, that means they may not run your code. Of course, they won&#x27;t do the duplicate checking, either. You may need to find more resource on the Internet for promotion. Don&#x27;t count on school.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;code-is-only-saved-in-local-and-live-server-without-version-control&quot;&gt;Code is only saved in local and live server without version control&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;You know what, &#x27;git&#x27; means !@#$%^&amp;amp;*&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Congratulations if your company still run well. And hope the person who takes over your work won&#x27;t curse you for a month. (Oh, he may not know your contract since you left nothing.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data1-data2-path1-path2-name1-list0-fun1&quot;&gt;data1, data2, path1, path2, name1, list0, fun1...&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you know how many time the programmers spend on naming?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Then, you really need a good editor. Although CPU doesn&#x27;t care the names, I think you are working with human beings.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;write-duplicate-code-everywhere&quot;&gt;Write duplicate code everywhere&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, guess how many lines of code I have write in one day?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Your boss won&#x27;t pay you more money due to the lines of code you write. But you really waste a lot of time and you will waste more time. Since every time you change one place, you need to change many places and you may forget where to change.&lt;&#x2F;p&gt;
&lt;p&gt;Do you know there is something we call &amp;quot;function&amp;quot;?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-loop&quot;&gt;What is loop?&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Type &lt;code&gt;staff.append(&#x27;xxx&#x27;)&lt;&#x2F;code&gt; for 100 times in one minute.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Fine, I know your typing is very fast. But do you know sometimes we use the loop?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;print-everything-to-std-out&quot;&gt;Print everything to std::out&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;That&#x27;s very clear. You see, everything goes well.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Once your code raises an exception, you can only ask the God for help. For every project, logging will give you hints when the code goes wrong. Besides, that&#x27;s not difficult to replace print with logging. There are also lots of tools to analyse logs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;save-everything-to-local-files&quot;&gt;Save everything to local files&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Now I have everything stored.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Later you may lost everything. Remember to use database. Lots of people develop it for this purpose.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;push-everything-to-code-repository&quot;&gt;Push everything to code repository&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Now, everything is covered by version control!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I&#x27;ll pull down your code and deploy it. Wait, it&#x27;s 2.33 GB? Are you kidding me? Why there are so many binray files and logs?&lt;&#x2F;p&gt;
&lt;p&gt;I know there is large file system for data store. But apparently, these files should be ignored.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;leave-readme-file-blank&quot;&gt;Leave README file blank&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Actually, I don&#x27;t have README file :) Very mysterious, right?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;LOL. I don&#x27;t even show you my code. Am I mysterious?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;leave-useless-code-everywhere&quot;&gt;Leave useless code everywhere&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;These code may be useful next time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You really need to master version control.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;no-documents-no-comments-no-tests&quot;&gt;No documents, no comments, no tests&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;ll add them when the project is finished.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Really? :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;use-hashmap-everywhere&quot;&gt;Use HashMap everywhere&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;I just learned that it&#x27;s O(1)! &lt;code&gt;map[0] = &#x27;a&#x27;; map[1] = &#x27;b&#x27;; map[2] = &#x27;c&#x27;;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Clever. But you only need an array.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;useful-resources&quot;&gt;Useful resources&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;a-nickels-worth.blogspot.com&#x2F;2016&#x2F;04&#x2F;a-guide-to-naming-variables.html&quot;&gt;A Guide to Naming Variables&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;google.github.io&#x2F;styleguide&#x2F;pyguide.html&quot;&gt;Google Python Style Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;education.github.com&#x2F;git-cheat-sheet-education.pdf&quot;&gt;Git cheat sheet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Note for Vimtutor</title>
		<published>2019-02-24T00:00:00+00:00</published>
		<updated>2019-02-24T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/vimtutor/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/vimtutor/</id>
		<content type="html">&lt;p&gt;Just type &lt;code&gt;vimtutor&lt;&#x2F;code&gt; in your terminal to learn the basic usage of Vim.&lt;&#x2F;p&gt;
&lt;p&gt;Although I usually use VSCode for coding, sometimes you have to edit files in the server. Mastering the basic of Vim is necessary.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;1-basic&quot;&gt;1. Basic&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-1-moving-the-cursor&quot;&gt;1.1 Moving the cursor&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;     ^
&lt;&#x2F;span&gt;&lt;span&gt;     k
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; h     l &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;     j
&lt;&#x2F;span&gt;&lt;span&gt;     v
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;1-2-exiting-vim-scream&quot;&gt;1.2 Exiting vim 😱&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Normally: &lt;code&gt;:q&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Write and exit: &lt;code&gt;:x&lt;&#x2F;code&gt; or &lt;code&gt;:wq&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Without saving changes: &lt;code&gt;:q!&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Write with sudo: &lt;code&gt;:w !sudo tee %&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-3-deletion&quot;&gt;1.3 Deletion&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Single character: &lt;code&gt;x&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-4-insertion&quot;&gt;1.4 Insertion&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Activate insertion mode: &lt;code&gt;i&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Insert from the beginning of the line: &lt;code&gt;I&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-5-appending&quot;&gt;1.5 Appending&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Append to this word: &lt;code&gt;a&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Append to this line: &lt;code&gt;A&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2-combined-operation&quot;&gt;2. Combined Operation&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2-1-delete&quot;&gt;2.1 Delete&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;d motion&lt;&#x2F;code&gt; where &#x27;motion&#x27; is what the operator will operate on&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Delete from cursor to the start of the next word, EXCLUDING its first character: &lt;code&gt;dw&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Delete from cursor to the end of the current word, INCLUDING the last character: &lt;code&gt;de&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Delete from cursor th the end of line: &#x27;d$&#x27;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-2-using-a-count-for-a-motion&quot;&gt;2.2 Using a count for a motion&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;number motion&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Moving to the start of the line: &lt;code&gt;0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Moving the cursor 5 words forward: &lt;code&gt;5w&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Moving the cursor to the end of the 3rd word forward: &lt;code&gt;3e&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-3-using-a-count-to-delete-more&quot;&gt;2.3 Using a count to delete more&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;operator number motion&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Delete 2 words: &lt;code&gt;d2w&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-4-delete-a-whole-line&quot;&gt;2.4 Delete a whole line&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Delete current line: &lt;code&gt;dd&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Delete 2 lines from current line: &lt;code&gt;2dd&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-5-undo-and-redo&quot;&gt;2.5 Undo and redo&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Undo the last commands: &lt;code&gt;u&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Undo a whole line: &lt;code&gt;U&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Redo the commands: &lt;code&gt;CTRL-r&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;3-put-and-replace&quot;&gt;3. Put and replace&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;3-1-put&quot;&gt;3.1 Put&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Put line below current line: &lt;code&gt;p&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Put line above current line: &lt;code&gt;P&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-2-replace&quot;&gt;3.2 Replace&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Replace current character to &#x27;x&#x27;: &lt;code&gt;rx&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Replace multiple characters: &lt;code&gt;R&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-3-change&quot;&gt;3.3 Change&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Remove the rest of word and activate insert mode: &lt;code&gt;ce&lt;&#x2F;code&gt; or &lt;code&gt;cw&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Remove the rest of line and activate insert mode: &lt;code&gt;c$&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;4-search-and-substitute&quot;&gt;4. Search and substitute&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;4-1-cursor-location-and-file-status&quot;&gt;4.1 Cursor location and file status&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Show your location in the file and the file status: &lt;code&gt;CTRL-g&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Move to the bottom of the file: &lt;code&gt;G&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Move to the start of the file: &lt;code&gt;gg&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Move to line 233: &lt;code&gt;233G&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-2-search&quot;&gt;4.2 Search&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Search in forward direction: &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Search in backward direction: &lt;code&gt;?&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Find next in the same direction: &lt;code&gt;n&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Find next in the opposite direction: &lt;code&gt;N&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;To go back to where you came from: &lt;code&gt;CTRL-o&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;To go forward: &lt;code&gt;CTRL-i&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-3-matching-parentheses-search&quot;&gt;4.3 Matching parentheses search&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Find a match of &#x27;)&#x27;, &#x27;]&#x27;, or &#x27;}&#x27;: &lt;code&gt;%&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-4-the-substitute-command&quot;&gt;4.4 The substitute command&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;To change the 1st occurrence of the word in the line: &lt;code&gt;:s&#x2F;&amp;lt;old&amp;gt;&#x2F;&amp;lt;new&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;To change all the occurrence of the word in the line: &lt;code&gt;:s&#x2F;&amp;lt;old&amp;gt;&#x2F;&amp;lt;new&amp;gt;&#x2F;g&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;To change all the occurrence of the word between line #1 and #2: &lt;code&gt;:#1,#2s&#x2F;&amp;lt;old&amp;gt;&#x2F;&amp;lt;new&amp;gt;&#x2F;g&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;To change every occurence of the word in the whole file: &lt;code&gt;:%s&#x2F;&amp;lt;old&amp;gt;&#x2F;&amp;lt;new&amp;gt;&#x2F;g&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;To change every occurence of the word in the whole file with a prompt: &lt;code&gt;:%s&#x2F;&amp;lt;old&amp;gt;&#x2F;&amp;lt;new&amp;gt;&#x2F;gc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;5-external&quot;&gt;5. External&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;5-1-how-to-execute-an-external-command&quot;&gt;5.1 How to execute an external command&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Execute an external command: &lt;code&gt;:!&amp;lt;cmd&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-2-write-to-another-file&quot;&gt;5.2 Write to another file&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Write the whole file to another file: &lt;code&gt;:w &amp;lt;file&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;v&lt;&#x2F;code&gt; to select the text you want to copy, then type &lt;code&gt;:&lt;&#x2F;code&gt; you will see &lt;code&gt;:&#x27;&amp;lt;,&#x27;&amp;gt;&lt;&#x2F;code&gt;, write to file: &lt;code&gt;:&#x27;&amp;lt;,&#x27;&amp;gt;w &amp;lt;file&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-3-insert-to-current-file&quot;&gt;5.3 Insert to current file&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Insert file to current file: &lt;code&gt;:r &amp;lt;file&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Insert from command line output: &lt;code&gt;:r !&amp;lt;cmd&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;6-new-line-and-copy&quot;&gt;6. New line and copy&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;6-1-open&quot;&gt;6.1 Open&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Open a line below the cursor: &lt;code&gt;o&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Open a line above the cursor: &lt;code&gt;O&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;6-2-copy&quot;&gt;6.2 Copy&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Copy one word: &lt;code&gt;yw&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Copy from cursor to the end of the line: &lt;code&gt;y$&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Copy the whole line: &lt;code&gt;yy&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;6-3-set-option&quot;&gt;6.3 Set option&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Ingore case: &lt;code&gt;:set ic&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Disable ignoring case: &lt;code&gt;:set noic&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&#x27;hlsearch&#x27;(highlight) and &#x27;incsearch&#x27;(show partial matches): &lt;code&gt;:set hls is&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;7-others&quot;&gt;7. Others&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;7-1-getting-help&quot;&gt;7.1 Getting help&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;&amp;lt;HELP&amp;gt;&lt;&#x2F;code&gt; or &lt;code&gt;&amp;lt;F1&amp;gt;&lt;&#x2F;code&gt; or type: &lt;code&gt;:help&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Get help for command: &lt;code&gt;:help &amp;lt;cmd&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;7-2-completion&quot;&gt;7.2 Completion&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;&amp;lt;TAB&amp;gt;&lt;&#x2F;code&gt; or &lt;code&gt;&amp;lt;CTRL-d&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;7-3-multiple-windows&quot;&gt;7.3 Multiple windows&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Jump to another window: &lt;code&gt;&amp;lt;CTRL-w&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>自杀式单身</title>
		<published>2019-01-19T00:00:00+00:00</published>
		<updated>2019-01-19T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/zi-sha-shi-dan-shen/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/zi-sha-shi-dan-shen/</id>
		<content type="html">&lt;p&gt;自杀式单身：形容一直单身又不主动扩展社交范围去认识新朋友，却每天幻想着能拥有爱情的行为。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;这说的可不就是我吗？每天都一副跟全世界分手了的样子，别说主动扩展社交范围去认识新朋友了，公司的同事都懒得去认识，甚至坐我附近的同事我都能认错人。下班了就是追剧、刷 Blog、看书，反正社交是不可能社交的，是动漫不好看还是游戏不好玩？再说了，社交有什么用啊，自己算算，天上掉下爱情的概率不就是 $\epsilon$ 吗？但是我积极社交能遇到一个对的人的概率大概也就几个 $\epsilon$ ，两者之间的差距基本是可以忽略的。嗯，我还留着一点数学分析的知识碎片（希望老师不要过来打我）。&lt;&#x2F;p&gt;
&lt;p&gt;想想上学那会儿，刚学会编程没多久，有老师讲到男女匹配的问题，给每个人一个分数，男生都会想去追那些高分的单身女生，而女生都会选择追求者里最分数最高的，那最后会稳定到一个什么状态呢？&lt;&#x2F;p&gt;
&lt;p&gt;这当然是最简单的一个版本了，我们可以加上很多其他条件。&lt;&#x2F;p&gt;
&lt;p&gt;首先，每个人眼中异性的分数不可能完全一致。其次，很多人的关系并不稳定，劈腿是常有的事情，有更好的选择，很多人都会忍不住躁动起来。另外，每个人的分数也不是一成不变的，很多人会慢慢成长，当然也有很多人慢慢堕落。&lt;&#x2F;p&gt;
&lt;p&gt;作为仿真小能手，周末无聊就开始写代码了。加了这些乱七八糟条件之后，果然复杂了很多，5 对男女就能跑很久很久出不来结果……因为很难达到一个稳定状态，大部分人总是换了又换。只好把人的忠诚度和复合几率考虑进去，把各种参数一波乱调，最后终于勉强能跑了。&lt;&#x2F;p&gt;
&lt;p&gt;结果估计很多人都知道，主动出击的男生确实占优势，通常最后都能稳定跟一个高分女生在一起，而被动的女生就只好委屈自己了。&lt;&#x2F;p&gt;
&lt;p&gt;这个实验有太多人做过，结论也没有多惊人。现实世界的情况要复杂得多，很难说这个结论就一定成立。反正我自己没有放在心上，就算主动与否真的这么重要，我身边也没有值得我主动的目标，那还不是白扯。&lt;&#x2F;p&gt;
&lt;p&gt;毫无悬念，像我这种守株待兔式的人，单身是在正常不过了。&lt;&#x2F;p&gt;
&lt;p&gt;那么，问题来了 ，如果我主动去扩展社交范围，认识新朋友，是否就能遇到对的人呢？&lt;&#x2F;p&gt;
&lt;p&gt;呃，你先等等，要认识新朋友啊。想到这句话社交恐惧症马上就犯了，我只想马上把自己关在屋子里，要是冬天就钻进被子里，捧起手机看看网友的搞笑日常……&lt;&#x2F;p&gt;
&lt;p&gt;快别废话了，你真以为我不知道自己为什么单身吗？要不就是我改变不了的，要不就是我不愿改变的，死局。&lt;&#x2F;p&gt;
&lt;p&gt;所以，你知道社恐患者小心翼翼去接触陌生人，想和陌生人交朋友是下了多大的决心吗？他们都被孤独折磨成什么样子了！明明一点经验都没有，还总要担心自己什么地方做错了，什么话说错了，是不是没话说的场面太尴尬。如临深渊，如履薄冰。可结果呢，也就给对方留下一个搞不清楚这个人在干嘛的印象，自己则是满满的忧虑，生活更艰难了。&lt;&#x2F;p&gt;
&lt;p&gt;这也难怪会产生自杀式单身。&lt;&#x2F;p&gt;
&lt;p&gt;也许有人要说这就是恶性循环了，只要积极开朗一点，慢慢就懂得如何与人相处了，之后一点都不麻烦。&lt;&#x2F;p&gt;
&lt;p&gt;还真是站着说话不腰疼。&lt;&#x2F;p&gt;
&lt;p&gt;有这种症状的人，多数都是内心敏感的。别说是被拒绝了，就算是有被嫌弃的风险，他们也绝不会主动的，更别说死缠烂打这种招数了，绝对用不出来。有时候你会听到他们说，如果真的遇到合适的，别说死缠烂打，就是绑着也要追到。但现实呢？永远都处在怀疑、焦虑、犹豫中，迈出小小一步就已经不敢再前进了，对方若是没有回应，那绝对是想扭头就跑了。&lt;&#x2F;p&gt;
&lt;p&gt;难道真的无解了吗？&lt;&#x2F;p&gt;
&lt;p&gt;是也不是。为了能最大化最终收益，只好逼着自己，小心翼翼去扩大社交范围，期待能遇到那个合适的人。当然，内心也要清楚，即使自己真的积极主动了，这个概率可能已经比之前扩大了几百倍几千倍，但依旧是个很小的概率。这一切，可能就是为了想象中的美好爱情，很可能自己从来没在现实中见到过。&lt;&#x2F;p&gt;
&lt;p&gt;值得吗？&lt;&#x2F;p&gt;
&lt;p&gt;每个人心里都有自己的答案。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2018 回顾</title>
		<published>2018-12-25T00:00:00+00:00</published>
		<updated>2018-12-25T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/2018review/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/2018review/</id>
		<content type="html">&lt;p&gt;很快就到年末了，对比之前的 2018 年的目标，来总结一下吧。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;zhuang-tai&quot;&gt;状态&lt;&#x2F;h3&gt;
&lt;p&gt;现在更懒了，每天都睡到 8 点，不知道下一次总结的时候是不是就到 9 点了……虽然已经不是学生了，上班时间也很自由，但是起这么晚实在没什么好的。&lt;&#x2F;p&gt;
&lt;p&gt;没怎么看书了，技术类的大概看了几本，人文社科的就很少了，确实应该去图书馆看看了，而且也该看外文书籍了。&lt;&#x2F;p&gt;
&lt;p&gt;锻炼更少了，可能半个月打一次球吧，平时偶尔活动下筋骨。膝盖也快不行了，感觉可以开始看看轮椅了。&lt;&#x2F;p&gt;
&lt;p&gt;现在倒也不怎么宅了，周末假期开始往公司跑了，虽然不能保证高效学习，但至少开始学一点东西了。偶尔有需要也会跑出去看看，商场景点什么的完全就是打卡而已，对这些东西并没有什么兴趣。也开始学着拍照修图了，虽然只是简单应用别人写好的算法而已。&lt;&#x2F;p&gt;
&lt;p&gt;MOOC 刷了一点，无业状态的时候，就当是梳理知识了吧，确实作用越来越小了。Kaggle 实在懒得刷，工作上的事情都忙不过来，哪有心思看这些。&lt;&#x2F;p&gt;
&lt;p&gt;平均一个月一篇博客算是坚持写吗？就算是吧，明年继续。虽然也没什么技术相关的。&lt;&#x2F;p&gt;
&lt;p&gt;开源的事情，做了一点点，今年给别人提过 PR，提过 issue，虽然都没什么大不了的东西，总算是开了个头了。自己也开始写一些渣渣项目玩，还是很开心的，希望自己能有所长进吧。&lt;&#x2F;p&gt;
&lt;p&gt;Rust 没怎么写，抄写了一些代码，轮到自己就不知道写什么了。改改别人简单的东西还是没问题的，希望自己能做点什么像样的东西出来吧，完全没有什么 idea，要么就是 idea 有点大自己胆怯了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-xie-shi&quot;&gt;一些事&lt;&#x2F;h3&gt;
&lt;p&gt;在北京一直都很难受，忍了好久好久了，今年算是彻底忍不下去了。我也不想连呼吸的自由都没有，我也不想租房子都睡不安稳，我也不想每天在路上拥挤，谁喜欢谁做去吧，人活着虽然免不了受罪，但何必自己去找罪受，觉得不合适就走人吧，这环境不是我这种无名之辈能改变的，况且我除了离开什么也做不了。&lt;&#x2F;p&gt;
&lt;p&gt;在家待了小半年，其实也没做什么，原本想的一些事情也都尝试了一点。翻译是做不来的，文学作品太多词汇和句式没见过了；接私活也不喜欢，况且没什么人脉，能看到的都是不知道什么的垃圾项目；自己也不知道能做什么，也没多少资源来用；远程的工作也试了下，水平差的又不想去，水平高的也轮不到我。那段日子真的很迷茫，虽然前一段日子更是绝望，就这样宅了几个月，代码没怎么写，准备了点面试的东西，匆匆找了份国外的工作，也没怎么要求，就当是逃难了。就这样一个人跑到了坡县，陌生的城市，略熟悉的文化，还行的空气，好像很严的法律，相对落后的技术，还有对我来说基本没可能的移民政策。&lt;&#x2F;p&gt;
&lt;p&gt;这下子自己真的没兴趣上学了，反正又没有自己特别感兴趣的方向，何必为了一张文凭受那份罪。之前想读一半是因为想找个门路出去看看，一半是担心自己学历太低，拿不出手。现在仔细想想，回去读书的风险太大了，万一碰到自己不喜欢的环境，跑路的成本可比换工作大多了。&lt;&#x2F;p&gt;
&lt;p&gt;坡县并没有想象中那么好，路上也会遇到有人抽烟吐痰，并不是真的没人乱扔东西了，不过整体来看已经比国内好很多了，起码空气和治安是可以的。这边消费水平实在是高，而且网购确实还处于初级阶段，物流成本也很高，从国内邮过来也不算便宜，真的是买不起东西了。再加上本来就处于一种漂泊状态，随时准备收拾行李滚蛋，也不会有买大件物品的想法。没有四季就是衣服不愁了，暂时没觉得太无聊。炎热潮湿的空气也慢慢适应了，一开始还全身生了一次不知道是什么的红斑，后来才知道是登革热，十分后怕，早知道肯定立马请假跑医院了，还真是捡回一条命。这边健身的资源还行，但是不太敢随便打球了，膝盖受不了，而且之前在脸上缝的五针也是留下了深刻印象，还是保命要紧。大部分地方都还没去转过，没多少兴趣，什么时候无聊了再去溜达吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2019&quot;&gt;2019&lt;&#x2F;h3&gt;
&lt;p&gt;TODO 就不用变了，每年只需要更新年份就行……果然每年都做不到，每年都继续做。&lt;&#x2F;p&gt;
&lt;p&gt;说真的，写博客还是不错的，能记录一些东西，回过头去看的时候，多少有点感触。&lt;&#x2F;p&gt;
&lt;p&gt;前些日子跟朋友聊起来，却发现很久以前的东西大部分都找不到了，只留下几封 Email，然后就去翻看了自己写过的所有 Email，果然还是这东西存的住啊，什么书信、短信、聊天记录基本上都很难找到了。看着很多年前自己写的那些东西，有点想笑，不过也是某个时期的自己，也许还是现在自己的某些角度吧，偶尔翻出来看看也是挺有意思的，以后有什么事就给自己写一封 Email 记录一下吧。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>填坑一个 Java 项目</title>
		<published>2018-12-08T00:00:00+00:00</published>
		<updated>2018-12-08T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/refactor-java-project/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/refactor-java-project/</id>
		<content type="html">&lt;p&gt;重构是不可能重构的，这辈子都不可能重构的……&lt;&#x2F;p&gt;
&lt;p&gt;好吧，我自己写的垃圾代码我自己重构……&lt;&#x2F;p&gt;
&lt;p&gt;什么！？你要我去修改别人的垃圾代码？！&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;不得不说，改别人写得非常非常烂的代码真的是一种极大的折磨，更残酷的是要用一种自己没怎么接触过的语言来写，更更残酷的是这种语言的包管理也非常混乱。&lt;&#x2F;p&gt;
&lt;p&gt;上一次接触 Java 还是在我大学的时候，不过也只写过一些零碎的代码，没有做过像模像样的工程。这么久过去了，突然接手一个 N 年前的 Java 项目，代码一团糟，完全就是外行写的，真的很头疼。项目里面各种冗余文件，Jar 包也有一堆，只能看出来用的 Eclipse 这种古老的工具，具体编译方式不详。&lt;&#x2F;p&gt;
&lt;p&gt;鉴于 gRPC 的 demo 是用 Gradle 来管理的，顺便就学了一下。老实说，仅仅 gRPC 部分还好，虽然文档不怎么样，很多细节完全不谈，多数地方靠自己猜测……难就难在怎么玩转 Java 项目，解决各种编译的依赖问题。&lt;&#x2F;p&gt;
&lt;p&gt;这个时候就只能靠搜索引擎来解决了。Java 的出错栈看的我精神恍惚，定位问题很困难，多数时候只能依靠自己以往的工程经验来分析。一个 &lt;code&gt;build.gradle&lt;&#x2F;code&gt; 文件折磨了好久，Gradle 也有各种版本的配置方式，搞在一起就更混乱了，时间上也很紧迫，只能暴力测试了。&lt;&#x2F;p&gt;
&lt;p&gt;后面修改代码的时候，才发现不知道他们怎么运行这个项目的，问了一下原来是编译成 Jar 包然后放到指定目录跑……好吧，我又去查了下 Gradle 怎么把一堆依赖编译进一个 Jar 包里面。修改完代码后，才发现还得把项目原有的依赖也搞进来，这下不得不好好了解下 Gradle 了，没法太偷懒。&lt;&#x2F;p&gt;
&lt;p&gt;最后花了一周的时间来做，确实很慢，不过要不断试错确实也就这样了。&lt;&#x2F;p&gt;
&lt;p&gt;总结一下，面对这种陌生的语言和包管理方式，在严重依赖试错的情况下，一定要保持清醒，从上至下进行分析。就算反馈很模糊，也能从整体逻辑上定位问题。&lt;&#x2F;p&gt;
&lt;p&gt;另外，这种毫无规范、设计可言的代码，真的非常恶心。原来真的有人能写一个几百行的函数出来，即使里面有很大一部分是重复代码也不拿出来写个函数；原来真的有人能从下标 0 写到下标 31；原来真的有人分不清 HashSet 和 HashTable；原来真的有人能不依赖循环一行一行添加数据……&lt;&#x2F;p&gt;
&lt;p&gt;为了防止这种情况再次发生，设置一定的代码规范并且依靠 CI 来自动检查是很有必要的。可以设置一个过渡期，这之后都要严格执行，否则代码维护起来成本太高了。&lt;&#x2F;p&gt;
&lt;p&gt;另外，要我说就是面试卡的太松了。再逼我，以后直接全上 Rust，你们改吧，没有坚实的 CS 基础我看你怎么写 Rust。我就不信能写 Rust 的人还会写出这种垃圾代码。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>NLP with Deep Learning</title>
		<published>2018-10-05T00:00:00+00:00</published>
		<updated>2018-10-05T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/deeplearningnlp/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/deeplearningnlp/</id>
		<content type="html">&lt;p&gt;Notes of &lt;a href=&quot;http:&#x2F;&#x2F;web.stanford.edu&#x2F;class&#x2F;cs224n&#x2F;&quot;&gt;CS224n: Natural Language Processing with Deep Learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;word-embedding&quot;&gt;Word Embedding&lt;&#x2F;h2&gt;
&lt;p&gt;$J(\theta)=-\frac{1}{T}\Sigma^T_{t=1}\Sigma_{-m\le j \le m}\log P(w_{t+j}\vert w_t;\theta)$&lt;&#x2F;p&gt;
&lt;p&gt;We will use 2 vectors per word $w$ to calculate $P(w_{t+j}\vert w_t;\theta)$&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$v_w$ when $w$ is a center word&lt;&#x2F;li&gt;
&lt;li&gt;$u_w$ when $w​$ is a context word&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$P(o\vert c)=\frac{\exp(u_o^{\top}v_c)}{\Sigma_{w\in V}\exp(u^{\top}_wv_c)}$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why two vectors?&lt;&#x2F;p&gt;
&lt;p&gt;Easier optimization. Average both at the end.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Two model variants:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Skip-grams(SG)&lt;&#x2F;p&gt;
&lt;p&gt;Predict context words (position independent) given center word.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Continuous Bag of Words(CBOW)&lt;&#x2F;p&gt;
&lt;p&gt;Predict center word from (bag of) context words.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Additional efficiency in training: negative sampling.&lt;&#x2F;p&gt;
&lt;p&gt;$arg\max J(\theta)=\frac 1 T\Sigma^T_{t=1}J_t(\theta)$&lt;&#x2F;p&gt;
&lt;p&gt;$J_t(\theta)=\log \sigma(u_o^{\top}v_c)+\Sigma_{i=1}^k \mathbb{E}_{j\sim P(w)}[\log \sigma(-u^{\top}_jv_c)]$&lt;&#x2F;p&gt;
&lt;p&gt;$\sigma(x) = \frac 1 {1+e^{-x}}$&lt;&#x2F;p&gt;
&lt;p&gt;$J_{neg-sample}(o, v_c, U)=-\log (\sigma(u_o^{\top}v_c))-\Sigma ^K_{k=1}\log(\sigma(-u^{\top}_kv_c))$&lt;&#x2F;p&gt;
&lt;p&gt;$P(w)=U(w)^{\frac 3 4}&#x2F;Z$&lt;&#x2F;p&gt;
&lt;p&gt;Another way: co-occurrence matrix X (full document and SVD) (LSA, HAL)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;stopwords
&lt;ul&gt;
&lt;li&gt;min(X, t)&lt;&#x2F;li&gt;
&lt;li&gt;ignore them all&lt;&#x2F;li&gt;
&lt;li&gt;use Pearson correlations instead of counts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;computational cost of SVD ($O(mn^2)$)&lt;&#x2F;li&gt;
&lt;li&gt;hard to incorporate new words&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Combining both: GloVe  $J(\theta)=\frac 1 2 \Sigma^W_{i,j=1}f(P_{ij})(u_i^{\top}v_j-\log P_{ij})^2$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;fast training&lt;&#x2F;li&gt;
&lt;li&gt;scalable to huge corpora&lt;&#x2F;li&gt;
&lt;li&gt;good performance even with small corpus and small vectors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$X_{fianl}=U+V$&lt;&#x2F;p&gt;
&lt;p&gt;Word Vector Analogies: $d=\arg\displaystyle\max_i\frac{(x_b-x_a+x_c)^{\top}x_i}{\lVert x_b-x_a+x_c \rVert}$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;backpropagation&quot;&gt;Backpropagation&lt;&#x2F;h2&gt;
&lt;p&gt;$\frac{\partial}{\partial x}(Wx+b)=W$&lt;&#x2F;p&gt;
&lt;p&gt;$\frac{\partial}{\partial b}(Wx+b)=I$&lt;&#x2F;p&gt;
&lt;p&gt;$\frac{\partial}{\partial u}(u^{\top h})=h^{\top}$&lt;&#x2F;p&gt;
&lt;p&gt;$\frac{\partial}{\partial z}(f(z))=diag(f&#x27;(z))$&lt;&#x2F;p&gt;
&lt;p&gt;[downstream gradient] = [upstream gradient] * [local gradient]&lt;&#x2F;p&gt;
&lt;p&gt;Forward: compute result of operation and save intermediate values&lt;&#x2F;p&gt;
&lt;p&gt;Backward: apply chain rule to compute gradient&lt;&#x2F;p&gt;
&lt;h2 id=&quot;classification&quot;&gt;Classification&lt;&#x2F;h2&gt;
&lt;p&gt;Cross Entropy(one-hot target): $H(p,q)=-\Sigma^C_{c=1}p(c)\log q(c)$&lt;&#x2F;p&gt;
&lt;p&gt;Kullback-Leibler(KL) divergence: $H(p, q)=H(p)+D_{KL}(p\Vert q)$ where $D_{KL}(p\Vert q)=\Sigma^C_{c=1}p(c)\log\frac{p(c)}{q(c)}$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;What happens when we retrain the word vectors?&lt;&#x2F;p&gt;
&lt;p&gt;Those that are in the training data move around and others stay. Retrain the word vector if you have large dataset.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;overfitting&quot;&gt;Overfitting&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Dropout&lt;&#x2F;li&gt;
&lt;li&gt;Regularization&lt;&#x2F;li&gt;
&lt;li&gt;Reduce network depth&#x2F;size&lt;&#x2F;li&gt;
&lt;li&gt;Reduce input feature dimensionality&lt;&#x2F;li&gt;
&lt;li&gt;Early stopping&lt;&#x2F;li&gt;
&lt;li&gt;Max-Norm, Dropconnect, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;underfitting&quot;&gt;Underfitting&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Increase model complexity&#x2F;size&lt;&#x2F;li&gt;
&lt;li&gt;Decreasing regularization effects&lt;&#x2F;li&gt;
&lt;li&gt;Reducing Dropout probability&lt;&#x2F;li&gt;
&lt;li&gt;Ensemble&lt;&#x2F;li&gt;
&lt;li&gt;Data Preprocessing&lt;&#x2F;li&gt;
&lt;li&gt;Batch Normalization&lt;&#x2F;li&gt;
&lt;li&gt;Curriculum Learning&lt;&#x2F;li&gt;
&lt;li&gt;Data Augmentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;named-entity-recognition&quot;&gt;Named Entity Recognition&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Person&lt;&#x2F;li&gt;
&lt;li&gt;Location&lt;&#x2F;li&gt;
&lt;li&gt;Organizaiton&lt;&#x2F;li&gt;
&lt;li&gt;None&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;dependency-parsing&quot;&gt;Dependency Parsing&lt;&#x2F;h2&gt;
&lt;p&gt;Constituency = phrase structure grammar = context-free grammars (CFGs)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bilexical affinities&lt;&#x2F;li&gt;
&lt;li&gt;Dependency distance&lt;&#x2F;li&gt;
&lt;li&gt;Intervening material&lt;&#x2F;li&gt;
&lt;li&gt;Valency of heads&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Methods:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic programming&lt;&#x2F;li&gt;
&lt;li&gt;Graph algorithms&lt;&#x2F;li&gt;
&lt;li&gt;Constraint Satisfaction&lt;&#x2F;li&gt;
&lt;li&gt;Greedy Transition-based parsing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shift-reduce-parser&quot;&gt;Shift-reduce parser&lt;&#x2F;h3&gt;
&lt;p&gt;(words in buffer, words in stack, set of parsed dependencies, set of actions)&lt;&#x2F;p&gt;
&lt;p&gt;Handling non-projectivity:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Declare defeat&lt;&#x2F;li&gt;
&lt;li&gt;Use post-processor&lt;&#x2F;li&gt;
&lt;li&gt;Add extra transitions&lt;&#x2F;li&gt;
&lt;li&gt;Use a special parsing mechanism&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;neural-dependency-parsing&quot;&gt;Neural Dependency Parsing&lt;&#x2F;h3&gt;
&lt;p&gt;embedded vector representations&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Vector representation&lt;&#x2F;li&gt;
&lt;li&gt;POS tags&lt;&#x2F;li&gt;
&lt;li&gt;Arc labels&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Model: $y=softmax(U\circ ReLU(Wx+b_1)+ b_2)$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;language-model&quot;&gt;Language Model&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;How to learn a language model?&lt;&#x2F;p&gt;
&lt;p&gt;Learn a n-gram Language Model.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;$P(x^{(t+1)}\vert x^{(t)},\dots,x^{(1)})=P(x^{(t+1)} \vert x^{(t)},\dots,x^{(t-n+2)})=\frac{P(x^{(t+1)}, x^{(t)},\dots,x^{(t-n+2)})}{P(x^{(t)}, x^{(t-1)},\dots,x^{(t-n+2)})}$&lt;&#x2F;p&gt;
&lt;p&gt;Problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Sparsify: need smoothing and backoff&lt;&#x2F;li&gt;
&lt;li&gt;Model size: $O(\exp(n))$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Neural Language Model: $y=softmax(U\circ f(We+b_1)+b_2)$&lt;&#x2F;p&gt;
&lt;p&gt;Improvements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No sparsity problem&lt;&#x2F;li&gt;
&lt;li&gt;Model size is $O(n)$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;fixed window is too small&lt;&#x2F;li&gt;
&lt;li&gt;enlarging window enlarges $W$&lt;&#x2F;li&gt;
&lt;li&gt;window can never be large enough&lt;&#x2F;li&gt;
&lt;li&gt;do not share weights across the window&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;RNN Language Model: $y=softmax(U\circ \sigma(W_hh^{(t-1)}+W_ee^{(t)}+b_1)+b_2)$&lt;&#x2F;p&gt;
&lt;p&gt;Evaluation metric: perplexity $PP=\Pi^T_{t=1}(\frac1{\Sigma^{\vert V\vert}_{j=1}y_j^{(t)}\cdot \hat{y}_j^{(t)}})^{1&#x2F;T}$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recurrent-neural-networks-rnn&quot;&gt;Recurrent Neural Networks (RNN)&lt;&#x2F;h2&gt;
&lt;p&gt;Core idea: &lt;strong&gt;Apple the same weights repeatedly&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Adcantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Can process any length input&lt;&#x2F;li&gt;
&lt;li&gt;Model size doesn&#x27;t increase for longer input&lt;&#x2F;li&gt;
&lt;li&gt;Step $t$ can use information from many steps back&lt;&#x2F;li&gt;
&lt;li&gt;Weights are shared across timesteps&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Disadvantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Slow, hard to parallel&lt;&#x2F;li&gt;
&lt;li&gt;In practice, difficult to access information from many steps back&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Usage:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;part-of-speech tagging&lt;&#x2F;li&gt;
&lt;li&gt;named entity recognition&lt;&#x2F;li&gt;
&lt;li&gt;sentiment analysis (take element-wise max or mean of all hidden states are usually better than final hidden state)&lt;&#x2F;li&gt;
&lt;li&gt;generate text by repeated sampling (speech recoginition, machine translation, summarization)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$\hat{y}^{(t)}=softmax(Uh^{(t)}+b_2)\in \Bbb{R}^{\vert V\vert}$&lt;&#x2F;p&gt;
&lt;p&gt;$h^{(t)}=\sigma(W_hh^{(t-1)}+W_ee^{(t)}+b_1)$&lt;&#x2F;p&gt;
&lt;p&gt;$z^{(t)}=W_hh^{(t-1)}+W_ee^{(t)}+b_1$&lt;&#x2F;p&gt;
&lt;p&gt;$\theta^{(t)}=Uh^{(t)}+b_2$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;What&#x27;s the derivative $\frac{\partial J^{(t)}}{\partial W_h}$ ? Leave as a chain rule.&lt;&#x2F;p&gt;
&lt;p&gt;Recall $W_h$ appears at every time step. Caculate the sum of gradients w.r.t. each time it appears.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;$\frac{\partial h^{(t)}}{\partial h^{(t-1)}}$ can lead to vanishing or exploding gradients.&lt;&#x2F;p&gt;
&lt;p&gt;$\lVert \frac{\partial h_j}{\partial h_{j-1}}\rVert\le\rVert W^T\rVert\lVert diag[f&#x27;(h_{j-1})]\rVert\le\beta_W\beta_h$&lt;&#x2F;p&gt;
&lt;p&gt;$\lVert \frac{\partial h_t}{\partial h_k}\rVert=\lVert \Pi^t_{j=k+1}\frac{\partial h_j}{\partial h_{j-1}}\rVert\le(\beta_W\beta_h)^{t-k}$&lt;&#x2F;p&gt;
&lt;p&gt;Gradient problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Backprop in RNNs have a recursive gradient call for hidden layer&lt;&#x2F;li&gt;
&lt;li&gt;Magnitude of gradients of typical activation functions (sigmoid, relu) lie between 0 and 1. Also depends on repeated multiplicaitons of $W$ matrix&lt;&#x2F;li&gt;
&lt;li&gt;If gradient magnitude is large&#x2F;small, increasing timesteps increases&#x2F;decreases the final magnitude&lt;&#x2F;li&gt;
&lt;li&gt;RNNs fail to learn long term dependencies&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;How to solve:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;exploding gradients: gradient clipping(update only when $g\ge threashold$ )&lt;&#x2F;li&gt;
&lt;li&gt;vanishing gradients: GRUs or LSTMs or Init + ReLUs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Add L2-norm will help with vanishing gradients?&lt;&#x2F;p&gt;
&lt;p&gt;False. This will put the weights toward 0, which can make it worse.&lt;&#x2F;p&gt;
&lt;p&gt;Add more layers will solve vanishing gradient?&lt;&#x2F;p&gt;
&lt;p&gt;False. This will increase the chance of vanishing gradient problems.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;gated-recurrent-units-gru&quot;&gt;Gated Recurrent Units (GRU)&lt;&#x2F;h3&gt;
&lt;p&gt;$z_t=\sigma(W^{(z)}x_t+U^{(z)}h_{t-1})$&lt;&#x2F;p&gt;
&lt;p&gt;$r_t=\sigma(W^{(r)}x_t+U^{(r)}h_{t-1})$&lt;&#x2F;p&gt;
&lt;p&gt;$\tilde{h}_{t} = \tanh(Wx_t + r_t \circ Uh_{t-1})$&lt;&#x2F;p&gt;
&lt;p&gt;$h_t=z_t\circ h_{t-1}+(1-z_t)\circ \tilde{h}_t$&lt;&#x2F;p&gt;
&lt;p&gt;Intuition:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;high $r_t$ $\implies$ short-term dependencies&lt;&#x2F;li&gt;
&lt;li&gt;high $z_t$ $\implies$ long-term dependencies(solves vanishing gradients problem)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If the update gate $z_t$ is close to 1, the net doesn&#x27;t update its current state significantly?&lt;&#x2F;p&gt;
&lt;p&gt;True. In this case, $h_t\approx \tilde{h}_t$ .&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;long-short-term-memories-lstm&quot;&gt;Long-Short-Term-Memories (LSTM)&lt;&#x2F;h3&gt;
&lt;p&gt;$i_t=\sigma(W^{(i)}x_t+U^{(i)}h_{t-1})$&lt;&#x2F;p&gt;
&lt;p&gt;$f_t=\sigma(W^{(f)}x_t+U^{(f)}h_{t-1})$&lt;&#x2F;p&gt;
&lt;p&gt;$o_t=\sigma(W^{(o)}x_t+U^{(o)}h_{t-1})$&lt;&#x2F;p&gt;
&lt;p&gt;$\tilde{c}_{t}=\tanh(W^{(c)}x_t+U^{(c)}h_{t-1})$&lt;&#x2F;p&gt;
&lt;p&gt;$c_t=f_t\circ c_{t-1}+i_t\circ \tilde{c}_t$&lt;&#x2F;p&gt;
&lt;p&gt;$h_t=o_t\circ \tanh(c_t)$&lt;&#x2F;p&gt;
&lt;p&gt;Backprop from $c_t$ to $c_{t-1}$ only elementwise multiplication by $f_t$. No longer only depends on $\frac{dh_t}{dh_{t-1}}$.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The entries of $f_t, i_t, o_t$ are non-negative?&lt;&#x2F;p&gt;
&lt;p&gt;True. The range of sigmoid is (0, 1).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;bidirectional-rnns&quot;&gt;Bidirectional RNNs&lt;&#x2F;h3&gt;
&lt;p&gt;$y_t=g(U[\overrightarrow{h}_t;\overleftarrow{h}_t]+c)$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;training&quot;&gt;Training&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Initialize recurrent matrices to be orthogonal&lt;&#x2F;li&gt;
&lt;li&gt;Initialize other matrices with a sensible(small) scale&lt;&#x2F;li&gt;
&lt;li&gt;Initialize forget gate bias to 1: default to remember&lt;&#x2F;li&gt;
&lt;li&gt;Use adaptive learning rate algorithms: Adam, AdaDelta, ...&lt;&#x2F;li&gt;
&lt;li&gt;Clip the norm of the gradient&lt;&#x2F;li&gt;
&lt;li&gt;Either only dropout vertically or learn how to do it right&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;machine-translation&quot;&gt;Machine Translation&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$P(x\vert y)$ need large amount of parallel data&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;$P(x,a\vert y)$ where $a$ is the alignment&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;$P(y)$ refers to a language model&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Statistical Machine Translation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Systems have many separately-designed subcomponents&lt;&#x2F;li&gt;
&lt;li&gt;Lots of feature engineering&lt;&#x2F;li&gt;
&lt;li&gt;Require compiling and maintaining extra resources&lt;&#x2F;li&gt;
&lt;li&gt;Lots of human effort to maintain&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Neural Machine Translation (Seq2Seq)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Encoder RNN produces an encoding of the source sentence and provides inital hidden state for Decoder RNN&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Decoder RNN is a langauge model that generates target sentence conditioned on encoding&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;$P(y\vert x)=P(y_1\vert x)P(y_2\vert y1, x)P(y_3\vert y_1,y_2,x)\dots P(y_T\vert y_1,\dots,y_{T-1},x)$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use beam search decoding (on each step of decoder, keep track of the k most probable partial translations)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Better performance (more fluent, better use of context, better use of phrase similarities)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A single neural network to be optimized end-to-end&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Requires much less human engineering effort&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Less interpretable, hard to debug, difficult to control&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Use BLEU(Bilingual Evaluation Understudy) to evaluate: compares machine tranlation to human translation and computes a similarity score based on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;n-gram precision (usually up to 3 or 4)&lt;&#x2F;li&gt;
&lt;li&gt;penalty for too short tranlations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;out-of-vocabulary words&lt;&#x2F;li&gt;
&lt;li&gt;domain mismatch&lt;&#x2F;li&gt;
&lt;li&gt;low-resource language pairs&lt;&#x2F;li&gt;
&lt;li&gt;maintaining context over longer text&lt;&#x2F;li&gt;
&lt;li&gt;using common sense is still hard&lt;&#x2F;li&gt;
&lt;li&gt;NMT picks up biases in training data&lt;&#x2F;li&gt;
&lt;li&gt;uninterpretable systems do strange things&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Improve: use attention&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;solves the bottleneck problem&lt;&#x2F;li&gt;
&lt;li&gt;helps with vanishing gradient problem&lt;&#x2F;li&gt;
&lt;li&gt;provides some interpretability: alignment for free&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Seq2Seq model:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;summarization&lt;&#x2F;li&gt;
&lt;li&gt;dialogue&lt;&#x2F;li&gt;
&lt;li&gt;parsing&lt;&#x2F;li&gt;
&lt;li&gt;code generation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Large-vocab NMT:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;each time train on a smaller vocab $V&#x27; \ll V$ &lt;&#x2F;li&gt;
&lt;li&gt;test on K most frequent words: unigram prob.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Byte Pair Encoding: most frequent ngram pairs $\to$ a new ngram&lt;&#x2F;p&gt;
&lt;p&gt;Hybrid NMT: mostly at the word level, only go to the character level when needed&lt;&#x2F;p&gt;
&lt;h2 id=&quot;quasi-recurrent-neural-network-qrnn&quot;&gt;Quasi-Recurrent Neural Network (QRNN)&lt;&#x2F;h2&gt;
&lt;p&gt;Take the best and parallelizable parts of RNNs and CNNs.&lt;&#x2F;p&gt;
&lt;p&gt;Parallelism computation across time:&lt;&#x2F;p&gt;
&lt;p&gt;$Z=\tanh(W_z*X)$&lt;&#x2F;p&gt;
&lt;p&gt;$F=\sigma(W_f*X)$&lt;&#x2F;p&gt;
&lt;p&gt;$O=\sigma(W_o*X)$&lt;&#x2F;p&gt;
&lt;p&gt;Element-wise gated recurrence for parallelism across channels:&lt;&#x2F;p&gt;
&lt;p&gt;$h_t=f_t\odot h_{t-1}+(1-f_t)\odot z_t$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;attention&quot;&gt;Attention&lt;&#x2F;h2&gt;
&lt;p&gt;Attention scores: $e^t=[s_t^Th_1,\dots,s_t^Th_N]\in\Bbb{R}^N$&lt;&#x2F;p&gt;
&lt;p&gt;$\alpha^t=softmax(e^t)\in\Bbb{R}^N$&lt;&#x2F;p&gt;
&lt;p&gt;$a_t=\Sigma^N_{i=1}\alpha^t_ih_i\in\Bbb{R}^h$&lt;&#x2F;p&gt;
&lt;p&gt;Compute $e\in\Bbb{R}^N$ from $h_1,\dots,h_N\in\Bbb{R}^{d_1}$ and $s\in\Bbb{R}^{d_2}$:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Basic dot-product attention: $e_i=s^{\top}h_i\in\Bbb{R}$&lt;&#x2F;li&gt;
&lt;li&gt;Multiplicative attention: $e_i=s^{\top}Wh_i\in\Bbb{R}$&lt;&#x2F;li&gt;
&lt;li&gt;Additive attention: $e_i=v^{\top}\tanh(W_1h_i+W_2s)\in\Bbb{R}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Applications:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pointing to words for language modeling: $p(y_i\lvert x_i)=g\thinspace p_{vocab}(y_i\lvert x_i)+(1-g)p_{ptr}(y_i\lvert x_i)$&lt;&#x2F;li&gt;
&lt;li&gt;Intra-Decoder attention for summarization&lt;&#x2F;li&gt;
&lt;li&gt;Machine Translation with Seq2Seq&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Encoder attention:&lt;&#x2F;p&gt;
&lt;p&gt;$e_{ti}=f(h_t^d,h_i^e)=h_t^{d^{\top}}W^e_{attn}h_i^e$&lt;&#x2F;p&gt;
&lt;p&gt;$e&#x27;_{ti}=\begin{cases} \exp(e_ti) &amp;amp; \text{if}\space t=1\\frac{\exp(e_{ti})}{\Sigma_{j=1}^{t-1}\exp(e_{ji})} &amp;amp; \text{otherwise} \end{cases}$&lt;&#x2F;p&gt;
&lt;p&gt;$\alpha^e_{ti}=\frac{e&#x27;_{ti}}{\Sigma^n_{j=1}e&#x27;_{tj}}$&lt;&#x2F;p&gt;
&lt;p&gt;$c_t^e=\Sigma^n_{i=1}\alpha^e_{ti}h^e_i$&lt;&#x2F;p&gt;
&lt;p&gt;Self-attention on decoder:&lt;&#x2F;p&gt;
&lt;p&gt;$e^d_{tt&#x27;}=h^{d\top}_tW^d_{attn}h^d_{t&#x27;}$&lt;&#x2F;p&gt;
&lt;p&gt;$\alpha^d_{tt&#x27;}=\frac{\exp(e^d_{tt&#x27;})}{\Sigma^{t-1}_{j=1}\exp(e^d_{tj})}$&lt;&#x2F;p&gt;
&lt;p&gt;$c^d_t=\Sigma^{t-1}_{j=1}\alpha^d_{tj}h^d_j$&lt;&#x2F;p&gt;
&lt;p&gt;Combine softmax and pointers:&lt;&#x2F;p&gt;
&lt;p&gt;$p(u_t=1)=\sigma(W_u[h_t^d\lVert c_t^e\rVert c_t^d]+b_u)$&lt;&#x2F;p&gt;
&lt;p&gt;$p(y_t\lvert u_t=0)=\text{softmax}(W_{out}[h_t^d\lVert c_t^e\rVert c_t^d]+b_{out})$&lt;&#x2F;p&gt;
&lt;p&gt;$p(y_t=x_i\vert u_t=1)=\alpha^e_{ti}$&lt;&#x2F;p&gt;
&lt;p&gt;$p(y_t)=p(u_t=1)p(y_t\vert u_t=1)+p(u_t=0)p(y_t\vert u_t=0)$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;attention-is-all-you-need&quot;&gt;Attention is all you need&lt;&#x2F;h3&gt;
&lt;p&gt;$A(q, K, V)=\Sigma_i\frac{e_{q\cdot k_i}}{\Sigma_je^{q\cdot k_j}}v_i$&lt;&#x2F;p&gt;
&lt;p&gt;$A(Q,K,V)=softmax(\frac {QK^{\top}}{\sqrt{d_k}})V$&lt;&#x2F;p&gt;
&lt;p&gt;Self-attention and multi-head attention:&lt;&#x2F;p&gt;
&lt;p&gt;$MultiHead(Q,K,V)=Concat(head_1,\dots,head_h)W^o$&lt;&#x2F;p&gt;
&lt;p&gt;where $head_i=Attention(QW_i^Q,KW_i^K,VW_i^V)$&lt;&#x2F;p&gt;
&lt;p&gt;Layer norm:&lt;&#x2F;p&gt;
&lt;p&gt;$\mu^l=\frac1H\Sigma^H_{i=1}a^l_i$&lt;&#x2F;p&gt;
&lt;p&gt;$\sigma^l=\sqrt{\frac1H\Sigma^H_{i=1}(a^l_i-\mu^l)^2}$&lt;&#x2F;p&gt;
&lt;p&gt;$h_i=f(\frac{g_i}{\sigma_i}(a_i-\mu_i)-b_i)$&lt;&#x2F;p&gt;
&lt;p&gt;Added is a positional encoding:&lt;&#x2F;p&gt;
&lt;p&gt;$PE_{pos, 2i}=\sin(pos&#x2F;10000^{2i&#x2F;d_{model}})$&lt;&#x2F;p&gt;
&lt;p&gt;$PE_{pos, 2i+1}=\cos(pos&#x2F;10000^{2i&#x2F;d_{model}})$&lt;&#x2F;p&gt;
&lt;p&gt;Transformer Decoder: masked decoder self-attention on previously generated outputs.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;byte-pair encodings&lt;&#x2F;li&gt;
&lt;li&gt;checkpoint averaging&lt;&#x2F;li&gt;
&lt;li&gt;Adam optimizer with learning rate changes&lt;&#x2F;li&gt;
&lt;li&gt;Dropout during training at every layer just before adding residual&lt;&#x2F;li&gt;
&lt;li&gt;label smoothing&lt;&#x2F;li&gt;
&lt;li&gt;auto-regressive decoding with beam search and length penalties&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;convolutional-neural-networks-cnn&quot;&gt;Convolutional Neural Networks (CNN)&lt;&#x2F;h2&gt;
&lt;p&gt;1d discrete convolution generally: $(f*g)[n]=\Sigma_{m=-M}^Mf[n-m]g[m]$&lt;&#x2F;p&gt;
&lt;p&gt;$x_{1:n}=x_1\oplus x_2\oplus\dots\oplus x_n$&lt;&#x2F;p&gt;
&lt;p&gt;$c_i=f(w^{\top}x_{i:i+h-1}+b)$&lt;&#x2F;p&gt;
&lt;p&gt;$\hat{c}=\max{[c_1, c_2, \dots, c_{n-h+1}]}$&lt;&#x2F;p&gt;
&lt;p&gt;$z=[\hat{c}_1, \dots, \hat{c}_m]$&lt;&#x2F;p&gt;
&lt;p&gt;$y=\text{softmax}(W^{(s)}z+b)$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;coreference-resolution&quot;&gt;Coreference Resolution&lt;&#x2F;h2&gt;
&lt;p&gt;Applications:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Full text understanding&lt;&#x2F;li&gt;
&lt;li&gt;Machine Translation&lt;&#x2F;li&gt;
&lt;li&gt;Bialogue Systems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Two steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Detect the montions(easy)
&lt;ul&gt;
&lt;li&gt;Pronouns: POS tagging&lt;&#x2F;li&gt;
&lt;li&gt;Named entities: NER system&lt;&#x2F;li&gt;
&lt;li&gt;Noun pharses: constituency parser&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Cluster the mentions(hard)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;How to deal with these bad mentions?&lt;&#x2F;p&gt;
&lt;p&gt;Keep all mentions as &amp;quot;candidate mentions&amp;quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Coreference Models:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mention Pair&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$J=-\Sigma^N_{i=2}\Sigma^i_{j=1}y_{ij}\log p(m_j, m_i)$, $y_{ij}=1$ if mentions $m_i$ and $m_j$ are coreferent, -1 if otherwise&lt;&#x2F;li&gt;
&lt;li&gt;Many mentions only have one clear antecedent, but we want all.&lt;&#x2F;li&gt;
&lt;li&gt;Solution: more linguistically plausible&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Mention Ranking&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Assign each mention its highest scoring candidate antecedent according to the model&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;$J=\sum^N_{i=2}-\log(\sum^{i-1}_{j=1}\mathbb{1}(y_{ij}=1)p(m_j,m_i))$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Non-Neural Coref Model: Features&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Neural Coref Model&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Embeddings: previous two words, first word, last word, head word, ... of each mention&lt;&#x2F;li&gt;
&lt;li&gt;Distance&lt;&#x2F;li&gt;
&lt;li&gt;Document genre&lt;&#x2F;li&gt;
&lt;li&gt;Speaker information&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;End-to-End Model&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Word &amp;amp; character embedding $\to$ BiLSTM $\to$ Attention&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Do mention detection and coreference end-to-end&lt;&#x2F;p&gt;
&lt;p&gt;$g_i=[x^{*}_{start(i)},x^{*}_{end(i)},\hat{x}_i,\phi(i)]$&lt;&#x2F;p&gt;
&lt;p&gt;$\alpha_t=w_{\alpha}\cdot \text{FFNN}_{\alpha}(x^*_t)$&lt;&#x2F;p&gt;
&lt;p&gt;$a_{i,t}=\frac{\exp(\alpha_t)}{\sum^{end(i)}_{k=start(i)}\exp(\alpha_k)}$&lt;&#x2F;p&gt;
&lt;p&gt;$\hat{x}_i=\sum^{end(i)}_{t=start(i)}a_{i,t}\cdot x_t$&lt;&#x2F;p&gt;
&lt;p&gt;$s(i,j)=s_m(i)+s_m(j)+s_a(i,j)$&lt;&#x2F;p&gt;
&lt;p&gt;$s_m(i)=w_m\cdot \text{FFNN}_m(g_i)$&lt;&#x2F;p&gt;
&lt;p&gt;$s_a(i,j)=w_a\cdot\text{FFNN}_a([g_i,g_j,g_i\circ g_j,\phi(i,j)])$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Clustering&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Current candidate cluster merges depend on previous ones it already made.&lt;&#x2F;li&gt;
&lt;li&gt;Metrics: MUC, CEAF, LEA, B-CUBED, BLANC&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;constituency-parsing&quot;&gt;Constituency Parsing&lt;&#x2F;h2&gt;
&lt;p&gt;Language recursive:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;helpful in disambiguation&lt;&#x2F;li&gt;
&lt;li&gt;helpful for some tasks to refer to specific phrases&lt;&#x2F;li&gt;
&lt;li&gt;works better for some tasks to use grammatical tree structure&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Recursive neural nets require a tree structure, while recurrent neural nets cannot capture pharses without prefix context and often capture too much of last words in final vector.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tree-recursive-neural-network&quot;&gt;Tree Recursive Neural Network&lt;&#x2F;h3&gt;
&lt;p&gt;Input: two candidate children&#x27;s representations&lt;&#x2F;p&gt;
&lt;p&gt;Outpu: the semantic representation if the two nodes are merged and score of how plausible the new node would be&lt;&#x2F;p&gt;
&lt;p&gt;$score = U^{\top}p$&lt;&#x2F;p&gt;
&lt;p&gt;$p=\tanh(W\begin{bmatrix}c_1 \\\ c_2 \end{bmatrix}+b)$, same $W$ parameters at all nodes of the tree&lt;&#x2F;p&gt;
&lt;p&gt;$score(text, tree)=\sum_{n\in nodes(tree)}s_n$&lt;&#x2F;p&gt;
&lt;p&gt;$J=\sum_is(x_i,y_i)-\max_{y\in A(x_i)}(s(x_i,y)+\triangle(y,y_i))$&lt;&#x2F;p&gt;
&lt;p&gt;$\delta^{(l)}=((W^{(l)})^{\top}\delta^{(l+1)})\circ f&#x27;(z^{(l)})$&lt;&#x2F;p&gt;
&lt;p&gt;$\frac{\partial}{\partial W^{(l)}}E_R=\delta^{(l+1)}(a^{(l)})^{\top}+\lambda W^{(l)}$&lt;&#x2F;p&gt;
&lt;p&gt;Differences of backprop in recursion and tree structure:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;sum derivatives of $W$ from all nodes&lt;&#x2F;li&gt;
&lt;li&gt;split derivatives at each node&lt;&#x2F;li&gt;
&lt;li&gt;add error messages from parent + node itself&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;syntactically-untied-rnn&quot;&gt;Syntactically-Untied RNN&lt;&#x2F;h3&gt;
&lt;p&gt;Use different composition matrix for different syntactic environments.&lt;&#x2F;p&gt;
&lt;p&gt;Problem: speed.&lt;&#x2F;p&gt;
&lt;p&gt;Solution: compute score only for a subset of trees coming from a simpler, faster model(PCFG).&lt;&#x2F;p&gt;
&lt;p&gt;Compositional Vector Grammar(CVG): PCFG + TreeRNN&lt;&#x2F;p&gt;
&lt;h3 id=&quot;compositionality-through-recursive-matrix-vector-spaces&quot;&gt;Compositionality Through Recursive Matrix-Vector Spaces&lt;&#x2F;h3&gt;
&lt;p&gt;$p=\tanh(W\begin{bmatrix}c_2c_1 \\\ c_1c_2 \end{bmatrix}+b)$&lt;&#x2F;p&gt;
&lt;p&gt;Matrix-Vector RNNs&lt;&#x2F;p&gt;
&lt;p&gt;$p=g(A,B)=W_M\begin{bmatrix}A \\\ B\end{bmatrix}$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can an MV-RNN learn how a large syntractic context conveys a semantic relationship?&lt;&#x2F;p&gt;
&lt;p&gt;Build a single compositional semantics for the minimal constituent including both terms.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;model-overview-and-memory-networks&quot;&gt;Model overview and memory networks&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;treelstms&quot;&gt;TreeLSTMs&lt;&#x2F;h3&gt;
&lt;p&gt;TreeLSTM = TreeRNN + LSTM&lt;&#x2F;p&gt;
&lt;p&gt;$\tilde{h}_j=\sum_{k\in C(j)}h_k$&lt;&#x2F;p&gt;
&lt;p&gt;$i_j=\sigma(W^{(i)}x_j+U^{(i)}\tilde{h}_j+b^{(i)})$&lt;&#x2F;p&gt;
&lt;p&gt;$f_{jk}=\sigma(W^{(f)}x_j+U^{(f)}h_k+b^{(f)})$&lt;&#x2F;p&gt;
&lt;p&gt;$o_j=\sigma(W^{(o)}x_j+U^{(o)}\tilde{h}_j+b^{(o)})$&lt;&#x2F;p&gt;
&lt;p&gt;$u_j=\tanh(W^{(u)}x_j+U^{(u)}\tilde{h}_j+b^{(u)})$&lt;&#x2F;p&gt;
&lt;p&gt;$c_j=i_j\odot u_j+\sum_{k\in C(j)}f_{jk}\odot c_k$&lt;&#x2F;p&gt;
&lt;p&gt;$h_j=o_j\odot \tanh(c_j)$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;neural-architecture-search&quot;&gt;Neural Architecture Search&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Maintain the controller (RNN)&lt;&#x2F;li&gt;
&lt;li&gt;Sample architecture A with probability $p$&lt;&#x2F;li&gt;
&lt;li&gt;Train a child network with architecture A to get accuracy R&lt;&#x2F;li&gt;
&lt;li&gt;Compute gradient of $p$ and scale it by R to update the controller&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dynamic-memory-network&quot;&gt;Dynamic Memory Network&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Input module&lt;&#x2F;p&gt;
&lt;p&gt;Standard GRU or BiGRU&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Question module&lt;&#x2F;p&gt;
&lt;p&gt;$q_t=GRU(v_t, q_{t-1})$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Episodic Memory module&lt;&#x2F;p&gt;
&lt;p&gt;$h_i^t=g_i^tGRU(s_i,h^t_{i-1})+(1-g^t_i)h^t_{i-1}$, last hidden state $m^t$&lt;&#x2F;p&gt;
&lt;p&gt;gates are activated if sentence relevant to the question or memory.&lt;&#x2F;p&gt;
&lt;p&gt;$z_i^t=[s_i\circ q;s_i\circ m^{t-1};\lvert s_i-q\rvert;\lvert s_i-m^{t-1}\rvert]$&lt;&#x2F;p&gt;
&lt;p&gt;$Z^t_i=W^{(2)}\tanh(W^{(1)}z^t_i+b^{(1)})+b^{(2)}$&lt;&#x2F;p&gt;
&lt;p&gt;$g^t_i=\frac{\exp(Z^t_i)}{\sum^{M_i}_{k=1}\exp(Z^t_k)}$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Answer Module&lt;&#x2F;p&gt;
&lt;p&gt;$a_t=GRU([y_{t-1},q],a_{t-1})$&lt;&#x2F;p&gt;
&lt;p&gt;$y_t=softmax(W^{(a)}a_t)$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Related work: Neural Turing Machine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;semi-supervised-learning&quot;&gt;Semi-Supervised Learning&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Pre-training
&lt;ul&gt;
&lt;li&gt;first train an unsupervised model on unlabeled data, then train it on the labeled data&lt;&#x2F;li&gt;
&lt;li&gt;Word2Vec (skip-gram, CBOW, GloVe, etc.)&lt;&#x2F;li&gt;
&lt;li&gt;Auto-Encoder&lt;&#x2F;li&gt;
&lt;li&gt;Strategies:
&lt;ul&gt;
&lt;li&gt;CoVe&lt;&#x2F;li&gt;
&lt;li&gt;ELMo&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Self-training
&lt;ul&gt;
&lt;li&gt;train the model on the labeled data, then use the model to label the unlabeled data&lt;&#x2F;li&gt;
&lt;li&gt;Online self-training: $J(\theta)=CE(y_i,p(y\lvert x_i,\theta))+CE(onehot(argmax(p(y\lvert x_j,\theta))),p(y\lvert x_j,\theta))$&lt;&#x2F;li&gt;
&lt;li&gt;hard targets work better than soft targets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Consistency regularization
&lt;ul&gt;
&lt;li&gt;$J(\theta)=CE(p(y\lvert x_j,\theta),p(y\lvert x_j+\eta,\theta))$ where $\eta$ is a vector with a random direction and a small magnitude $\epsilon$&lt;&#x2F;li&gt;
&lt;li&gt;Apply to NLP:
&lt;ul&gt;
&lt;li&gt;Add noise to the word embedding(noise should be chosen adversarially)
&lt;ul&gt;
&lt;li&gt;Compute the gradient of the loss with respect to the input, then add epsilon times the gradient to the input.&lt;&#x2F;li&gt;
&lt;li&gt;$\eta=\epsilon\frac{\nabla_xJ}{\lVert\nabla_xJ\rVert}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Word dropout
&lt;ul&gt;
&lt;li&gt;randomly(10%-20%) replace words in the input with a special REMOVED token: $J(\theta)=CE(p(y\lvert x_j,\theta),p(y\lvert dropwords(x_j), \theta))$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Cross-view Consistency
&lt;ul&gt;
&lt;li&gt;train the model across many different views of the input at once&lt;&#x2F;li&gt;
&lt;li&gt;instead of running full the model multiple times, add multiple &amp;quot;auxiliary&amp;quot; softmax layers to the model&lt;&#x2F;li&gt;
&lt;li&gt;$J(\theta)=\Sigma_{i=1}^kCE(p(y\lvert x_j,\theta),p_{view_i}(y\lvert x_j,\theta))$ &lt;&#x2F;li&gt;
&lt;li&gt;forward and backward auxiliary softmax layer, attention dropout, etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;next&quot;&gt;Next&lt;&#x2F;h2&gt;
&lt;p&gt;3 equivalent NLP-Complete Super Tasks&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Language Model&lt;&#x2F;li&gt;
&lt;li&gt;Question Answering&lt;&#x2F;li&gt;
&lt;li&gt;Dialogue System&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Limits for deep NLP:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Comprehensive QA&lt;&#x2F;li&gt;
&lt;li&gt;Multitask learning&lt;&#x2F;li&gt;
&lt;li&gt;Combined multimodel, logical and memory-based reasoning&lt;&#x2F;li&gt;
&lt;li&gt;Learning from few examples&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Recommendation System Checklist</title>
		<published>2018-09-14T00:00:00+00:00</published>
		<updated>2018-09-14T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/recsys-checklist/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/recsys-checklist/</id>
		<content type="html">&lt;p&gt;Notes of &lt;a href=&quot;https:&#x2F;&#x2F;time.geekbang.org&#x2F;column&#x2F;74&quot;&gt;&amp;quot;36 strokes of recommended system&amp;quot;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;when-to-use&quot;&gt;When to use?&lt;&#x2F;h3&gt;
&lt;p&gt;$\frac{N_{connection}}{N_{user} \times N_{item}}$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stage&quot;&gt;Stage&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;mining&lt;&#x2F;li&gt;
&lt;li&gt;recall&lt;&#x2F;li&gt;
&lt;li&gt;ranking&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;forecast&quot;&gt;Forecast&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;score
&lt;ul&gt;
&lt;li&gt;collect data&lt;&#x2F;li&gt;
&lt;li&gt;quality of score&lt;&#x2F;li&gt;
&lt;li&gt;unstable of score&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;action
&lt;ul&gt;
&lt;li&gt;Click Through Rate(CTR)&lt;&#x2F;li&gt;
&lt;li&gt;dense of data&lt;&#x2F;li&gt;
&lt;li&gt;implicit feedback&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;cold start&lt;&#x2F;li&gt;
&lt;li&gt;exploit and explore&lt;&#x2F;li&gt;
&lt;li&gt;secure&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;user-profile&quot;&gt;User profile&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Vectorization&lt;&#x2F;li&gt;
&lt;li&gt;based on records, statistics, balck box models&lt;&#x2F;li&gt;
&lt;li&gt;Feature
&lt;ul&gt;
&lt;li&gt;TF-IDF, TextRank&lt;&#x2F;li&gt;
&lt;li&gt;Named Entity Recognition (based on dictionary and conditional random field)&lt;&#x2F;li&gt;
&lt;li&gt;Text classification&lt;&#x2F;li&gt;
&lt;li&gt;Clustering&lt;&#x2F;li&gt;
&lt;li&gt;Topic model&lt;&#x2F;li&gt;
&lt;li&gt;Embedding&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Select labels
&lt;ul&gt;
&lt;li&gt;Chi-square test(CHI)&lt;&#x2F;li&gt;
&lt;li&gt;Information gain(GI)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;models&quot;&gt;Models&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;content-based&quot;&gt;Content-based&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;friendly to new items and new users(cold start)&lt;&#x2F;li&gt;
&lt;li&gt;easy to get data
&lt;ul&gt;
&lt;li&gt;grab (use crawler)&lt;&#x2F;li&gt;
&lt;li&gt;clean data&lt;&#x2F;li&gt;
&lt;li&gt;data mining&lt;&#x2F;li&gt;
&lt;li&gt;compute&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Algorithm
&lt;ul&gt;
&lt;li&gt;Unsupervised
&lt;ul&gt;
&lt;li&gt;BM25&lt;&#x2F;li&gt;
&lt;li&gt;cosine similarity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Supervised
&lt;ul&gt;
&lt;li&gt;GBDT&lt;&#x2F;li&gt;
&lt;li&gt;Logistic Regression&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;collaborative-filtering&quot;&gt;Collaborative filtering&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory-based
&lt;ul&gt;
&lt;li&gt;User-based
&lt;ul&gt;
&lt;li&gt;sample to reduce vector dimension(DIMSUM)&lt;&#x2F;li&gt;
&lt;li&gt;Map-Reduce to get user2user similarity, or use (KGraph, GraphCHI)&lt;&#x2F;li&gt;
&lt;li&gt;punish hot items&lt;&#x2F;li&gt;
&lt;li&gt;attenuate with time&lt;&#x2F;li&gt;
&lt;li&gt;cons
&lt;ul&gt;
&lt;li&gt;too many users to calculate&lt;&#x2F;li&gt;
&lt;li&gt;too sparse to get real similar users(hot items)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Item-based
&lt;ul&gt;
&lt;li&gt;normalization for users and items&lt;&#x2F;li&gt;
&lt;li&gt;Slope one(consider confidence)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;cons: sparse =&amp;gt; vibrate to small correlations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Model-based
&lt;ul&gt;
&lt;li&gt;Singular Vector Decomposition(SVD): $$min_{q^&lt;em&gt;,p^&lt;&#x2F;em&gt;}\Sigma_{(u,i)\in \kappa}(r_{ui}-p_u q_i^T)^2+\lambda(\lVert q_i\rVert ^2+\lVert p_u\rVert ^2)$$&lt;&#x2F;li&gt;
&lt;li&gt;add bias: $$\hat{r}&lt;em&gt;{ui}=\mu + b_i + b_u + p_u q_i^T$ , $min&lt;&#x2F;em&gt;{q^&lt;em&gt;,p^&lt;&#x2F;em&gt;}\Sigma_{(u,i)\in \kappa}(r_{ui}-\mu -b_i - b_u -p_u q_i^T)^2+\lambda(\lVert q_i\rVert ^2+\lVert p_u\rVert ^2+b_i^2+b_u^2)$$ &lt;&#x2F;li&gt;
&lt;li&gt;SVD++(add implicit feedback &amp;amp; user attribute): $$\hat{r}&lt;em&gt;{ui}=\mu + b_i + b_u + (p_u+\lvert N(u) \rvert ^{-0.5}\Sigma&lt;&#x2F;em&gt;{i\in N(u)}x_i+\Sigma_{a\in Au}y_a)q_i^T$$&lt;&#x2F;li&gt;
&lt;li&gt;consider about time
&lt;ul&gt;
&lt;li&gt;weight&lt;&#x2F;li&gt;
&lt;li&gt;time scope&lt;&#x2F;li&gt;
&lt;li&gt;special date&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;cons:
&lt;ul&gt;
&lt;li&gt;ranking is what we want, not vectors&lt;&#x2F;li&gt;
&lt;li&gt;negative sampling is still a problem&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;similarity&quot;&gt;Similarity&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Euclidean distance: $d(p, q)=\sqrt{\Sigma_{i=1}^n(q_i-p_i)^2}$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Cosine similarity: $cos(\theta)=\frac{A\cdot B}{\lVert A\rVert \lVert B\rVert}$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;adjust: $sim(i,j)=\frac{\Sigma_{u\in U}(R_{u,i}-\bar{R_u})(R_{u,j}-\bar{R_u})}{\sqrt{\Sigma_{u \in U}(R_{u,i}-\bar{R_u})^2}\sqrt{\Sigma_{u \in U}(R_{u,j}-\bar{R_u})^2}}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Pearson correlation: $\rho_{X,Y}=\frac{\Sigma^n_{i=1}(x_i-\bar{x})(y_i-\bar{y})}{\sqrt{\Sigma^n_{i=1}(x_i-\bar{x})^2}\sqrt{\Sigma^n_{i=1}(y_i-\bar{y})^2}}$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Jaccard index: $J(A, B)=\frac{A\bigcap B}{A\bigcup B}$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;optimization&quot;&gt;Optimization&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Stochastic Gradient Descent(SGD)&lt;&#x2F;li&gt;
&lt;li&gt;Alternative Least Square(ALS): $R_{m\times n}=P_{m\times k}\times Q^T_{n\times k}$
&lt;ul&gt;
&lt;li&gt;easy to parallelize&lt;&#x2F;li&gt;
&lt;li&gt;fast than SGD in not too sparse data&lt;&#x2F;li&gt;
&lt;li&gt;Weighted-ALS: one-class    $$min_{q^&lt;em&gt;,p^&lt;&#x2F;em&gt;}\Sigma_{(u,i)\in \kappa}c_{ui}(r_{ui}-p_uq_i^T)^2+\lambda(\lVert q_i\rVert ^2+\lVert p_u\rVert ^2)$$ where $c_{ui}=1+\alpha n$ stands for confidence and  $\alpha=40$ , $n$ is frequence.
&lt;ul&gt;
&lt;li&gt;sample in hot items (negative sampling)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Tools to search similar items: Faiss(ball tree), Annoy, NMSlib, KGraph&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ranking&quot;&gt;Ranking&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;methods: point-wise, pair-wise, list-wise&lt;&#x2F;li&gt;
&lt;li&gt;Bayes Personalized Recommendation(BPR)
&lt;ul&gt;
&lt;li&gt;sample: (user, item1, item2, True&#x2F;False)&lt;&#x2F;li&gt;
&lt;li&gt;$\Pi_{u,i,j}p(i&amp;gt;_uj\mid \theta)p(\theta)$&lt;&#x2F;li&gt;
&lt;li&gt;Mini-batch Stochastic Gradient Descent(MSGD)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Area Under Curve(AUC): $AUC=\frac{\Sigma_{i\in samples}r_i-\frac{1}{2}M\times (M-1)}{M\times N}$ &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ensemble&quot;&gt;Ensemble&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Logistic Regression&lt;&#x2F;li&gt;
&lt;li&gt;Follow-the-Regularized-Leader(FTRL)&lt;&#x2F;li&gt;
&lt;li&gt;Gradient Boost Decision Tree(GBDT)&lt;&#x2F;li&gt;
&lt;li&gt;Factorization Machine(FM)
&lt;ul&gt;
&lt;li&gt;$\hat{y}=w_0+\Sigma^n_{i=1}w_ix_i+\Sigma^n_{i=1}\Sigma^n_{j=i+1}&amp;lt;V_i,V_j&amp;gt;x_ix_j$ &lt;&#x2F;li&gt;
&lt;li&gt;$\sigma(\hat{y})=\frac{1}{1+e^{-\hat{y}}}$ , $loss(\theta)=-\frac{1}{m}\Sigma^m_{i=1}[y^{(i)}log(\sigma(\hat{y}))+(1-y^{(i)})log(1-\sigma(\hat{y}))]$ &lt;&#x2F;li&gt;
&lt;li&gt;$\Sigma_{i=1}^n\Sigma_{j=i+1}^n&amp;lt;v_i,v_j&amp;gt;x_ix_j$ = $\frac{1}{2}\Sigma_{f=1}^k((\Sigma_{i=1}^nv_{i,f}x_i)^2-\Sigma_{i=1}^nv_{i,f}^2x_i^2)$ &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Field-aware Factorization Machine(FFM)
&lt;ul&gt;
&lt;li&gt;$\hat{y}=w_0+\Sigma^n_{i=1}w_ix_i+\Sigma^n_{i=1}\Sigma^n_{j=i+1}&amp;lt;V_{i,fj}, V_{j,fi}&amp;gt;x_ix_j$ &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Deep&amp;amp;Wide
&lt;ul&gt;
&lt;li&gt;$P(Y=1\mid X)=\sigma(W^T_{wide}[X, \Phi(X)]+W^T_{deep}a^{(l_f)}+b)$&lt;&#x2F;li&gt;
&lt;li&gt;scale: $\frac{i-1}{n_q-1}$&lt;&#x2F;li&gt;
&lt;li&gt;model
&lt;ul&gt;
&lt;li&gt;deep: full-connected layer and ReLU&lt;&#x2F;li&gt;
&lt;li&gt;wide: cross combination&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;deploy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;bandit&quot;&gt;Bandit&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Multi-armed bandit problem(MBP): cold start and EE problem&lt;&#x2F;li&gt;
&lt;li&gt;$R_T=\Sigma_{i=1}^T(w_{opt}-w_{B(i)})=Tw^*-\Sigma^T_{i=1}w_{B(i)}$ &lt;&#x2F;li&gt;
&lt;li&gt;Thompson sampling
&lt;ul&gt;
&lt;li&gt;beta distribution
&lt;ul&gt;
&lt;li&gt;$\alpha + \beta$ ↗⇒ center&lt;&#x2F;li&gt;
&lt;li&gt;$\frac{\alpha}{\alpha+\beta}$ ↗⇒ center → 1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;choice = numpy.argmax(pymc.rbeta(1 + self.wins, 1 + self.trials - self.wins))&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Upper Confidence Bound(UCB)
&lt;ul&gt;
&lt;li&gt;$\bar{x}_j(t)+\sqrt\frac{2\ln t}{T_{j, t}}$&lt;&#x2F;li&gt;
&lt;li&gt;$t$ is total times, $\bar{x}$ is average gain&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Epsilon greedy
&lt;ul&gt;
&lt;li&gt;select $\epsilon\in(0, 1)$, select best chioce with $p_{best}=1-\epsilon$ &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;LinUCB
&lt;ul&gt;
&lt;li&gt;add features, support delete items&lt;&#x2F;li&gt;
&lt;li&gt;contextually related&lt;&#x2F;li&gt;
&lt;li&gt;expected revenue: $\hat{r}=x^T_{d\times 1}\hat{\theta}_{d\times 1}$&lt;&#x2F;li&gt;
&lt;li&gt;upper bound: $\hat{b}=\alpha \sqrt x^T_{d\times 1}(D^T_{m\times d}D_{m\times d}+I_{d\times d})^{-1}x_{d\times 1}$ &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;COFIBA
&lt;ul&gt;
&lt;li&gt;use CF to reduce user group&lt;&#x2F;li&gt;
&lt;li&gt;update item group and user group with LinUCB&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;deep-learning&quot;&gt;Deep learning&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Product2vec
&lt;ul&gt;
&lt;li&gt;users&#x27; browser history == docs&lt;&#x2F;li&gt;
&lt;li&gt;try to learn vector of items&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Youtube
&lt;ul&gt;
&lt;li&gt;$P(w_t=i\mid U,C)=\frac{e_{v_iu}}{\Sigma_{j\in V}e_{v_ju}}$ &lt;&#x2F;li&gt;
&lt;li&gt;embedded watches, search tokens, geographic, age, gender......&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Spotify
&lt;ul&gt;
&lt;li&gt;RNN: $h_t=F(Wx_t+Uh_{t-1})$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;leaderboard&quot;&gt;Leaderboard&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Hacker News: $\frac{P-1}{(T+2)^G}$
&lt;ul&gt;
&lt;li&gt;$P$: vote, $T$: time(hour), G: gravity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Newton&#x27;s law of cooling: $T(t)=H+Ce^{-\alpha t}$
&lt;ul&gt;
&lt;li&gt;$H$: environment tempurature,  $C$: vote, $\alpha$: Chill coefficient&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;StackOverflow: $\frac{(log_{10}Q_{views}\times 4 + \frac{Q_{answers}\times Q_{score}}{5}+\Sigma_iA_{score_i})}{(\frac{Q_{age}}{2}+\frac{Q_{update}}2+1)^{1.5}}$ 
&lt;ul&gt;
&lt;li&gt;$Q_{age}$: time, $Q_{update}$: last update time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Wilson section: $\frac{\hat{p}+\frac{1}{2n}z^2_{1-\frac{\alpha}{2}}\pm z_{1-\frac{\alpha}2}\sqrt{\frac{\hat{p}(1-\hat{p})}{n}+\frac{z^2_{1-\frac{\alpha}2}}{4n^2}}}{1+\frac{1}nz^2_{1-\frac{\alpha}2}}$ 
&lt;ul&gt;
&lt;li&gt;$\hat{p}$: praise rate, $z_{1-\frac{\alpha}2}$: Z statistic with confidence $\alpha$ &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Bayes average: $\frac{v}{v+m}R+\frac{m}{v+m}C$ 
&lt;ul&gt;
&lt;li&gt;$R$: average score, $v$: vote, $m$: average vote, $C$: average score&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;weighted-sampling&quot;&gt;Weighted sampling&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;limit data
&lt;ul&gt;
&lt;li&gt;$S_i=R^{\frac{1}{w_i}}$&lt;&#x2F;li&gt;
&lt;li&gt;$f(x,\lambda)=\begin{cases} \lambda e^{-\lambda x} &amp;amp; \text{if }x&amp;gt;0 \ 0 &amp;amp;\text{if }x\leqslant 0 \end{cases}$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;unlimit data
&lt;ul&gt;
&lt;li&gt;keep $k$ items, replace item with $p=\frac{k}n$ &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;deduplicated&quot;&gt;Deduplicated&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;SimHash&lt;&#x2F;li&gt;
&lt;li&gt;Bloom filter&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;data&quot;&gt;Data&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;collect-data&quot;&gt;Collect data&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;data model
&lt;ul&gt;
&lt;li&gt;user profile&lt;&#x2F;li&gt;
&lt;li&gt;item profile&lt;&#x2F;li&gt;
&lt;li&gt;relation&lt;&#x2F;li&gt;
&lt;li&gt;event&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;store
&lt;ul&gt;
&lt;li&gt;buried point: SDK, Google Analytics, Mixpanel&lt;&#x2F;li&gt;
&lt;li&gt;end: front-end, back-end&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;architecture
&lt;ul&gt;
&lt;li&gt;Nginx&#x2F;server → logstash&#x2F;flume → kafka → storm → HDFS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;defence&quot;&gt;Defence&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;attack-methods&quot;&gt;Attack methods&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;item: target, mask, fake&lt;&#x2F;li&gt;
&lt;li&gt;score: random, average&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;defence-1&quot;&gt;Defence&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;platform level: sign up cost, reCAPTCHA&lt;&#x2F;li&gt;
&lt;li&gt;data level: antispam(PCA, classify, cluster)&lt;&#x2F;li&gt;
&lt;li&gt;algorithm level: add user quality, restrict user weight&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;deploy&quot;&gt;Deploy&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;real-time&quot;&gt;Real Time&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;response → update feature → update model&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Storm&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Spout, Bolt, Tuple, Topology&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Kafka&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Hoeffding&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the real $E(x)$ is smaller than $\hat{x}+\epsilon$ with probability $p=1-\delta$ : $\epsilon=\sqrt{\frac{ln(1&#x2F;\delta)}{2n}}$ &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Sliding window&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Sampling&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;test-platform&quot;&gt;Test Platform&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;scale: $N&amp;gt;=10.5(\frac{s}{\theta})^2$ , $s$ is standard deviation, $\theta$ is sensitivity. (90% confidence)&lt;&#x2F;li&gt;
&lt;li&gt;Google platform:
&lt;ul&gt;
&lt;li&gt;A domain is a segmentation of traffic&lt;&#x2F;li&gt;
&lt;li&gt;A layer corresponds to a subset of the system parameters&lt;&#x2F;li&gt;
&lt;li&gt;An experiment is a segmentation of traffic where zero or more system parameters can be given alternate values that change how the incoming request if processed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;database&quot;&gt;Database&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Offline and Online&lt;&#x2F;li&gt;
&lt;li&gt;Choice
&lt;ul&gt;
&lt;li&gt;feature, model, result&lt;&#x2F;li&gt;
&lt;li&gt;Inversed index: Redis or Memcached&lt;&#x2F;li&gt;
&lt;li&gt;Column-oriented DBMS: HBase, Cassandra&lt;&#x2F;li&gt;
&lt;li&gt;Store and search: ElasticSearch, Lucene, Solr&lt;&#x2F;li&gt;
&lt;li&gt;Parameters: PMML&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;api&quot;&gt;API&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;recommend_ID: unique ID, trace the performance&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cf-and-mf&quot;&gt;CF and MF&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;KNN
&lt;ul&gt;
&lt;li&gt;kgraph, annoy, faiss, nmslib&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;SVD, SVD++, BPR
&lt;ul&gt;
&lt;li&gt;lightfm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;ALS
&lt;ul&gt;
&lt;li&gt;implicit, QMF&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ensemble-1&quot;&gt;Ensemble&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;GBDT:
&lt;ul&gt;
&lt;li&gt;LightGBM, XGBoost&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;FM, FFM:
&lt;ul&gt;
&lt;li&gt;libffm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Linear: vowpal_wabbit&lt;&#x2F;li&gt;
&lt;li&gt;Wide&amp;amp;Deep Model&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;all-in-one&quot;&gt;All in one&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;PredictionIO&lt;&#x2F;li&gt;
&lt;li&gt;recommendationRaccoon&lt;&#x2F;li&gt;
&lt;li&gt;easyrec&lt;&#x2F;li&gt;
&lt;li&gt;hapiger&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>文本分类</title>
		<published>2018-08-24T00:00:00+00:00</published>
		<updated>2018-08-24T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/wen-ben-fen-lei/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/wen-ben-fen-lei/</id>
		<content type="html">&lt;p&gt;文本分类是最经典的机器学习问题之一，像 anti-spam，情感分析，语义相似等，都是以文本分类为核心建立起来的。当我们能处理好文本分类问题的时候，往往都能很好解决这些问题。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;wen-ben-shu-ju&quot;&gt;文本数据&lt;&#x2F;h2&gt;
&lt;p&gt;常见的数据类型，文本、语音、图片、视频，其中文本是最常见的，即使是信息技术飞速发展的今天，各种短视频和图片应用火得一塌糊涂，文本还是占据相当大的份额。&lt;&#x2F;p&gt;
&lt;p&gt;相对于图片的像素，音频的数字信号，文本对计算机显得有些特殊了。虽然计算机中用各种编码来储存文本信息，且各种编码中通常也包含一定的语言特征，但是这些特征跟像素和数字信号比起来就弱得多了。因此，文本数据需要更多的预处理。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yu-chu-li&quot;&gt;预处理&lt;&#x2F;h2&gt;
&lt;p&gt;预处理对结果的影响还是相当大的，可以说，做好预处理工作，就已经成功了一半了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-ju-qing-xi&quot;&gt;数据清洗&lt;&#x2F;h3&gt;
&lt;p&gt;文本数据中需要处理的问题主要有以下几点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;混杂其中的 tags，比如 HTML tags&lt;&#x2F;li&gt;
&lt;li&gt;URL，Email，电话或其他信息&lt;&#x2F;li&gt;
&lt;li&gt;英文大小写、单词的形态、词缀&lt;&#x2F;li&gt;
&lt;li&gt;中文分词&lt;&#x2F;li&gt;
&lt;li&gt;拼写纠错&lt;&#x2F;li&gt;
&lt;li&gt;stop words、标点符号、表情等&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;其中，第一项基本都会去除，做起来也很简单，第二项根据具体情况来考虑是否去除。这两项都可以通过正则来处理，我写了一个简单的 Python 包来做这件事，可以看下 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kemingy&#x2F;Plane&quot;&gt;Plane&lt;&#x2F;a&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;对英文的形态和词缀，可以用 &lt;a href=&quot;http:&#x2F;&#x2F;www.nltk.org&quot;&gt;NLTK&lt;&#x2F;a&gt; 来处理。大小写就更简单了。&lt;&#x2F;p&gt;
&lt;p&gt;是否需要中文分词还有待商榷。一些人认为做分词很重要，可以排除词义混淆的情况，这也是长久以来大家研究分词的意义所在；另一些人认为做分词的话模型就会依赖分词的效果，提前设置了上限，而且现在的深度学习也能很好地从单个字中学到相关特征，没必要再去用分词。总的来说，可以都试试，反正还能做 Ensemble。&lt;&#x2F;p&gt;
&lt;p&gt;拼写纠错其实不好做，英文的话还能参考 &lt;a href=&quot;http:&#x2F;&#x2F;norvig.com&#x2F;spell-correct.html&quot;&gt;Norvig&lt;&#x2F;a&gt; 这个简单的拼写检查器，中文的就非常麻烦了，如果用户没有被输入法纠正的话，那就需要从形近字、同音字、模糊拼音等角度考虑，目前好像没有开源的项目来专门处理这个。&lt;&#x2F;p&gt;
&lt;p&gt;Stop words 的问题也有很多争议，有的觉得这些词会妨碍模型对句子的理解，有的认为足够大的语料可以规避掉这些问题，而且还可能从中获取一些意想不到的特征。标点符号和表情通常会被替换成空格，不过有些任务可能需要特别考虑表情的问题。&lt;&#x2F;p&gt;
&lt;p&gt;另外还有垃圾文本的问题，在足够大的语料面前，这通常不会造成太大影响，排除一些低频词就可以应对大多数情况。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;word-embedding&quot;&gt;word embedding&lt;&#x2F;h3&gt;
&lt;p&gt;前面提到，文本在计算机中通常以编码的形式存在，像 GBK，Unicode 等，并不能直接丢到模型中，需要先转换成对应的编号。&lt;&#x2F;p&gt;
&lt;p&gt;之前大家通常都用 one-hot encoding、count encoding 或者 TF-IDF，但是语言的词汇量巨大，拿中文来说，常用字可能几千个，但是常用词可能几十万都不止，即使用稀疏矩阵表示能解决内存占用问题，也会产生维度灾难，带来一系列问题。&lt;&#x2F;p&gt;
&lt;p&gt;后来，大家都开始用 word embedding 了，本质上是一种降维方法，可以从语料中习得词语的分布式表示，通常会使用几十维到300维的向量，就能大大提高后续任务的效果。&lt;&#x2F;p&gt;
&lt;p&gt;word embedding 基本上有 word2vec 和 GloVe 两种实现。word2vec 有 continuous bag-of-words(CBOW) 和 continuous skip-gram 两种架构，都是只能考虑一个窗口内的中心词和其他词的联系，有一定的局限性；而 GloVe 是考虑词的共现，不过在实际效果上两者相差无几。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fen-lei-mo-xing&quot;&gt;分类模型&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;fen-lei-ren-wu&quot;&gt;分类任务&lt;&#x2F;h3&gt;
&lt;p&gt;文本分类任务根据类别可以分为二分类和多分类，其中多分类也包括单一类别的多分类和多类别的多分类。&lt;&#x2F;p&gt;
&lt;p&gt;二分类最经典的就是 antispam 了，不管是邮件还是各种论坛，凡是允许用户提交信息的地方几乎都需要用到 antispam。这类任务通常不会简单使用单一模型来做，更多的是根据实际场景进行调整，有针对性地处理各种 spam。&lt;&#x2F;p&gt;
&lt;p&gt;多分类任务更常见，像是一篇新闻，通常会有一个主要的类别，比如经济、体育或者军事等，然而对于大多数文章，通常会涉及多个类别，这个时候就需要多类别多分类模型。&lt;&#x2F;p&gt;
&lt;p&gt;多分类问题中，各个类别的训练样本要尽可能保持一致，否则就会增加一个先验的 bias，即使是用 weights 来调整 loss function 也不如直接保持类别均衡。另外，多个类别之间很可能存在相互包含或某种联系，也会影响最终的分类效果，如果要用 PCA 降维得到独立的新类别的话，新类别可能无法解释，所以这方面怎么做就看个人需要了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ji-qi-xue-xi&quot;&gt;机器学习&lt;&#x2F;h3&gt;
&lt;p&gt;传统的机器学习方法中，通常是用 Naive Bayes、Support Vector Machine、Random Forest 等算法来进行分类。其中，SVM 是标准的二分类模型，要处理多分类，则需要 one-vs-one 或 one-vs-rest 方法，不管是哪种，效果都不够好；NB 常被用在 antispam 方面，对于多分类，理论上是可以直接用，不过朴素（天真）的假设，在应对多分类任务的时候会暴露出更严重的问题；RF 在解释性方面还是不错的，只不过 RF 应对太多类别就会力不从心，需要足够多的训练样本。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shen-du-xue-xi&quot;&gt;深度学习&lt;&#x2F;h3&gt;
&lt;p&gt;某种程度上来讲，用深度学习来做文本分类可能会显得大材小用了，通常只需要两三层就可以达到很不错的效果了。&lt;&#x2F;p&gt;
&lt;p&gt;最开始用的就是普通的全连接层，这方面的代表是 &lt;a href=&quot;https:&#x2F;&#x2F;fasttext.cc&quot;&gt;fastText&lt;&#x2F;a&gt;，速度非常快，不过 fastText 是针对单类别的多分类任务，最后有一个 softmax 层，最后的结果就是只有一个类别是突出的，虽然理论上讲直接用在多分类方面也没大问题，不过效果还是会差一点。&lt;&#x2F;p&gt;
&lt;p&gt;之后 RNN 就被频繁用在各种 NLP 任务上，自然也可以用在文本分类方面，不过词的顺序对分类任务的影响几乎可以忽略不计。&lt;&#x2F;p&gt;
&lt;p&gt;再后来，CNN 也被用在 NLP 任务上，速度更快，效果也足够好，使用不同 size 的 filter 的话，即使不做分词也能得到不错的效果。&lt;&#x2F;p&gt;
&lt;p&gt;最后，Attention 结构也火起来，在 NLP 和 CV 方面都取得了不错的效果，用在文本分类上略显“重”，不过确实能取得更好的效果。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jie-yu&quot;&gt;结语&lt;&#x2F;h2&gt;
&lt;p&gt;最后给自己写的 multi-label text classification 包 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;guokr&#x2F;Caver&quot;&gt;Caver&lt;&#x2F;a&gt; 打个广告，用到了主流的几类模型，易于使用，也可以自己写其他模型嵌入进去，支持简单的 voting ensemble。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>写个博客那么多事儿</title>
		<published>2018-08-07T00:00:00+00:00</published>
		<updated>2018-08-07T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/bo-ke-gong-ju/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/bo-ke-gong-ju/</id>
		<content type="html">&lt;p&gt;各种工具、平台、格式泛滥成灾，每个打算动手写博客的人都要在上面浪费不少时间。是否要自己搭建？该选什么主题？要买什么域名？鉴于我已经在上面浪费了不少时间，就简单总结一下吧。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;ming-que-xu-qiu&quot;&gt;明确需求&lt;&#x2F;h2&gt;
&lt;p&gt;对我而言，博客更多的是记录的作用，是不是有足够多的流量反倒是次要的。因此，一些博客平台提供的 SEO 就无所谓了，自定义域名也是可有可无，简单省心才是关键。&lt;&#x2F;p&gt;
&lt;p&gt;格式方面，目前看来最方便的还是 Markdown，而且需要支持 LaTeX，毕竟会用到不少公式。单是这一条，多数平台就不行了。&lt;&#x2F;p&gt;
&lt;p&gt;主题方面需要简洁，有基本的功能即可，那些炫酷的特效就不必了，太旧的那种也不适合现在的宽屏。最后，还是觉得自己定制一个比较或者修改一个现成的主题比较合适。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jekyll&quot;&gt;Jekyll&lt;&#x2F;h2&gt;
&lt;p&gt;作为 GitHub Pages 官方支持的工具，Jekyll 也算是很出名了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;&quot;&gt;Jekyll&lt;&#x2F;a&gt; 是 Ruby 开发的，虽然 Ruby 用户不算多，但是基本上不需要了解 Ruby 的语言细节，相关工具也很易用，如果想自己定制主题的话，我感觉官方的文档还不够好，不过也基本可以用了。&lt;&#x2F;p&gt;
&lt;p&gt;这里要注意的是，托管到 GitHub Pages 的话，用的是 GitHub 的 &lt;code&gt;pages-gem&lt;&#x2F;code&gt; 而不是原生的 &lt;code&gt;ruby gem&lt;&#x2F;code&gt; ，主要问题在于只支持一部分基本的 plugins，详细的列表可以查看&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;pages-gem&#x2F;blob&#x2F;master&#x2F;lib&#x2F;github-pages&#x2F;plugins.rb&quot;&gt;源代码&lt;&#x2F;a&gt; 。我发现连基本的 &lt;code&gt;jekyll-archives&lt;&#x2F;code&gt; 这种 Jekyll 官方的 plugins 都不支持，详细的讨论可以看 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;pages-gem&#x2F;pull&#x2F;106&quot;&gt;PR&lt;&#x2F;a&gt; 。如果想随便用 plugins 的话，就只能自己 build 好之后再 deploy 了，可以用 Travis CI 来自动化这个过程。我写了一个 &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;kemingy&#x2F;776ccc839b28c0e8c0f867cddabb0b8e&quot;&gt;gist&lt;&#x2F;a&gt; 介绍细节。&lt;&#x2F;p&gt;
&lt;p&gt;另外，如果自己 build 的话，要注意 &lt;code&gt;baseurl&lt;&#x2F;code&gt; ，如果不是自己的 &lt;code&gt;name.github.io&lt;&#x2F;code&gt; repo 的话需要指定。用到相对地址的地方都需要注意用 &lt;code&gt;{{ url | relative_url }}&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;我自己目前用的就是这个了，基于 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;minima&quot;&gt;minima&lt;&#x2F;a&gt; 制作了一个简洁的主题 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kemingy&#x2F;jekyll-theme-ink&quot;&gt;jekyll-theme-ink&lt;&#x2F;a&gt; ，基本上满足需求。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hexo&quot;&gt;Hexo&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hexo.io&#x2F;zh-cn&#x2F;&quot;&gt;Hexo&lt;&#x2F;a&gt; 是 Node.js 开发的，npm 的使用体验你懂的。算是非常流行的一个工具了，拥有非常多的主题，不得不说 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next&quot;&gt;NexT&lt;&#x2F;a&gt; 确实好看，从上万的 star 也能看出来，当然也有人移植到其他工具上了。&lt;&#x2F;p&gt;
&lt;p&gt;Hexo 有专门的命令把本地 build 的结果推到 GitHub 上，这一点也算是非常方便了。事实上 Hexo 默认的功能很全，连 i18n 之类的都有，基本上能满足常见需求了。&lt;&#x2F;p&gt;
&lt;p&gt;要说有什么缺点的话，我之前用的时候觉得 npm 真难用……真的不适合不了解 Javascript 的人，宣传的 build fast 也无从谈起，不知道现在有没有好一点。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hugo&quot;&gt;Hugo&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gohugoio&#x2F;hugo&quot;&gt;Hugo&lt;&#x2F;a&gt; 是 Go 开发的，现在也有上百个主题了，也支持从 Jekyll import，宣传的优势是世界上最快的建站框架，如果是说 build 这个过程的话，感觉一般也没什么影响吧，毕竟都是静态网站，build 速度基本不会差太多。&lt;&#x2F;p&gt;
&lt;p&gt;没有怎么用过这个工具，感觉上跟就是 Go 语言版的 Hexo 吧。对 Go 感兴趣的可以看看这个。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vuepress&quot;&gt;VuePress&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vuepress.vuejs.org&#x2F;&quot;&gt;VuePress&lt;&#x2F;a&gt; 是 Vue 开发的一个项目文档工具，并不是专门用于写 Blog，所以各方面也都是适应项目文档的，比如默认只支持生成一个包含某个文件夹下各页面标题的 sidebar ，而不是一个 blog title list。想要的话还需要自己搞插件。&lt;&#x2F;p&gt;
&lt;p&gt;另外，这个工具还非常新，基本上可以认为只有官方默认的一个主题，虽然也算是简洁漂亮了。我之前试用的时候，想用插件来支持 LaTeX，结果发现 VuePress 用的 markdown-it 还需要别的插件来支持，而这个插件缺少人维护，经常 MathJax 或者 KaTeX 一更新就不能用了，非常难受。&lt;&#x2F;p&gt;
&lt;p&gt;所以，建议想省事的人还是别碰这个了，对 Vue 感兴趣的可以看看。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;latex-zhi-chi&quot;&gt;LaTeX 支持&lt;&#x2F;h2&gt;
&lt;p&gt;这一点对需要用到公式的人非常重要了，目前常用的有 &lt;a href=&quot;https:&#x2F;&#x2F;www.mathjax.org&#x2F;&quot;&gt;MathJax&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;khan.github.io&#x2F;KaTeX&#x2F;&quot;&gt;KaTeX&lt;&#x2F;a&gt; 两个插件。前者直接在页面上加载即可将对应的公式转换，而后者提供了一个接口，需要自己调用来 render，或者看有没有支持的插件。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;&#x2F;h2&gt;
&lt;p&gt;当然还有很多其他的东西，比如 WordPress，不过我自己大概找到了目前最合适的工具了，GitHub Pages 的免费托管也足够了，反正主要是自己做记录用的，也不指望多火。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>项目文档管理</title>
		<published>2018-07-26T00:00:00+00:00</published>
		<updated>2018-07-26T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/xiang-mu-wen-dang-guan-li/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/xiang-mu-wen-dang-guan-li/</id>
		<content type="html">&lt;p&gt;没文档或者文档太烂的项目是可怕的，完善易懂的文档是一个好项目的标配。&lt;&#x2F;p&gt;
&lt;p&gt;如何管理项目文档对于维护一个靠谱的项目是至关重要的。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;readthedocs&quot;&gt;ReadTheDocs&lt;&#x2F;h1&gt;
&lt;p&gt;这是一个很常见的项目文档托管网站，支持 GitHub，GitLab，BitBucket 登录，可导入 &lt;code&gt;git&lt;&#x2F;code&gt;，&lt;code&gt;svn&lt;&#x2F;code&gt; 等项目。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;feature&quot;&gt;Feature&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;支持多版本文档&lt;&#x2F;li&gt;
&lt;li&gt;支持多分支构建&lt;&#x2F;li&gt;
&lt;li&gt;项目更新后自动重新构建&lt;&#x2F;li&gt;
&lt;li&gt;可接入 Google Analytics 和广告&lt;&#x2F;li&gt;
&lt;li&gt;支持自定义域名&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;weakpoint&quot;&gt;Weakpoint&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;仅支持用 Sphinx 生成文档&lt;&#x2F;li&gt;
&lt;li&gt;构建文档的过程限制内存为  1G（这通常不是问题，但如果你有深度学习的项目且需要安装后导入代码中的文档，光是安装深度学习的包估计就超过 1G 了）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;github-pages&quot;&gt;GitHub Pages&lt;&#x2F;h1&gt;
&lt;p&gt;目前有很多项目都直接用 GitHub Pages 来构建文档了，也可以用来写博客，甚至一些 CS 课程也用它展示相关信息。作为一个免费的静态页面平台，跟 GitHub 集成在一起，一向不缺用户的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;feature-1&quot;&gt;Feature&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;具有相对较高的自由度，可以自己选择文档生成工具&lt;&#x2F;li&gt;
&lt;li&gt;可以自己配置 Google Analytics，生成 RSS 等&lt;&#x2F;li&gt;
&lt;li&gt;可以配合 Travis 一类的工具实现文档自动部署&lt;&#x2F;li&gt;
&lt;li&gt;文档跟代码放在同一平台上易于管理&lt;&#x2F;li&gt;
&lt;li&gt;支持自定义域名&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;weakpoint-1&quot;&gt;Weakpoint&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;某些搜索引擎不收录 GitHub Pages 相关页面&lt;&#x2F;li&gt;
&lt;li&gt;某些地区访问 GitHub Pages 可能出现问题&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zi-dong-hua-bu-shu&quot;&gt;自动化部署&lt;&#x2F;h3&gt;
&lt;p&gt;这部分需要配合 Travis CI，当然其他 CI 工具应该也有类似的功能。&lt;&#x2F;p&gt;
&lt;p&gt;我写了一个 Gist 详细介绍相关步骤，可以在这里看到 &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;kemingy&#x2F;7e715ceb1b96f8023bea89a82974a181&quot;&gt;Auto-Deploying Docs&lt;&#x2F;a&gt; （English）。&lt;&#x2F;p&gt;
&lt;p&gt;主要是网上查到的多数都是测试完用 Bash 脚本来部署的，而 Travis 推出了一个 Beta 版的 deploy 功能，非常好用，要比 Bash 脚本部署简单很多，所以就写了这么个 Gist（因为看到别人也都是写的 Gist）。&lt;&#x2F;p&gt;
&lt;p&gt;大概的流程就是申请一个个人的 GitHub Token 用来授权操作仓库，然后在 Travis 中设置成对外不可见的环境变量，或者用 Travis 的加密变量传进去，之后就可以用 Travis 的 &lt;code&gt;.travis.yml&lt;&#x2F;code&gt; 来进行部署操作了。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>T 型路线</title>
		<published>2018-06-20T00:00:00+00:00</published>
		<updated>2018-06-20T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/txing/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/txing/</id>
		<content type="html">&lt;p&gt;做一个 T 型人才，或者说博学且有专长，这类说法在很多地方都能看到，我印象中最深刻的是在 Valve 的员工手册中，大概是因为一直都期待能有一家企业回应这种说法吧。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;看看现在的招聘，基本都指明了要什么后端，前端，算法之类的岗位，还会明确说明使用的技术栈和工具，当然不是说这样不好，让别人了解一家公司的技术栈还是很有必要的，某种程度上反映了这家公司的技术追求和技术积累。但是很多时候，我还是希望遇到那种例外的，因为我自己就是一个例外。&lt;&#x2F;p&gt;
&lt;p&gt;在我看来，大家从事这一行，其实多少都是自己真的喜欢做这件事，能从用编程语言实现一个东西中获得成就感和满足，享受这个过程，当然前提是你在做有意思的事情，而不是为了挣钱在拧螺丝。很多时候，做一件事需要很多方面的技术，这也是为什么需要团队合作。不过沟通始终是存在成本的，而且想要组建一个技术水平都强且比较平衡的团队其实很苦难，这个时候就需要有些人自己站出来，靠自我驱动去学习尽可能多的东西，并将其运用到实际中去。&lt;&#x2F;p&gt;
&lt;p&gt;听起来可能有点不切实际，明明是几个人才能做好的事情，为什么觉得一个人就能做好？因为大多数时候我们不需要把每个方面都做到极致，而只是部分地方足够好，其他地方足够用即可。如果是这样的话，一个人真的可以做很多事情了。而且，随着一个人接触的新鲜事物越来越多，他就应该有能力从中提炼出一套通用的体系，在这样的体系下学习新知识就会事半功倍。再者，一个人如果能掌握多方面的知识，也有助于在宏观角度上进行规划，设计出更好的架构。&lt;&#x2F;p&gt;
&lt;p&gt;于我而言，当然不能被自己工作上的职位所局限住。正式因为还没找到那种能让我感到狂热，明确知道自己愿意为之奋斗一生的目标，所以才需要广泛接触各种有意思的事物，不断学习新鲜事物，保持脑子的活跃状态。另外，也是因为自己只有一个人而已，而且在可以预期的将来也不会有什么变化，所以不得不尝试一个人完成项目。能有合适的人沟通自然是好的，不过就算没有，一个人也可以做很多事情了。&lt;&#x2F;p&gt;
&lt;p&gt;目前这个阶段，正是往宽的方向发展的时候，只有尝试过足够多的方向，才有可能找到最适合自己的，然后再考虑一步步深入。从基本的机器学习到各种深度神经网络，从后端到前端，从代码到设计，下一步大概是看看游戏了，大概了解一遍之后就要开始思考在哪里深入研究了，不过大概是离不开数学的，毕竟真正震撼人心的美还是要靠数学。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>拼音输入法引擎</title>
		<published>2018-06-18T00:00:00+00:00</published>
		<updated>2018-06-18T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/pin-yin-shu-ru-fa-yin-qing/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/pin-yin-shu-ru-fa-yin-qing/</id>
		<content type="html">&lt;p&gt;最近在做 query rewriting 的时候，需要做一个拼音转中文的功能，做着做着，就差不多快做成一个拼音输入法引擎了。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;第一次接触输入法引擎还是 Rime，留下了很深的印象，因为当时觉得有这样一个开源的不会侵犯用户隐私的输入法真不容易啊，当即下载试用，不过因为当时不太喜欢看太长的配置方法，最后也就简单定制了一下，发现很多词输入起来比较费劲，就没继续用。不过换到 Linux 下之后，基本上就是 Rime 了，当然本身的 ibus 也是可以的。&lt;&#x2F;p&gt;
&lt;p&gt;一个基本的输入法引擎，当时就是根据输入的拼音找到对应的候选词，按照概率从大到小进行排序，在此基础上，还可以根据用户输入的历史记录，调整候选词的概率，同时还可以利用 N-gram 的概率进一步优化候选词列表，当然有云计算的话，就变成搜索大规模词频和句子，一些不常见的特定领域名词和诗词歌赋也可以轻松打出来。&lt;&#x2F;p&gt;
&lt;p&gt;这一切的基础，当然是拼音了。好在已经有人做了这部分的工作，我们只需要坐享其成就可以了。&lt;code&gt;pypinyin&lt;&#x2F;code&gt; 是一个不错的包，可以得到中文的拼音以及音标，对多音字也有一定的效果，如果你需要这些功能的话。词库是另外一个很必要的东西，明月拼音的词库还是有点旧了，可以试试搜狗、百度或者腾讯的词库，虽然现在的都加密过了，不过还是能提取出来的。至于 N-gram，还是需要一个较新的预料的，Wikipedia 中文还是有点太不贴近大多数用户的实际输入了，像是微博、知乎一类的预料就比较合适。&lt;&#x2F;p&gt;
&lt;p&gt;有了数据之后，下面就是数据结构部分了。对于这种有大量共同前缀的 key-value，当然是选择 Trie tree 了。这部分还是比较容易自己动手实现的，这里有一个例子 &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;Momingcoder&#x2F;555b69847dc10c501dd13b93779aa574&quot;&gt;Trie Tree&lt;&#x2F;a&gt;，查找效率也是非常高的，主要的耗时是在构造 Trie tree 的时候，如果语料比较大的话，用 Python 可能要几十秒到几分钟的时间，可以适当精简基础语料，当然也可以考虑用 Rust 写。&lt;&#x2F;p&gt;
&lt;p&gt;下面来说一下进一步优化的几个问题和解决方案：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;为了提高输入效率，需要支持给出声母即可得到候选词，这部分可以在 Trie tree 里面处理声母和韵母，遇到连续的声母的情况可以把第一个声母后面的韵母跳过直接查找对应的第二个声母。&lt;&#x2F;li&gt;
&lt;li&gt;对模糊音的支持，还是有很多人分不清前鼻音和后鼻音，加上很多地方的语言多 N、L 之类分不清楚，前者跟上面的解决方案一样，后者就只能多设置一条路径了。&lt;&#x2F;li&gt;
&lt;li&gt;一些简单的纠错方案，主要是常见的韵母部分顺序错误，以及手机上相邻按键的误触等，只好多设置一条路径了。&lt;&#x2F;li&gt;
&lt;li&gt;根据用户的输入记录修改对应的候选词权重，最好要做到生僻字一次性移到第一页的候选词列表中，也要当心用户错误选词使某些词词频太高。&lt;&#x2F;li&gt;
&lt;li&gt;对用户个性化词典的导入导出功能，这个就简单多了。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;以上就是我自己的一点粗浅观点，我自己也只是根据业务需求实现了一部分，还没有真的写一个完整版出来，不过确实考虑用 Rust 实现一个玩玩。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>拼写检查器</title>
		<published>2018-06-17T00:00:00+00:00</published>
		<updated>2018-06-17T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/rustpin-xie-jian-cha-qi/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/rustpin-xie-jian-cha-qi/</id>
		<content type="html">&lt;p&gt;跟拼写检查器还是有点渊源的。想当初做数学建模的时候，就遇到过一次类似的问题，于是去网上搜到 &lt;a href=&quot;http:&#x2F;&#x2F;norvig.com&#x2F;spell-correct.html&quot;&gt;Peter Norvig&lt;&#x2F;a&gt; 的教程，写的非常好，当时看到短短二十行代码就能很好解决这个问题，实在是惊艳。而我也是从那个时候开始学习 Python 的。当然，以我初学者的水平要想一时间完全看懂他的代码是不太可能的，不过还是能理解大体的流程，做了一定修改后留作自用。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;到现在大概过去三年了，重新遇到了 query rewriting 问题，虽然这次并不需要用到这段代码了，不过作为一个例子来练手 Rust 也是不错的，毕竟看了好久的 Rust 文章和代码，抄过一些引擎，感受过语法的复杂却没自己写过，实在是不应该。&lt;&#x2F;p&gt;
&lt;p&gt;一开始的思路很简单，直接对照着 Python 版本做翻译就好了。好久没有接触静态语言了，每个变量都要考虑类型问题，指针更需要认真对待，而且 Rust 里面还有生命周期的问题，每个变量什么时候生成，能存活到什么时候都要心里有数。这一点一开始没觉得又什么，天真地以为能一眼看出来，应该很容易 debug。但是当遇到借用检查器的问题时，就真的一脸懵逼了，好好的一个 &lt;code&gt;closure&lt;&#x2F;code&gt; 里面怎么就有一个变量活得不够长呢？&lt;&#x2F;p&gt;
&lt;p&gt;一开始要适应 Rust 真的非常痛苦了，跟当初刚学编程接触 C 语言有一拼，不过也有很多不一样的地方：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;C 的资料非常多，当然也不乏各种小白瞎写的和各种复制粘贴的，Rust 资料就少得多了，基本都是文档和社区的，还有一些 StackOverflow 和 Reddit 上面的，总之资料很有限，而且不一定有对应的问题。&lt;&#x2F;li&gt;
&lt;li&gt;C 虽然发展了很多年了，但是初学者接触的各种函数接口基本都固定了，而 Rust 到现在还发展地很激进，可能你查到的写法已经不能用了，而且有时候对应的文档还没有更新，这时候你又偏偏用 nightly 版本，那么很不幸，你只能靠插件的提示自己解决问题了。&lt;&#x2F;li&gt;
&lt;li&gt;Rust 还很新，虽然它的报错提示做得很好且一直在改进，但是难免有很多提示都不够准确，让人摸不着头脑。&lt;&#x2F;li&gt;
&lt;li&gt;Rust 相关的生态还不够完善，甚至是一些基本的东西也可能不完善，我用到的一个 &lt;code&gt;max_by_key&lt;&#x2F;code&gt; 居然还不支持 &lt;code&gt;float&lt;&#x2F;code&gt; 型，只好该用 &lt;code&gt;cmp&lt;&#x2F;code&gt; 了。&lt;&#x2F;li&gt;
&lt;li&gt;Rust 社区还是非常活跃的，只不过中文社区基本废弃了，虽然使用英文对开发者是基本要求了，不过还是希望能有中文的活跃社区帮助更多的人来学习这门语言。（说起来我为了写好英文版的提问，自己看了几遍问题就自己想出来，真的是很尴尬）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;中间最崩溃的确实还是借用检查器的问题，怪不得 Lo 姐会说这个把她搞得不想碰 Rust 了。当然也有报错信息不到位的问题，不过新手确实很容易卡在这里，而且很可能查到的资料都没法给出正确的提示。我自己也一度怀疑人生了，然后去搜了几个现成的 Rust 版拼写检查器，发现别人写法非常老实，各种 &lt;code&gt;if&lt;&#x2F;code&gt; 和 &lt;code&gt;for&lt;&#x2F;code&gt; 就没有什么问题，而我非要用什么 &lt;code&gt;iter&lt;&#x2F;code&gt; ，&lt;code&gt;match&lt;&#x2F;code&gt;，&lt;code&gt;collect&lt;&#x2F;code&gt; 之类的写法，接连碰壁。不过最后能成功写出来，确实感觉学到了不少东西，也对 Rust 理解更深了，还是值得的。（虽然我差不多花了一天的时间写了一个可能用 Python 十几分钟就能实现的功能）&lt;&#x2F;p&gt;
&lt;p&gt;磕磕绊绊，还是把&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Momingcoder&#x2F;spelling_corrector&quot;&gt;代码&lt;&#x2F;a&gt;写完了，真的是好久都没有这种体验了，过程虽然痛苦但是结果还是很幸福，追求技术的幸福。&lt;&#x2F;p&gt;
&lt;p&gt;总的来说，Rust 还是一门非常优秀的语言，现在新出的 deno 好像也要大规模使用 Rust 了，我觉的自己的选择还是没错的，虽然现在基本上看不到有人招 Rust 的，这不影响。自己喜欢就好，可以自己拿来做一些合适的项目，然后开源出去。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Relevance: from TFIDF to BM25</title>
		<published>2018-03-12T00:00:00+00:00</published>
		<updated>2018-03-12T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/relevance-from-tfidf-to-bm25/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/relevance-from-tfidf-to-bm25/</id>
		<content type="html">&lt;p&gt;在信息检索系统中，TFIDF 和 BM25 函数都可以用来计算文档的相关度并进行排序。其中，TFIDF 也经常被用在自然语言处理中，BM25 则可以看做是 TFIDF 的进一步演化。在处理搜索字符串的时候，它们采用的都是 Bag-of-Word 方式，也就是说会忽略掉词的出现顺序，只考虑词出现与否和词频。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;tfidf&quot;&gt;TFIDF&lt;&#x2F;h2&gt;
&lt;p&gt;TFIDF 分为 TF (Term Frequency) 词频和 IDF (Inverse Document Frequency) 逆文档频率。&lt;&#x2F;p&gt;
&lt;p&gt;试想一下，我们想计算一个词的重要性，最自然的想法就是看看这个词在文章中出现了多少次，频繁出现的词很可能跟文章讨论的话题相关，这也就是计算 TF 的理由。另一方面，stop words 也具有出现频率非常高的特性，为了避免这些词影响我们对文章关键词的分析，就需要用到逆文档频率，也就是查看这些词在其他文档中出现的频率，频率越高说明该词越普通，很可能属于 stop words 而不是我们想找的文章关键词。&lt;&#x2F;p&gt;
&lt;p&gt;TF 和 IDF 公式都有很多变种，这里介绍最常见的。&lt;&#x2F;p&gt;
&lt;p&gt;$$TF(t, d) = f_{t, d}&#x2F;\sum_{t&#x27; \in d}f_{t&#x27;, d}$$&lt;&#x2F;p&gt;
&lt;p&gt;$$IDF(t, D)=log(\frac{N}{{d \in D : t \in d}})$$&lt;&#x2F;p&gt;
&lt;p&gt;$$TFIDF(t, d, D) = TF(t, d) \cdot IDF(t, D)$$&lt;&#x2F;p&gt;
&lt;p&gt;其中，$t$ 表示一个词，$d$ 表示一篇文档，$D$ 表示文档的集合，$N$ 表示文档的总数。&lt;&#x2F;p&gt;
&lt;p&gt;在 ES (Elasticsearch) 中，通常是取 $sqrt(TF)$ ，并对 $IDF$ 进行平滑处理并加 1，变成 $log(\frac{N}{(d \in D : t \in d) + 1}) + 1$ 。此外，ES 中还会考虑匹配到的文本长度，短文本中出现的关键词明显要比长文本中的关键词更有说服力，引入 $Norm= 1 &#x2F; sqrt(length)$ ，最终公式为 $TFIDF_{ES} = TF_{ES} \cdot IDF_{ES} \cdot Norm$ 。值得注意的是，ES 中计算文档总数的时候，会把刚刚删除的文档也算进去，进行合并之后才会正常，而且 $Norm$ 的值是以 8-bit float 型保存的，因此经常会出现很多奇怪的问题。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bm25&quot;&gt;BM25&lt;&#x2F;h2&gt;
&lt;p&gt;BM 表示 best match 。BM25 经常被用作搜索引擎的匹配度排序函数，目前是 Lucene, Solr, Elasticsearch 的默认函数。&lt;&#x2F;p&gt;
&lt;p&gt;BM25 的公式如下：&lt;&#x2F;p&gt;
&lt;p&gt;$$IDF(q_i) = log \frac{N-n(q_i)+0.5}{n(q_i)+0.5}$$&lt;&#x2F;p&gt;
&lt;p&gt;$$BM25(D, Q) = \sum_{i=1}^{n}IDF(q_i) \cdot \frac{f(q_i, D) \cdot (k_1 + 1)}{f(q_i, D) + k_1 \cdot (1 - b + b \cdot \frac{|D|}{avgdl})}$$&lt;&#x2F;p&gt;
&lt;p&gt;其中，$f(q_i, D)$ 表示 $q_i$ 在 $D$ 中的频率，$|D|$ 表示 $D$ 中词的个数，$avgdl$ 表示文档的平均长度，$k_1$ 和 $b$ 是两个参数，$k_1 \in [1.2, 2.0]$ 调节词频结果在词频饱和度中的增长速度，$b \in [0, 1.0]$ 调节文本长度对词的归一化程度。&lt;&#x2F;p&gt;
&lt;p&gt;和 TFIDF 相比，BM25 最大的特点就是增加了文本长度对词的归一化程度，并且这个归一化比上面提到的 ES 中 TFIDF 的归一化要更加合理，考虑到了所有文档的平均长度。&lt;&#x2F;p&gt;
&lt;p&gt;在 ES 的实现中，$IDF$ 部分跟 TFIDF 一样增加了平滑处理并加 1，因为原来的式子有可能出现负值。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shu-zhi-fen-xi&quot;&gt;数值分析&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;idf&quot;&gt;IDF&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.desmos.com&#x2F;calculator&#x2F;hg5tuporhs&quot;&gt;idf.png&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;红色为经典的 BM25 IDF 函数曲线，蓝色为 ES 中使用的 IDF 曲线。（N=200）&lt;&#x2F;p&gt;
&lt;p&gt;从图中可知，函数的极值跟 N 有关，N 越大，极值越大。随着 $x$ 的增大，IDF 值减小的速度逐渐放缓。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tf&quot;&gt;TF&lt;&#x2F;h3&gt;
&lt;p&gt;首先，令 $b = 0$ ，观察函数的走势。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.desmos.com&#x2F;calculator&#x2F;i700nwzj68&quot;&gt;tf.png&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;红色为 ES 中 TFIDF 的 TF 曲线，蓝色为 ES 中 BM25 的 TF 曲线。TFIDF 的 TF 是没有上界的，而 BM25 的 TF 上界为 $k_1$ ，通常取 $k_1 = 1.2$ 。也就是说，到达一定频率后，再增加也不会对结果产生太大影响。&lt;&#x2F;p&gt;
&lt;p&gt;之后考虑不同的文本长度对函数的影响。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.desmos.com&#x2F;calculator&#x2F;p9babkz6p8&quot;&gt;tfd.png&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;三条线从上到下依次是平均文档长度的 0.1，1，10 倍，取 $k_1 = 1.2, b = 0.75$ 。三条线趋于饱和的速度跟平均文档的长度相关，平均文档长度越长，趋于饱和的速度越慢。也就是说，如果是长文本的搜索，需要较高的词频才能使 TF 值接近饱和，这一点比较符合人们的认知。&lt;&#x2F;p&gt;
&lt;p&gt;综上所述，BM25 的极值取决于文档总数 $N$ 和参数 $k_1$，即 $max(BM25) = k_1 \cdot log(N)$ 。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ju-xian-xing&quot;&gt;局限性&lt;&#x2F;h2&gt;
&lt;p&gt;BM25 相对于 TFIDF 有了很大的改进，有的人认为 BM25 是 TFIDF 类函数的 state-of-the-art 。客观来说，在文档搜索方面，BM25 取得了很好的效果，但也仅限于对文档进行搜索匹配。搜索是一项复杂的任务，在某些场景下，可能更需要选取合适的函数，或者采取其他策略。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python Package</title>
		<published>2018-03-10T00:00:00+00:00</published>
		<updated>2018-03-10T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/python-package/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/python-package/</id>
		<content type="html">&lt;p&gt;偶尔手痒了会撸一个 Python 的项目打包发布到 PyPI 上，方便以后安装使用。即使不是打算发布的，如果考虑把文档写在代码的注释里然后用 Sphinx 生成的，通常也是打包安装到本地，然后在一个地方集中生成文档，方便管理。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;今天就来记录一下 Python 项目打包的流程。（其实是怕自己又犯傻折腾半天找不到原因）&lt;a href=&quot;https:&#x2F;&#x2F;packaging.python.org&#x2F;tutorials&#x2F;distributing-packages&#x2F;&quot;&gt;官方文档&lt;&#x2F;a&gt; 改了几次之后明显质量好多了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zu-cheng&quot;&gt;组成&lt;&#x2F;h2&gt;
&lt;p&gt;一个简单的项目，通常由以下几部分组成。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setup.py&lt;&#x2F;code&gt; ：核心配置文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;setup.cfg&lt;&#x2F;code&gt; ：wheel 配置相关&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;README.rst&lt;&#x2F;code&gt; ：PyPI 不支持 &lt;strong&gt;Markdown&lt;&#x2F;strong&gt;，必须用 &lt;strong&gt;reStructuredText&lt;&#x2F;strong&gt; ，不是必须的&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MANIFEST.in&lt;&#x2F;code&gt; ：是否需要包含其他非必须文件，不是必须的&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;LICENSE.txt&lt;&#x2F;code&gt; ：不是必须的&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;your package&amp;gt;&lt;&#x2F;code&gt; ：不是必须的，但不可能没有这个吧 : )&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.travis.yml&lt;&#x2F;code&gt; ：集成测试配置，不是必须的&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;setup-py&quot;&gt;&lt;code&gt;setup.py&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;核心文件，感觉像 Sphinx 那样自动生成应该更好用。下面是一个 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;sampleproject&#x2F;blob&#x2F;master&#x2F;setup.py&quot;&gt;官方&lt;&#x2F;a&gt; 缩略版的例子，复制粘贴大法好。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;setuptools &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;setup, find_packages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;codecs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;open
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;os &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;path
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;here &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;abspath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(__file__))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Get the long description from the README file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;open(path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(here, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;README.rst&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;long_description &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;setup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;sampleproject&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Required
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;1.2.0&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Required
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;A sample Python project&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Required
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;long_description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;long_description,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Optional
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;sampleproject&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Optional
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;The Python Packaging Authority&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Optional
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;author_email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;pypa-dev@googlegroups.com&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Optional
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;packages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;find_packages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;exclude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;contrib&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;docs&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;tests&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;]),  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Required
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;install_requires&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;peppercorn&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;],  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Optional
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;entry_points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;console_scripts&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;: [
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;my_func=sampleproject:main&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# Optional
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;        ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;看名字就知道是干嘛的了，就不多解释了。&lt;&#x2F;p&gt;
&lt;p&gt;如果需要包含模型数据之类的，或者需要在安装后执行一个脚本的，可以查阅文档看相关的配置。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;version&lt;&#x2F;code&gt; 是比较需要注意的，一定要按照规范的格式来。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;entry_points&lt;&#x2F;code&gt; 可以在安装的时候注册一个命令行函数，上面的例子中，函数名是 &lt;code&gt;my_func&lt;&#x2F;code&gt;，对应的执行函数是 &lt;code&gt;sampleproject&lt;&#x2F;code&gt; 下面的 &lt;code&gt;main&lt;&#x2F;code&gt; 函数。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setup-cfg&quot;&gt;&lt;code&gt;setup.cfg&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;主要是关于项目是否支持 Python 2 和 Python 3 的，我已经弃用 Python 2 了，所以默认配置就够了。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;[bdist_wheel]
&lt;&#x2F;span&gt;&lt;span&gt;universal=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;readme-rst&quot;&gt;&lt;code&gt;README.rst&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;不是很习惯这个格式，而且 PyPI 支持的 rst 跟 Sphinx 又不太一样。&lt;&#x2F;p&gt;
&lt;p&gt;不过没关系，反正这个文件仅仅是在 PyPI 页面上显示的，大家习惯了从 GitHub 上看详细介绍，然后去看文档，所以没有这个文件也没关系，或者直接用一些工具转一下。&lt;&#x2F;p&gt;
&lt;p&gt;当然熟悉这个格式的就直接用这个好了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;manifest-in&quot;&gt;&lt;code&gt;MANIFEST.in&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;如果你需要把协议，数据，文档等东西也打包进去的话，可以配置这个。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;# Include the license file
&lt;&#x2F;span&gt;&lt;span&gt;include LICENSE.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Include the data files
&lt;&#x2F;span&gt;&lt;span&gt;recursive-include data *
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;travis-yml&quot;&gt;&lt;code&gt;.travis.yml&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;一般把代码发布到 GitHub 的时候习惯性会用这个，可以获得一个测试通过的标志 d(`･∀･)b&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;language&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;python
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;python&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;2.7&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;3.5&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;install&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;pip install -r requirements.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;pytest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;复制粘贴大法好。上次手误打错一个单词，然后测试的时候总是通不过，半天没找到原因 ( º﹃º )&lt;&#x2F;p&gt;
&lt;h2 id=&quot;da-bao&quot;&gt;打包&lt;&#x2F;h2&gt;
&lt;p&gt;这个时候已经可以安装到本地了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;python&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; setup.py install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;或者安装到当前路径下，适合做调试的时候使用：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;pip3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;执行之后会生成几个文件夹，暂时不用管。&lt;&#x2F;p&gt;
&lt;p&gt;这个时候有必要了解一下 Wheel 和 Egg 的区别了，详情看 &lt;a href=&quot;https:&#x2F;&#x2F;packaging.python.org&#x2F;discussions&#x2F;wheel-vs-egg&#x2F;&quot;&gt;官方&lt;&#x2F;a&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;先说个坑，我提交 Egg 之后发现根本没法安装，总是报错：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;Collecting plane-0.0.3-py3.5.egg
&lt;&#x2F;span&gt;&lt;span&gt;Could not find a version that satisfies the requirement plane-0.0.3-py3.5.egg (from versions: )
&lt;&#x2F;span&gt;&lt;span&gt;No matching distribution found for plane-0.0.3-py3.5.egg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;搜一波反正是找不到一个合理的解释的。然后换到 Wheel 就一切正常了。&lt;&#x2F;p&gt;
&lt;p&gt;总之，用 Wheel 这个新的格式肯定没错了。&lt;&#x2F;p&gt;
&lt;p&gt;生成 wheel 文件：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;python&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; setup.py bdist_wheel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --universal
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果你在 &lt;code&gt;setup.cfg&lt;&#x2F;code&gt; 中配置了，那么就可以省略后面的参数了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;fa-bu&quot;&gt;发布&lt;&#x2F;h2&gt;
&lt;p&gt;这时候要用到 &lt;code&gt;twine&lt;&#x2F;code&gt; 这个工具了，想起来几年前发布的时候各种奇怪的流程，现在真是精简多了。&lt;&#x2F;p&gt;
&lt;p&gt;首先你要在 &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;account&#x2F;register&#x2F;&quot;&gt;PyPI&lt;&#x2F;a&gt; 上注册账号。&lt;&#x2F;p&gt;
&lt;p&gt;为了不用每次提交都手动填账号密码，可以在本地写一个文件：&lt;code&gt;$HOME&#x2F;.pypirc&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;[pypi]
&lt;&#x2F;span&gt;&lt;span&gt;username = &amp;lt;username&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;password = &amp;lt;password&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后提交就可以了：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;twine upload dist&#x2F;&amp;lt;your-wheel-package&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;提交后记得测试一下能不能用 PIP 安装。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python 编码</title>
		<published>2018-02-24T00:00:00+00:00</published>
		<updated>2018-02-24T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/python-bian-ma/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/python-bian-ma/</id>
		<content type="html">&lt;p&gt;毫不客气地说，编码真的是 Python 使用者遇到的最多的问题之一。新手看了会崩溃，老手遇到会流泪（感叹以前踩过的坑）。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;在踩过很多很多坑之后，已经对这个问题麻木了，反正我现在基本上只用 Python 3 了，问题也比较少了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unicode&quot;&gt;Unicode&lt;&#x2F;h2&gt;
&lt;p&gt;在讲问题之前先来看两个官方的 HOWTO 文档：&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;2&#x2F;howto&#x2F;unicode.html&quot;&gt;Unicode HOWTO Python 2&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;howto&#x2F;unicode.html&quot;&gt;Unicode HOWTO Python 3&lt;&#x2F;a&gt; 。这两篇前面讲的内容基本一致，就是说美国人一开始搞了 ASCII 编码，只有 0 - 127，后来不断增加新的字符，发现 8-bit 不够用了，然后就搞了一种 16-bit 的 Unicode，Unicode 的一种映射方法就是 UTF (Unicode Transformation Format)，大家都很熟悉 UTF-8 了。文档后面就分别是 Python 2 和 3 中的 Unicode 了，其他模块也就是 Regex 需要注意一下，Python 2 中匹配的是 ASCII，而 Python 3 中默认是匹配 Unicode，如果需要切换到 ASCII，需要设置 &lt;code&gt;flag=re.A&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;python-2&quot;&gt;Python 2&lt;&#x2F;h2&gt;
&lt;p&gt;在 Python 2 中编码算是一个老大难的问题了，无数新手栽在这里，想当初搜一下这个问题，博客里面基本都是说在 py 文件的开头加上 &lt;code&gt;# -*- coding: utf-8 -*-&lt;&#x2F;code&gt; 来保平安，如果这么简单就解决了那真是该烧高香了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;encode-decode-utf-8&quot;&gt;encode &#x2F; decode utf-8&lt;&#x2F;h3&gt;
&lt;p&gt;Python 2 默认编码是 ASCII，要使用 Unicode String 还必须写成 &lt;code&gt;u&#x27;string&#x27;&lt;&#x2F;code&gt; 的形式，真的是非常蛋疼了。&lt;&#x2F;p&gt;
&lt;p&gt;当需要向终端输出字符串，或者将字符串写入文件，或者调用第三方包处理的时候，就可能会遇到编码问题了，这时候通常可以简单的通过 &lt;code&gt;string.encode(&#x27;utf-8&#x27;)&lt;&#x2F;code&gt; 和 &lt;code&gt;string.decode(&#x27;utf-8&#x27;)&lt;&#x2F;code&gt; 来解决。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sys-reload&quot;&gt;sys reload&lt;&#x2F;h3&gt;
&lt;p&gt;有时候问题很顽固，有的环境上就是出问题，那就可以考虑在文件开头加上下面这几行，重置运行环境的编码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;sys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;reload(sys)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;sys.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;setdefaultencoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;UTF8&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;latin&quot;&gt;latin&lt;&#x2F;h3&gt;
&lt;p&gt;有时候爬取的网页文本，不管怎么 &lt;code&gt;encode&lt;&#x2F;code&gt; 、&lt;code&gt;decode&lt;&#x2F;code&gt; 都总是在报错，这时候可以考虑把 &lt;code&gt;latin&lt;&#x2F;code&gt; 编码当做中间编码，先转 &lt;code&gt;latin&lt;&#x2F;code&gt; 再转 &lt;code&gt;unicode&lt;&#x2F;code&gt; 。还有问题就 &lt;code&gt;ignore&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;codecs&quot;&gt;codecs&lt;&#x2F;h3&gt;
&lt;p&gt;Python 有专门的 &lt;code&gt;codecs&lt;&#x2F;code&gt; 这么一个包，提供更多编码方面的接口，可以参考官方文档 &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3.6&#x2F;library&#x2F;codecs.html&quot;&gt;codecs&lt;&#x2F;a&gt; 。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;python-3&quot;&gt;Python 3&lt;&#x2F;h2&gt;
&lt;p&gt;到了 Python 3 之后编码问题会少很多，但是并不意味着你就可以高枕无忧了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;encoding&quot;&gt;encoding&lt;&#x2F;h3&gt;
&lt;p&gt;为了保证不出问题，读取文件的时候最好明确指定编码方式：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;open(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;README.md&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;f:
&lt;&#x2F;span&gt;&lt;span&gt;readme &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不要怕麻烦，有时候因为机器或者容器本身的环境，就可能踩到很多坑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;environment-variable&quot;&gt;Environment Variable&lt;&#x2F;h3&gt;
&lt;p&gt;有时候用 Docker 的时候会遇到这种问题，明明是 Python 3，还指明了 encoding 方式，为什么还出问题呢？通常是因为容器本身的环境变量有问题。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;LC_ALL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;en_US.UTF-8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;LANG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;en_US.UTF-8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>面具</title>
		<published>2018-01-27T00:00:00+00:00</published>
		<updated>2018-01-27T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/mian-ju/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/mian-ju/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;面具戴太久，就会长到脸上，再想揭下来，除非伤筋动骨扒皮。		——鲁迅&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这里的面具虽然指的不是游坦之的面具，不过这确实是个很符合上面这句话意思的例子。游坦之的面具是阿紫给他的枷锁，即使他后来忍痛揭下来，还会有无形的枷锁和满脸的伤疤。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;人活着，或多或少会受到周围环境的影响。有的人鄙视随波逐流的扁舟，扬言要坚如磐石，屹立不倒，即使棱角被磨平，方向也不会改变。也许，他们真的做到了，即使历经风霜，依旧保留了一身的风骨。这样的人当然是可敬的，他们做到了大多数人不敢做，不愿做，做不了的事情。但是他们就没有面具，宛如三岁孩童般纯真吗？非也。面具人人都有，只不过区别在遮盖了多少，造成了多少假象。&lt;&#x2F;p&gt;
&lt;p&gt;那些丑陋的面具懒得多说了。&lt;&#x2F;p&gt;
&lt;p&gt;很多人出发点并无多少恶意，也许是害怕给别人带来伤害，也许是不愿意被人窥探内心，也许只是想自己觉得有意思而已。偶尔戴了那么一次，后来情况就一发不可收拾，不戴的话势必会带来很多麻烦，只好不情愿地戴上了。就这样，面具再也没有摘下来过，以至于到后来，我们都忘了，到底是戴了一张面具，还是说这面具本就是长在脸上的一张皮？&lt;&#x2F;p&gt;
&lt;p&gt;也许有一天，你在照镜子的时候，发现镜子里的自己已经完全变了模样，眼角的皱纹像是随时准备堆笑，微企的双唇像是马上要拒绝别人的请求，眼神中充满惊恐，这个人真的还是我吗？&lt;&#x2F;p&gt;
&lt;p&gt;也许一直都没有这么一天，也许你以为那张熟悉的脸就是你本来的模样。你以为，自己一直在抗拒被环境改变，在坚持自己的原则，而且已经很努力了，所有人似乎都相信了，孰不知这样的过程本身也是在改变这你，在无意中给你戴上一张纤薄的面具，而你对此一无所知，还沉浸在自己与环境的对抗中。这张面具就慢慢渗入，逐渐融在了脸上，仿佛只是新陈代谢后的一张皮而已。日积月累，长大成人了，脸上多了岁月的痕迹，你窃喜自己没忘初心，还是当初那个少年，却不曾想，这些留在脸上的痕迹，也是自己不经意戴上的面具。&lt;&#x2F;p&gt;
&lt;p&gt;这样的面具自然是避无可避，之所以要讲出来，为的就是让自己明白，很多时候，自己也是戴着面具的，和自己看得起看不起的人没什么两样。意识到这一点的时候，恐怕已经不容易摘下来了，不管是野蛮地撕扯还是温和地消磨，都难免留下伤口。&lt;&#x2F;p&gt;
&lt;p&gt;但是，这样的面具即使留着又如何？有时候坦然接受不失为一种好办法。内心的我是留给我自己的，旁人所看到的都是他们想看到的，愿意了解你的人自然会看到那个最原始的你，这区区面具又有什么关系？&lt;&#x2F;p&gt;
&lt;p&gt;+++++++++++++++-&lt;&#x2F;p&gt;
&lt;p&gt;写了这么多发现好像绕回去了。不过没关系，至少思考了一圈，写下来提醒自己吧。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Deep Learning Applications</title>
		<published>2018-01-23T00:00:00+00:00</published>
		<updated>2018-01-23T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/deep-learning-applications/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/deep-learning-applications/</id>
		<content type="html">&lt;p&gt;Deep Learning Applications in NLP, CV and RL etc.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;natural-language-processing&quot;&gt;Natural Language Processing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Machine Translation
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;nmt&quot;&gt;Google Neural Machine Translation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;facebookresearch&#x2F;fairseq&quot;&gt;Facebook Fairseq&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Sentiment Analysis
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nlp.stanford.edu&#x2F;sentiment&#x2F;index.html&quot;&gt;Sentiment Analysis&lt;&#x2F;a&gt;&lt;!--more--&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Question Answering &amp;amp; Chatbot
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Conchylicultor&#x2F;DeepQA&quot;&gt;DeepQA&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jiweil&#x2F;Neural-Dialogue-Generation&quot;&gt;Neural Dialogue Generation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gunthercox&#x2F;ChatterBot&quot;&gt;ChatterBot&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Sentences Generation
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1511.06349.pdf&quot;&gt;Generating Sentences from a Continuous Space [pdf]&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ai.binwang.me&#x2F;couplet&#x2F;&quot;&gt;对对联&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Code Generation
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tonybeltramelli&#x2F;pix2code&quot;&gt;Pix2Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Reading Comprehension
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1607.04423.pdf&quot;&gt;Attention over Attention [pdf]&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Identify Duplicate Questions
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.kaggle.com&#x2F;c&#x2F;quora-question-pairs&quot;&gt;Kaggle: Quora Question Pairs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;computer-vision&quot;&gt;Computer Vision&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Image Style Transfer
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;luanfujun&#x2F;deep-photo-styletransfer&quot;&gt;Deep Photo Style Transfer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lengstrom&#x2F;fast-style-transfer&quot;&gt;Fast Style Transfer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;anishathalye&#x2F;neural-style&quot;&gt;Neural Style&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;deepdream&quot;&gt;Google Deep Dream&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awentzonline&#x2F;image-analogies&quot;&gt;Neural Image Analogies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Image Generation
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexjc&#x2F;neural-doodle&quot;&gt;Neural Doodle&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;makegirlsmoe&#x2F;makegirlsmoe_web&quot;&gt;Make Girls Moe&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AlexiaJM&#x2F;Deep-learning-with-cats&quot;&gt;Deep Learning with Cats&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Fonts Generation
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;erikbern&#x2F;deep-fonts&quot;&gt;Deep Fonts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;patrickgadd&#x2F;feel-the-kern&quot;&gt;Feel the Kern&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Colorize Grayscale Images
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pavelgonchar&#x2F;colornet&quot;&gt;ColorNet&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Automatic Coloring
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kvfrans&#x2F;deepcolor&quot;&gt;Deep Color&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Denoise
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cszn&#x2F;DnCNN&quot;&gt;DnCNN&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Inpaiting
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Yijunmaverick&#x2F;GenerativeFaceCompletion&quot;&gt;Generative Face Completion&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;leehomyc&#x2F;Faster-High-Res-Neural-Inpainting&quot;&gt;High-Resolution Image Inpainting using Multi-Scale Neural Patch Synthesis&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pathak22&#x2F;context-encoder&quot;&gt;Context Encoder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Super Resolution
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexjc&#x2F;neural-enhance&quot;&gt;Neural Enhance&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;david-gpu&#x2F;srez&quot;&gt;srez&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;mmlab.ie.cuhk.edu.hk&#x2F;projects&#x2F;SRCNN.html&quot;&gt;SRCNN&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Image Description
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;karpathy&#x2F;neuraltalk&quot;&gt;NeuralTalk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;karpathy&#x2F;neuraltalk2&quot;&gt;NeuralTalk2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ryankiros&#x2F;neural-storyteller&quot;&gt;StoryTeller&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;audio-signal-processing&quot;&gt;Audio Signal Processing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Music Generation
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jisungk&#x2F;deepjazz&quot;&gt;Deep Jazz&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;feynmanliang&#x2F;bachbot&quot;&gt;Bach Bot&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Voice Style Transfer
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;andabi&#x2F;deep-voice-conversion&quot;&gt;Deep voice conversion&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Speech Recognition
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1707.07413.pdf&quot;&gt;Baidu Deep Speech 3 [pdf]&lt;&#x2F;a&gt;    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;DeepSpeech&quot;&gt;Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pannous&#x2F;tensorflow-speech-recognition&quot;&gt;Seq2Seq&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Text to Speech
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1702.07825v2.pdf&quot;&gt;Baidu Deep Voice [pdf]&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;reinforcement-learning&quot;&gt;Reinforcement Learning&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Game
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openai&#x2F;gym&quot;&gt;OpenAI Gym&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openai&#x2F;universe&quot;&gt;OpenAI Universe&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;deepmind&#x2F;lab&quot;&gt;DeepMind Lab&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nature.com&#x2F;articles&#x2F;nature24270&quot;&gt;AlphaGo Zero&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>PyTorch 踩到的坑</title>
		<published>2018-01-15T00:00:00+00:00</published>
		<updated>2018-01-15T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/pytorch-cai-dao-de-keng/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/pytorch-cai-dao-de-keng/</id>
		<content type="html">&lt;p&gt;目前的深度学习框架实在太多了，初学者难免不知道选哪个才好，是追求曝光率最高的 &lt;code&gt;TensorFlow&lt;&#x2F;code&gt;，还是最 Geek 的 &lt;code&gt;MXNet&lt;&#x2F;code&gt;，又或是最易用的 &lt;code&gt;Keras&lt;&#x2F;code&gt;，又或者是最贴近 Python 编程思维的 &lt;code&gt;Pytorch&lt;&#x2F;code&gt;？&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;在这诸多框架中，我也曾徘徊不定，从 &lt;code&gt;TensorFlow&lt;&#x2F;code&gt; 入手，实在太难写了，然后换到 &lt;code&gt;Keras&lt;&#x2F;code&gt;， 发现想实现很多细节的东西还是比较麻烦，而且 debug 都很难受，最后选了 &lt;code&gt;Pytorch&lt;&#x2F;code&gt;，在单机上，目前可以说是无可匹敌的。不过，&lt;code&gt;Pytorch&lt;&#x2F;code&gt; 也是有它的坑的。下面来详细说说我目前遇到的那些坑。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dropout-batchnorm&quot;&gt;Dropout &amp;amp; BatchNorm&lt;&#x2F;h3&gt;
&lt;p&gt;如果模型里面包含了这两个 Layer ，就需要特别注意了，这时候模型需要在 &lt;code&gt;model.train()&lt;&#x2F;code&gt; 和 &lt;code&gt;model.eval()&lt;&#x2F;code&gt; 两个状态之间切换，来激活或固定这两个 Layer 。&lt;&#x2F;p&gt;
&lt;p&gt;这一点非常重要，而且不易发现，官方的文档中对应的 API 部分并没有写。而且即便没有使用，模型依旧可以正常在一定数量的 batch 上进行训练，最后你会在 predict 的时候发现问题。以 BatchNorm 为例，因为 predict 的时候通常是对单个 query 进行的，结果会出现很大的偏差，对应到图像上，轻则图片的颜色变得很不正常，如果是批量的则可以通过 norm 来消除一定的影响，重则生成的图片简直像妖怪；对应到文本分类上，就可能出现任意输入的输出都是常数了。&lt;&#x2F;p&gt;
&lt;p&gt;感受过 &lt;code&gt;Keras&lt;&#x2F;code&gt; 的简易之后，一开始很容易忽略掉这个。不得不说 &lt;code&gt;Keras&lt;&#x2F;code&gt; 设计的真好，太容易上手了，都有点娇生惯养的意思了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conv1d-pool1d&quot;&gt;Conv1d &amp;amp; Pool1d&lt;&#x2F;h3&gt;
&lt;p&gt;对一维的数据进行操作，对象通常是文本。一般处理文本数据的时候，都是将一个句子先用向量表示，如 &lt;code&gt;Word2Vec&lt;&#x2F;code&gt; 或者 &lt;code&gt;GloVe&lt;&#x2F;code&gt; 之类的，之后进行卷积操作时，是对 “字” 或者 “词” 进行卷积的，输入是 $size_{batch} \times length_{sentence} \times dimension_{embedding}$ ，输出是 $size_{batch} \times channel_{out} \times number_{filters}$ ，其中 $channel_{out}$ 由输入的 $length_{sentence}$ 和卷积所用的 $size_{kernel}, stride, padding, dilation$ 参数计算得到。不过在 &lt;code&gt;Pytorch&lt;&#x2F;code&gt; 中，卷积操作是对数据的最后一个维度进行卷积的，也就是对 Embedding 进行卷积，这时候就需要用户手动转置了。Pooling 操作也是一样的，只要一开始对输入进行了转置，后面就正常了。&lt;&#x2F;p&gt;
&lt;p&gt;是不是觉得不可思议，为什么会有这么反直觉的设计？我猜是因为 &lt;code&gt;Pytorch&lt;&#x2F;code&gt; 的卷积和池化接口，都是从图片的接口改过来的，因此保留的图片的那种顺序，而且 Pytorch 处理图片的时候是 channel-first 的，就这样，图片的长和宽对应于句子词向量的维度，图片的 channel 对应到句子的长度，应该算是设计的时候没有考虑清楚。&lt;&#x2F;p&gt;
&lt;p&gt;但其实回过头去看看，就发现从 Embedding 层开始顺序就不一样了……所以我算是强行往 Keras 的顺序上套，纯属自己折腾自己。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bao-cun-mo-xing&quot;&gt;保存模型&lt;&#x2F;h3&gt;
&lt;p&gt;通常来讲，保存模型的 best practice 当然是保留各层的参数，而不是把整个模型直接存成二进制，这样可以节省很多空间。&lt;&#x2F;p&gt;
&lt;p&gt;不过也有其他需求的时候，如果你的模型中包含了 pre-trained embedding layer ，那么模型本身就会变得非常大了，无论哪种方式都不优雅。既然如此，我们肯定倾向于直接存个二进制模型算了，这样加载的时候也很方便。不过 &lt;code&gt;Pytorch&lt;&#x2F;code&gt; 坑的地方就在于，你存的二进制文件的时候，当前目录下必须有模型的定义文件 &lt;code&gt;model.py&lt;&#x2F;code&gt; ，否则无法加载模型 ) : 。换句话说，并没有什么 best practice ，而是 only one practice 。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta&quot;&gt;其他&lt;&#x2F;h3&gt;
&lt;p&gt;算不上坑的地方，不过有待改进。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用 GPU 需要明确指定，并且对模型和数据执行 &lt;code&gt;.cuda()&lt;&#x2F;code&gt; 操作。记得 evaluate 或者 predict 时候对数据 &lt;code&gt;Variable(data, volatile=False)&lt;&#x2F;code&gt; ，可以加快速度。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Pytorch&lt;&#x2F;code&gt; 本身的 array 并不完全等同于 numpy.array ，有时候会踩到一些意想不到的坑，而且加载数据，保存数据的时候换来换去，真的挺麻烦的。&lt;&#x2F;li&gt;
&lt;li&gt;custom loss function 需要仔细考虑梯度传播的问题，这个有时间再写一篇介绍下，不算麻烦&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>GitHub 骗星星指南</title>
		<published>2018-01-10T00:00:00+00:00</published>
		<updated>2018-01-10T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/github-pian-xing-xing-zhi-nan/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/github-pian-xing-xing-zhi-nan/</id>
		<content type="html">&lt;p&gt;Star 对 GitHuber 来说还是很重要的，以至于淘宝都有代刷的业务了，就是不知道有没有发生过刷太多上了 Trending 的。&lt;&#x2F;p&gt;
&lt;p&gt;找人代刷毕竟太 low 了，我们还是要走别的路线，这样显得好像也是个正规军。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;shi-yao-zui-huo&quot;&gt;什么最火&lt;&#x2F;h3&gt;
&lt;p&gt;GitHub 上 star 最多的语言无疑是 JavaScript，基本上你造点前端的轮子，总还是容易拿到 star 的。&lt;&#x2F;p&gt;
&lt;p&gt;再看内容，awesome list 和各种教程无疑是最招人喜欢的。如果你觉得热门的语言都被人写的差不多了，那你可以挑别人没写过的方向，比如 2017 年自然语言处理进展，区块链从入门到被骗光之类的，写完往微博，知乎，推特，Facebook 上面一发，然后坐等 star 就可以了。&lt;&#x2F;p&gt;
&lt;p&gt;再说热点，前后端不是很清楚，反正我知道 TensorFlow 已经无数次上 Trending 榜了，深度学习就是这么火。当然，现在区块链相关的，也是非常容易上榜的。&lt;&#x2F;p&gt;
&lt;p&gt;还有一些老实人，写点有意思东西，造造轮子，或者重新发明了轮子，优秀的话也是可以的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xing-xing-bei-hou-shi-wu-jin-de-hei-an&quot;&gt;星星背后是无尽的黑暗&lt;&#x2F;h3&gt;
&lt;p&gt;并不是说 star 多的项目有多牛逼。&lt;&#x2F;p&gt;
&lt;p&gt;某某项目，吹的飞起，号称比正则库快了 1000 倍，看了下提供的论文，基本就是一篇大学生的课堂作业的形式，看了下原理，完全跟正则没关系。但是该作者依旧靠吹赢得了上千的 star，还有国内各种公众号轮流爆料，说什么年度十大机器学习项目，真的都是瞎子吗？&lt;&#x2F;p&gt;
&lt;p&gt;某某项目，上来就说什么不是最快也是最准确的分词模型，一个 LSTM ，没有论文，没有源代码，没有给出任何测评，Python 装一个 50M 多的模型，代码写的很烂，怎么看都是学生时代的产物。然而，几百 star 不要太随意。&lt;&#x2F;p&gt;
&lt;p&gt;社会，社会。&lt;&#x2F;p&gt;
&lt;p&gt;问了下周围的人，star 可能就跟 fork 一样当收藏用的。可以，这个我理解。但是你们点 star 之前真的就不仔细看看吗？你们的 star 真的很廉价啊。收藏这么多乱七八糟的东西，到时候也没法找吧？&lt;&#x2F;p&gt;
&lt;p&gt;真的，现在已经有了一定的免疫力了，看到项目会冷静分析下，确定真的是好东西再下手点 star 也不迟吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lao-shi-ren-gai-gan-ma&quot;&gt;老实人该干嘛&lt;&#x2F;h3&gt;
&lt;p&gt;优秀的项目理应获得 star，良币应当驱除劣币。&lt;&#x2F;p&gt;
&lt;p&gt;一份高质量的 README 是非常重要的。最好是有一个容易记住的名字，一个有趣的 logo ，比较详细的介绍和使用方法，有简单的例子帮助用户快速上手。&lt;&#x2F;p&gt;
&lt;p&gt;各种渠道的推广。再好的东西也怕巷子深。社交网络发动态，@ 各种同行业的牛人，自己写高质量的博客推广，提交搜索引擎。&lt;&#x2F;p&gt;
&lt;p&gt;当然最重要的是项目本身的质量。做人要有原则，是什么就写什么，吹牛逼总会被识破的，骗傻子有什么用，一个专业的技术分享网站，是要拿真本事说事儿的。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>通向财富自由之路</title>
		<published>2018-01-09T00:00:00+00:00</published>
		<updated>2018-01-09T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/tong-xiang-cai-fu-zi-you-zhi-lu/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/tong-xiang-cai-fu-zi-you-zhi-lu/</id>
		<content type="html">&lt;blockquote&gt;
&lt;p&gt;我们活着是为了什么？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这个哲学问题太难了，换个简单一点的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;怎么活着比较爽啊？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;显然，如果能实现财富自由的话，生活就能过得比较爽了，毕竟世界上 99.99% 的事情都可以通过钱来解决。实现财富自由之后，日子就爽多了，可以做自己喜欢的事情，哪怕你现在做的就是你喜欢的事情，解决钱的问题也会让你过得更爽。&lt;&#x2F;p&gt;
&lt;p&gt;首先，三省吾身：“能够继承巨额财富吗？有条件吃几十年的软饭吗？当年买比特币了吗？”。&lt;&#x2F;p&gt;
&lt;p&gt;如果都是否的话，那就可以继续往下看了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cheng-xu-yuan-yao-zen-yao-zou&quot;&gt;程序员要怎么走&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;gong-zuo&quot;&gt;工作&lt;&#x2F;h3&gt;
&lt;p&gt;想要靠工资实现财富自由的可能性，可能性跟买彩票差不多。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面，想要通过股票实现财富自由，大概还是有可能的。前提是，你跑去跟别人一起创业，或者在创业公司的刚起步的时候加入，然后事实证明你押对了。&lt;&#x2F;p&gt;
&lt;p&gt;基本上就像《黑客与画家》中写的那样，老板是不可能因为你做出了 10 个人头的贡献，就给你 10 倍工资，能给你 3 倍就已经是不错了。基本上，想要实现回报大约匹配的上自己的付出，那就只能走创业的道路了。&lt;&#x2F;p&gt;
&lt;p&gt;创业这条路，能存活的概率似乎也跟买彩票差不多。首先，靠谱的合作伙伴就很难找了。之后，创业的方向，技术选择，市场推广，员工招聘，品牌经营，等等，这里面的坑太多了。好处就是，万一功成名就，那真的是人生一大成就。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;side-project&quot;&gt;Side Project&lt;&#x2F;h3&gt;
&lt;p&gt;自己做一个好玩的项目，然后长期维护。假如项目真的有不少人用，收取点咨询费差不多也能过得滋润了。&lt;&#x2F;p&gt;
&lt;p&gt;通常，项目的出发点是自己的兴趣或者自己的需要，这未必符合大众的需求，也可能早就有了更好的实现而你不知道，也可能是自己写的太烂没法用。&lt;&#x2F;p&gt;
&lt;p&gt;不过，最难的地方在于，动手写。懒是最大的障碍，而且这个东西也没有 Deadline 这种强大的推动力，所以结果可想而知了。&lt;&#x2F;p&gt;
&lt;p&gt;很多 side project 到最后也很难真正盈利，靠着大家补贴的一点钱可没办法过得好，纯粹是靠着个人的兴趣和情怀在支撑。&lt;&#x2F;p&gt;
&lt;p&gt;估算一下成功率，估计也是一样低。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pei-xun&quot;&gt;培训&lt;&#x2F;h3&gt;
&lt;p&gt;任何一个看似火爆的行业，都不会缺培训班的。&lt;&#x2F;p&gt;
&lt;p&gt;大家其实还是很抵制编程的培训班的，毕竟质量太差，教出来的学生多数也都没法正常就业，理论知识薄弱，遇到问题没法正确处理。&lt;&#x2F;p&gt;
&lt;p&gt;但是不得不承认，这个行业盈利真的可怕，招生也非常容易，大概做到新东方那个体量就可以财富自由了 ：）。&lt;&#x2F;p&gt;
&lt;p&gt;这个方向也是有靠谱的东西的，现在 MOOC 还是很有前景的，专注于某个方向开一门课，其实也可以做到传播真正靠谱的知识，被同行认可。不过通常需要你先有一个吓唬人的 title ，什么大厂的高级什么开发，什么名校的什么教授之类的，门槛比较高。&lt;&#x2F;p&gt;
&lt;p&gt;当然，没有足够的 title 也完全可以走自媒体的道路。自己写高质量的文章，制作高质量的视频，慢慢积攒人气，也能够成为靠流量吃饭的人。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zi-mei-ti&quot;&gt;自媒体&lt;&#x2F;h3&gt;
&lt;p&gt;这年头自媒体真的是太火了，不过业内自媒体质量大多非常差，有价值的屈指可数。&lt;&#x2F;p&gt;
&lt;p&gt;这条路就很考验能否迎合大众需求了。比如你现在跟风写区块链，深度学习，那怎么说也比写形式语言方面的流量多吧。当然，质量也是很重要的。不过很多时候，你写的很深很专业，也可能适得其反，大众还是喜欢快餐，太过深奥的东西，也只能留给业内高手互相切磋了。通常，入门的东西常常能带来最多的流量，适当添加一些有深度的东西即可。&lt;&#x2F;p&gt;
&lt;p&gt;业内高手还是挺多的，但是能用把复杂的东西讲得简单易懂，就很难了。很多觉得一看就懂的东西，可能小白想破脑袋都想不明白。而理论知识和实践分别占多大比重，也是一个很重要的问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-tiao-long&quot;&gt;一条龙&lt;&#x2F;h3&gt;
&lt;p&gt;什么叫一条龙呢？&lt;&#x2F;p&gt;
&lt;p&gt;有了一个点子，开始拉伙儿创业，找投资找不到，直接散伙儿。&lt;&#x2F;p&gt;
&lt;p&gt;开始当做自己的 Side Project ，努力做，然后发现，不行啊，推广不出去，大家都不喜欢。&lt;&#x2F;p&gt;
&lt;p&gt;转头搞培训，给别人讲你的技术，踩过的坑。然后发现，不行啊，大家不买账，付款的太少。&lt;&#x2F;p&gt;
&lt;p&gt;然后开始运营自媒体，写自己的经历，写自己的感悟。然后发现，看客太少，东西没多少深度，养活不了自己。&lt;&#x2F;p&gt;
&lt;p&gt;走到最后了，开始利用自己丰富的经验，忽悠年轻人，“小伙子，不要总想着拿一份死工资，你那样是没法成功的，怎么样，来跟我混吧！”&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gao-bi-sai&quot;&gt;搞比赛&lt;&#x2F;h3&gt;
&lt;p&gt;Kaggle 之类的，现在国内也有很多了，几乎是不断有新比赛。&lt;&#x2F;p&gt;
&lt;p&gt;以前大家都在搞 ACM，现在变成都在搞机器学习了，估计是看起来更实际，更容易转化成产品吧。&lt;&#x2F;p&gt;
&lt;p&gt;这条路还是看着比较靠谱的，门槛可能在于你有没有足够的计算资源，之后基本就靠堆时间了。通常来说，只要有充足的时间，就算拿不到金牌，起码也是有不错的名次的，毕竟 Kernel 和 Discuss 都写的那么详细了，XGBoost 和 Sickit-Learn 又是那么好用，深度学习也比较容易搞，总的来说还是只要肯下功夫，肯定会有收获。&lt;&#x2F;p&gt;
&lt;p&gt;有了好名次之后，相当于自己也有了个 title，出去忽悠忽悠也是可以的，然后干嘛请参考上面。&lt;&#x2F;p&gt;
&lt;p&gt;至于靠比赛奖金度日靠不靠谱，不好说，开销不大又很能调优的话，估计应该不成问题。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xie-zai-zui-hou&quot;&gt;写在最后&lt;&#x2F;h3&gt;
&lt;p&gt;大家都知道财富自由是多么遥远。不管是那种暴发户式的，还是细水长流的，都需要足够的努力和极好的运气。&lt;&#x2F;p&gt;
&lt;p&gt;且行且珍惜。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>2018 做点什么</title>
		<published>2018-01-01T00:00:00+00:00</published>
		<updated>2018-01-01T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/2018-zuo-dian-shi-yao/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/2018-zuo-dian-shi-yao/</id>
		<content type="html">&lt;p&gt;这篇当然不是 2018 第一天写的，毕竟这一年已经懒了太多了。写这篇的目的，无非就是总结一下自己的 2017，然后展望下自己的 2018 。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;p&gt;回顾这一年，最大的体会就是一个字：“懒”。&lt;&#x2F;p&gt;
&lt;p&gt;早上睡到 7 点半，周末睡到 8,9 点，周末下午一个午休基本就到晚上了。&lt;&#x2F;p&gt;
&lt;p&gt;读书少了，Kindle 又开始长期吃灰了，基本只有坐车回家的时候才会看看。技术类书籍也没耐心看了，很多都只是开了个头就放着了。&lt;&#x2F;p&gt;
&lt;p&gt;锻炼少了，偶尔去打一次球，Keep 也很难坚持下去，稍微累一点就想着算了。&lt;&#x2F;p&gt;
&lt;p&gt;宅的可怕，偶尔出去接触下人群，让自己适应下一堆活人熙熙攘攘的环境。&lt;&#x2F;p&gt;
&lt;p&gt;MOOC 基本不看了，再也没有之前那种每周积极学习的劲头了。&lt;&#x2F;p&gt;
&lt;p&gt;Kaggle 什么的，看了一点，完全没有认真做过。&lt;&#x2F;p&gt;
&lt;p&gt;至于长进，没有太多，基本就是按部就班的事情，攒够经验就升级的那种，实在没什么值得写下来的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;todo&quot;&gt;TODO&lt;&#x2F;h3&gt;
&lt;p&gt;坚持写博客吧，总算是搭起来开始写了，虽然基本都是吐槽瞎扯的。希望 18 年在吐槽之余，能多写几篇技术相关的，记好笔记，写好总结。&lt;&#x2F;p&gt;
&lt;p&gt;睡觉的问题，可能跟上班了不能随便补觉有关吧，晚起不要紧，周末还是应该抓紧时间学习的，或者就出去转转，感受下人类的生活？&lt;&#x2F;p&gt;
&lt;p&gt;读书这件事情没有商量的余地了，必须认真读了。不管是技术类还是文学作品，至少应该读够 10 本。&lt;&#x2F;p&gt;
&lt;p&gt;锻炼身体，远离感冒。最近这场几乎全球性的流感实在太可怕了，身体不好的话感觉能一病几个月。运动量不必太大，能保持现在的体型就行，最好再长点肉，也要多注意膝盖。&lt;&#x2F;p&gt;
&lt;p&gt;MOOC 还是应该捡起来的，或者直接读相关著作。&lt;&#x2F;p&gt;
&lt;p&gt;Kaggle 什么的，还是要认真做几次，调整好心态，就是一个人的战斗，别期望有什么队友了，这都多少年了，你见到队友了？&lt;&#x2F;p&gt;
&lt;p&gt;开源社区的贡献，代码也好，翻译也好，总之要动手了。&lt;&#x2F;p&gt;
&lt;p&gt;Rust 写点东西，不能只会用 Python 搞搞机器学习深度学习什么的，前后端的能力也都比较基础，可以适当再提升下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hope&quot;&gt;Hope&lt;&#x2F;h3&gt;
&lt;p&gt;希望 TODO 不仅仅是 TODO 吧，最好都能落实。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rust 略详细的介绍</title>
		<published>2017-12-22T00:00:00+00:00</published>
		<updated>2017-12-22T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/rust-lue-xiang-xi-de-jie-shao/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/rust-lue-xiang-xi-de-jie-shao/</id>
		<content type="html">&lt;p&gt;Rust 是一门编译型系统编程语言。官方给出的定义是：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rust&lt;&#x2F;strong&gt; is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;可以看出这是一门主打效率，安全和并发的语言。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Rust 有着接近 C 的效率，具体的对比可以从 &lt;a href=&quot;http:&#x2F;&#x2F;benchmarksgame.alioth.debian.org&#x2F;u64q&#x2F;rust.html&quot;&gt;Benchmarksgame&lt;&#x2F;a&gt; 上看到。有人说这会是一门替代 C&#x2F;C++ 的语言，这一点很难说，但是可以肯定这是一门很不错的语言，绝对值得一学。&lt;&#x2F;p&gt;
&lt;p&gt;在安全方面，更多的是本身的设计做保障，生命周期，所有权等，这些下面会详细介绍。基本上，如果你没用到 Rust 中那些不够安全的东西的话，所有的安全问题都可以在编译阶段被检查出来，防止运行中发生问题。&lt;&#x2F;p&gt;
&lt;p&gt;Rust 的无畏并发，得益于本身的设计解决了大部分数据读写的冲突，使得并发的效率惊人的高。&lt;&#x2F;p&gt;
&lt;p&gt;下面很多代码都是官方的文档中复制过来的，挑的都是根据这篇介绍就可以看懂的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chu-shen&quot;&gt;出身&lt;&#x2F;h3&gt;
&lt;p&gt;Rust 是由 Mozilla 主导开发的，1.0 版本于 2015 年 5 月 15 发布，是一门非常年轻的语言，但是它有着相当友好的社区支持，非常棒的错误提示，优秀的设计理念，即使有着相对较高的门槛，也深受开发者喜爱，在 &lt;a href=&quot;https:&#x2F;&#x2F;insights.stackoverflow.com&#x2F;survey&#x2F;2016&quot;&gt;StackOverflow 2016 survey&lt;&#x2F;a&gt;   &lt;a href=&quot;https:&#x2F;&#x2F;insights.stackoverflow.com&#x2F;survey&#x2F;2017&quot;&gt;StackOverflow 2017 survey&lt;&#x2F;a&gt;  上都是最受喜爱的语言，也许高门槛帮它过滤了很多不必要的负面的东西吧。&lt;&#x2F;p&gt;
&lt;p&gt;另外，Rust 的吉祥物是一只橙色的螃蟹，大概是生锈的螃蟹？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-yong&quot;&gt;应用&lt;&#x2F;h3&gt;
&lt;p&gt;Mozilla 首先利用 Rust 开发了一个浏览器引擎 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;servo&#x2F;servo&quot;&gt;servo&lt;&#x2F;a&gt; ，Firefox Quantum 的崛起正是得益于 Rust 的高性能和并行特性。&lt;&#x2F;p&gt;
&lt;p&gt;既然是系统编程语言，少不了有人用它写操作系统，这便是 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redox-os&#x2F;redox&quot;&gt;Redox OS&lt;&#x2F;a&gt; ，目前已经是一个有着诸多功能的操作系统，感兴趣的可以安装试玩。这个操作系统也用到了新的文件系统 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redox-os&#x2F;tfs&quot;&gt;TFS&lt;&#x2F;a&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;Google 有一个文本编辑器 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;xi-editor&quot;&gt;xi-editor&lt;&#x2F;a&gt; ，后端就是用 Rust 写的，目前也有几个对应的前端，不过都算不上很成熟。&lt;&#x2F;p&gt;
&lt;p&gt;目前的命令行工具有 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sharkdp&#x2F;fd&quot;&gt;fd&lt;&#x2F;a&gt; ，&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ogham&#x2F;exa&quot;&gt;exa&lt;&#x2F;a&gt; ，&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt; ，分别对应 &lt;code&gt;find&lt;&#x2F;code&gt; ，&lt;code&gt;ls&lt;&#x2F;code&gt; ，&lt;code&gt;grep&lt;&#x2F;code&gt; 命令，值得一试。&lt;&#x2F;p&gt;
&lt;p&gt;机器学习这么火，Rust 也有相应的库 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;autumnai&#x2F;leaf&quot;&gt;Leaf&lt;&#x2F;a&gt; ，不过两年前停止更新了，毕竟这方面 scikit-learn 实在太出色了。&lt;&#x2F;p&gt;
&lt;p&gt;也有一个 Rust 终端 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jwilm&#x2F;alacritty&quot;&gt;Alacritty&lt;&#x2F;a&gt; ，号称是最快的，使用了 GPU 加速，而且是跨平台的。&lt;&#x2F;p&gt;
&lt;p&gt;有人用 Rust 重写了一份 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;uutils&#x2F;coreutils&quot;&gt;GNU coreutils&lt;&#x2F;a&gt; 工具，利用了 Rust 跨平台编译的特性，可以方便地将这套工具部署在 Windows 上。&lt;&#x2F;p&gt;
&lt;p&gt;目前也有一些 Web 框架，像 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SergioBenitez&#x2F;Rocket&quot;&gt;Rocket&lt;&#x2F;a&gt; ，听名字就知道性能强悍，微服务框架 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fengsp&#x2F;pencil&quot;&gt;pencil&lt;&#x2F;a&gt; ，主打扩展和并发的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iron&#x2F;iron&quot;&gt;iron&lt;&#x2F;a&gt; ，看名字就觉得很 rust。&lt;&#x2F;p&gt;
&lt;p&gt;分布式 key-value 数据库 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;tikv&quot;&gt;TiKV&lt;&#x2F;a&gt; ，&lt;a href=&quot;https:&#x2F;&#x2F;www.pingcap.com&#x2F;en&#x2F;&quot;&gt;PingCAP&lt;&#x2F;a&gt; 公司出品，可以对接他们搞的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pingcap&#x2F;tidb&quot;&gt;TiDB&lt;&#x2F;a&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;区块链方面，有 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;exonum&#x2F;exonum&quot;&gt;Exonum&lt;&#x2F;a&gt; 和 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cryptape&#x2F;cita&quot;&gt;CITA&lt;&#x2F;a&gt; ，针对 &lt;a href=&quot;https:&#x2F;&#x2F;www.ethereum.org&#x2F;&quot;&gt;Ethereum&lt;&#x2F;a&gt; 区块链应用平台还有 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;paritytech&#x2F;parity&quot;&gt;Parity&lt;&#x2F;a&gt; 这样的客户端。&lt;&#x2F;p&gt;
&lt;p&gt;游戏引擎方面有 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PistonDevelopers&#x2F;piston&quot;&gt;Piston&lt;&#x2F;a&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;其他项目参考 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-unofficial&#x2F;awesome-rust&quot;&gt;Awesome List&lt;&#x2F;a&gt; 吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yu-fa&quot;&gt;语法&lt;&#x2F;h3&gt;
&lt;p&gt;Rust 在语法上接近 C&#x2F;C++，但是关键词的缩写为人诟病，在这个编辑器智能补全技术十分成熟的时代，实在没多少必要。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;变量类型有可变和不可变，这一点和 &lt;code&gt;Scala&lt;&#x2F;code&gt; 类似。&lt;&#x2F;p&gt;
&lt;p&gt;基本变量类型 &lt;code&gt;int&lt;&#x2F;code&gt; ，&lt;code&gt;float&lt;&#x2F;code&gt; 还能细分各种长度，比如 &lt;code&gt;i16&lt;&#x2F;code&gt; ，&lt;code&gt;u32&lt;&#x2F;code&gt; ，&lt;code&gt;f64&lt;&#x2F;code&gt; 等，整型中间的可以用 &lt;code&gt;_&lt;&#x2F;code&gt; 来作分隔符，比如 &lt;code&gt;100_000&lt;&#x2F;code&gt; 等同于 &lt;code&gt;100000&lt;&#x2F;code&gt; 。char 类型则是完全支持 Unicode 的。高级类型，诸如可容纳不同类型的 tuple，同一类型的 array。&lt;&#x2F;p&gt;
&lt;p&gt;函数声明中必须明确指定每个变量的类型和返回值的类型。需要注意的是， Statements 只执行操作而没有返回值，Expression 会计算并给出返回值。函数中如果需要返回一个变量，只需要在函数末尾给出相应的表达式并不加 &lt;code&gt;;&lt;&#x2F;code&gt; 即可：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;add_one&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;控制流中需要的 &lt;code&gt;bool&lt;&#x2F;code&gt; 类型必须为 &lt;code&gt;bool&lt;&#x2F;code&gt; 类型，而不能使用诸如 &lt;code&gt;0&lt;&#x2F;code&gt; ，&lt;code&gt;1&lt;&#x2F;code&gt; ，&lt;code&gt;[]&lt;&#x2F;code&gt; 等代替。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cargo&quot;&gt;Cargo&lt;&#x2F;h3&gt;
&lt;p&gt;Cargo 是 Rust 的一个包管理工具，不过它能够做的不仅仅是包管理。&lt;&#x2F;p&gt;
&lt;p&gt;（你可以在 &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;crate&lt;&#x2F;a&gt; 上找到 Rust 的所有包，相当于 Python 的 PyPI 平台）&lt;&#x2F;p&gt;
&lt;p&gt;Cargo 的功能非常丰富，如果拿 Python 来作对比的话，大概相当于 &lt;code&gt;pip&lt;&#x2F;code&gt; + &lt;code&gt;setuptools&lt;&#x2F;code&gt; + &lt;code&gt;pipenv&lt;&#x2F;code&gt; + &lt;code&gt;twine&lt;&#x2F;code&gt; 等工具的总和。&lt;&#x2F;p&gt;
&lt;p&gt;Rust 项目通常都是从 &lt;code&gt;cargo new project_name --bin&lt;&#x2F;code&gt; 开始的。此时会自动生成一个 &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; 文件，这里面包含项目的信息，以及作者资料，这部分从 Git 中获得，而且会自动执行 &lt;code&gt;git init&lt;&#x2F;code&gt; 。当运行 &lt;code&gt;cargo run&lt;&#x2F;code&gt; 之类的 build 命令时，就会生成 &lt;code&gt;Cargo.lock&lt;&#x2F;code&gt; 文件，其中是项目的依赖，是由 Cargo 根据实际项目生成的，不应该被人为修改。&lt;&#x2F;p&gt;
&lt;p&gt;Cargo 同样可以用来执行测试，前提是你写了相关的测试，不管是专门的测试代码，还是包含在注释中的测试代码，都可以被执行。&lt;&#x2F;p&gt;
&lt;p&gt;另外，Cargo 还可以根据注释快速生成文档，并且提供了相应的 Web 服务，可以说是非常方便了。&lt;&#x2F;p&gt;
&lt;p&gt;其他特征可以参考 &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;&quot;&gt;Cargo 文档 &lt;&#x2F;a&gt; 。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;trait&quot;&gt;Trait&lt;&#x2F;h3&gt;
&lt;p&gt;trait 有一点类似于其他语言中的 interface ，用于定义类型的一些通用行为。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Summarizable {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;summary&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; String;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是一个简单的定义，没有给出 &lt;code&gt;summary&lt;&#x2F;code&gt; 方法的默认实现。之后，就可以应用到需要的地方去了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;News {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;headline&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Summarizable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;News {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;summary&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;        format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#666969;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;, by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#666969;&quot;&gt;{} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#666969;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.headline, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.author, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.content)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;像上面这样，可以将 &lt;code&gt;Summarizable&lt;&#x2F;code&gt; 用到任何需要的地方，这也是利用 Rust 实现 OOP 的重要工具。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;object-oriented-programming&quot;&gt;Object Oriented Programming&lt;&#x2F;h3&gt;
&lt;p&gt;面向对象是一种很常见的模式了，对 Rust 而言，它属于“薛定谔的面向对象”。&lt;&#x2F;p&gt;
&lt;p&gt;一方面，Rust 拥有结构体 &lt;code&gt;struct&lt;&#x2F;code&gt; 和枚举 &lt;code&gt;enum&lt;&#x2F;code&gt; 以及 &lt;code&gt;impl&lt;&#x2F;code&gt; 方法，理论上讲可以实现类似于面向对象程序设计中的一个对象包含的数据和方法。而 Rust 又是非常谨慎的，不标明 &lt;code&gt;pub&lt;&#x2F;code&gt; 的都是私有数据和方法，因此可以封装实现细节，外部仅能访问 &lt;code&gt;pub&lt;&#x2F;code&gt; 类的数据和方法。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面，Rust 是不能直接继承的，而是通过为结构体定义通用的 &lt;code&gt;trait&lt;&#x2F;code&gt; 方法，这有点类似于动态语言中的鸭子类型的概念。至于多态，同样可以利用 &lt;code&gt;trait&lt;&#x2F;code&gt; 做到。&lt;&#x2F;p&gt;
&lt;p&gt;总的来说，Rust 并不是一门纯粹的 OOP 语言，不过你喜欢 OOP 的话也可以用得起来。但是 OOP 有时候并不是那么 “Rustician” 。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ownership-garbage-collection&quot;&gt;Ownership &amp;amp; Garbage Collection&lt;&#x2F;h3&gt;
&lt;p&gt;Rust 是没有垃圾回收机制的，相应的，为了保证内存安全，它有着独一无二的 ownership 。每一个变量都对应有它的 owner，且在任何时候都只能拥有一个 owner （这保证了多线程中的数据安全），当 owner 离开作用域的时候，值就会被丢弃，对应的内存空间就会被释放。可以这样理解，Rust 的垃圾回收是做到极致了，你必须清楚自己用到的每一块内存在什么时候会废弃，而 Rust 就像一个旋涡，一旦你松手，内存就会被它吸进去回收掉。因此，你需要考虑的不是什么时候释放这块内存，而是要把这块内存保留到什么时候。&lt;&#x2F;p&gt;
&lt;p&gt;对于基本类型，当你使用 &lt;code&gt;x = y&lt;&#x2F;code&gt; 这样的语句时，&lt;code&gt;y&lt;&#x2F;code&gt; 的值会被复制给 &lt;code&gt;x&lt;&#x2F;code&gt; ，他们属于拥有相同值的两个变量。而对于复杂类型，类似 C&#x2F;C++ ，这样只会把指针内容复制过去，而数据是保持不变的，同时数据的 owner 变为 &lt;code&gt;x&lt;&#x2F;code&gt; ，此时调用 &lt;code&gt;y&lt;&#x2F;code&gt; 则会出错，因为它已经不指向任何内存了。如果你想把数据也复制过去，就需要调用对应的 &lt;code&gt;clone&lt;&#x2F;code&gt; 函数了。&lt;&#x2F;p&gt;
&lt;p&gt;Rust 中给函数传递复杂类型需要用到引用 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; ，除非你想放弃该变量的 ownership 。引用允许函数访问数据但没有 ownership ，权限默认为可读，如果你加了 &lt;code&gt;mut&lt;&#x2F;code&gt; ，则函数可读写借到的数据，当然这要求变量本身是可变类型的，毕竟地主家里都没有余粮，怎么可能借给租户呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;functional-programming&quot;&gt;Functional Programming&lt;&#x2F;h3&gt;
&lt;p&gt;Rust 的闭包语法类似于 Smalltalk 和 Ruby，有类型推断和注解，这意味着你不必写全类型，但是用过一次之后便会锁定类型不能再改变了。另外，Rust 的闭包还能够捕获环境变量，这是函数不具有的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;equal2x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;| y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;equal2x&lt;&#x2F;span&gt;&lt;span&gt;(z));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust 的迭代器跟 Python 一样是惰性的，本身的实现就是不断调用 &lt;code&gt;.next()&lt;&#x2F;code&gt; 方法，同时可以配合闭包创建新的迭代器。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(y, vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust 的迭代器跟 C++ 一样是零成本抽象的，实际中可能还要比普通的遍历快，所以尽可能使用迭代来提高效率，简化代码吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lifetime&quot;&gt;Lifetime&lt;&#x2F;h3&gt;
&lt;p&gt;Rust 中所有的引用都有一个生命周期，通常是可以由编译器推断的，不过有些时候需要我们自己来规定，这大概是 Rust 和其他编程语言最不同的地方了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; Error
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;r: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#666969;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, r);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;编译器中负责这一部分的叫做借用检查器 borrow checker，不要小看它，这可能是 Rust 中最难以深入理解的一部分了。对于每一个变量，借用检查器都会默认给出一个生命周期注解，通常以 &lt;code&gt;&#x27;&lt;&#x2F;code&gt; 开头，比如 &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; ，当借用检查器发现一个变量引用了一个比自身生命周期小的变量时，就会报错，这里的小是指不能够包含本身。&lt;&#x2F;p&gt;
&lt;p&gt;生命周期是需要能够明确推断出或者被明确指定的，这一点可以严格保证数据安全。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;&amp;#39;a str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        x
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        y
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大家一定会觉得 Rust 疯了，这么简单的功能需要写的这么复杂吗？是的，很必要。Rust 需要知道生命周期准确的范围，即使像上面这样无法知道准确两个变量的准确范围，那就给他们加上泛型生命周期，保证他们都会在某个特定的作用域中。到这里你会觉得这门语言真的有点麻烦呢，原以为用上 Rust 之后就不必像 C++ 那样到处考虑指针的问题了，但其实 Rust 的生命周期的复杂度也非常高，从门槛上来讲，或许要比 C++ 还复杂。因为你需要实现精准的控制，而不是大概好像就那样吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;smart-pointer&quot;&gt;Smart Pointer&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; 是最简单的智能指针，指针本身存在于栈上，数据则保存在堆中，这一点其实都差不多。Box 是允许创建递归类型的，不过 Rust 本身要求大小必须是明确的，否则存在不安全隐患。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Deref&lt;&#x2F;code&gt; 可以重载 &lt;code&gt;*&lt;&#x2F;code&gt; 解引用运算符，&lt;code&gt;Drop&lt;&#x2F;code&gt; 用来清理代码（Rust 本身会在离开作用域时执行这个），&lt;code&gt;Rc&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; 可以存放引用计数，允许对该类型进行不完全拷贝，来使数据同时有多个所有者，当然这个数据是不可变的。对于可变数据，就需要用到 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; 了。这部分仔细讲起来太占地方了，而且我也没有在实际中用过，恐怕写不好，也没有想到什么通俗的例子，大家还是看 &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;second-edition&#x2F;ch15-05-interior-mutability.html&quot;&gt;文档&lt;&#x2F;a&gt; 去吧。&lt;&#x2F;p&gt;
&lt;p&gt;其实写到这里，多少能感受到 Rust 的门槛了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;concurrency&quot;&gt;Concurrency&lt;&#x2F;h3&gt;
&lt;p&gt;Rust 标准库的线程模型是 1:1 的，即一个 OS 线程对应一个语言线程，这是为了效率考虑的，如果你希望更好的控制线程并减少上下文切换成本，那可以用相应的 crate 中的实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vec![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;Here&amp;#39;s a vector: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#666969;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, v);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的例子传递了一个闭包给其他线程执行，最后等待所有子线程结束后再结束主线程。&lt;&#x2F;p&gt;
&lt;p&gt;线程中利用 channel 来进行通信再常见不过了，下面是一个简单的例子，其中也包含着所有权的转移。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::mpsc;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(tx, rx) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;mpsc::channel();
&lt;&#x2F;span&gt;&lt;span&gt;    thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c99e00;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;hi&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(val).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;&#x2F;&#x2F; the ownership of val is send to rx
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; received &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; rx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;recv&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;Got: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#666969;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, received);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;另外，对于互斥锁，Rust 有专门的 &lt;code&gt;Mutex&lt;&#x2F;code&gt; ，&lt;code&gt;lock&lt;&#x2F;code&gt; 之后会造成阻塞，当离开作用域的时候会自动释放锁。也有专门的原子引用计数 &lt;code&gt;Arc&lt;&#x2F;code&gt; ，当然这些都跟 smart pointer 有关了。想要在线程之间共享变量，势必会存在所有权的问题，所以需要引入引用计数，从而可以 &lt;code&gt;clone&lt;&#x2F;code&gt; 锁，当然这是一种特殊的不完全拷贝。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::sync::{Mutex, Arc};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc::new(Mutex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vec![];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;_ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(handle);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles {
&lt;&#x2F;span&gt;&lt;span&gt;        handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;Result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#666969;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;counter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为 &lt;code&gt;Mutex&lt;&#x2F;code&gt; 提供了内部可变性，即使 &lt;code&gt;counter&lt;&#x2F;code&gt; 不可变，我们依然可以通过获取其内部值的可变引用来实现计数。就好像 Python 中 &lt;code&gt;tuple&lt;&#x2F;code&gt; 是不可变的，但是如果是对 &lt;code&gt;tuple&lt;&#x2F;code&gt; 内部的 &lt;code&gt;list&lt;&#x2F;code&gt; 操作就没问题了。&lt;&#x2F;p&gt;
&lt;p&gt;此外，Rust 中还有两个重要的并发 trait &lt;code&gt;Send&lt;&#x2F;code&gt; 和 &lt;code&gt;Sync&lt;&#x2F;code&gt; ，前者用来表示所有权可能被传递给其他线程，后者表示多线程访问是安全的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unsafe&quot;&gt;Unsafe&lt;&#x2F;h3&gt;
&lt;p&gt;Rust 并不是什么都绝对安全，比如上面提到的 Smart Pointer 中的 &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; ，在编译阶段并不能保证通过就是安全的，而需要用户自己分析。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cs.virginia.edu&#x2F;%7Ebjc8c&#x2F;papers&#x2F;levy17rustkernel.pdf&quot;&gt;The Case for Writing a Kernel in Rust&lt;&#x2F;a&gt; 这篇论文就是关于如何在保证高性能的同时实现一个安全的系统内核，其中当然要处理很多不安全问题，尽可能将不安全的模块封装起来，保证特定情况下的绝对安全，感兴趣的可以看看。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;python&quot;&gt;Python？&lt;&#x2F;h3&gt;
&lt;p&gt;有了如此强悍的性能和安全性，自然想到，应该用到那些需要性能的地方去，还要有友好的借口给其他语言用。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developers.redhat.com&#x2F;blog&#x2F;2017&#x2F;11&#x2F;16&#x2F;speed-python-using-rust&#x2F;&quot;&gt;Speed Python Using Rust&lt;&#x2F;a&gt; RedHat 的这篇博客写的就很到位了，这里用到了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dgrunwald&#x2F;rust-cpython&quot;&gt;rust-cpython&lt;&#x2F;a&gt; 工具，通过 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rochacbruno&#x2F;rust-python-example#new-results&quot;&gt;benchmark&lt;&#x2F;a&gt; 可以看出来，Rust 的优势还是非常明显的，几乎是 pure Python 的 100 倍，跟 C 的实现相比，基本上是一个水平的。&lt;&#x2F;p&gt;
&lt;p&gt;当然，目前看来这些工具还是有很大的改进空间的，不过我还是很看好未来的发展的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h3&gt;
&lt;p&gt;如果要用一个词来评价 Rust，我觉得还是 brilliant 比较合适。它并非用了什么 magic ，只是针对它想解决的问题，走了一条特立独行的路，并合理吸收各种编程语言和工具的长处，从而发展出自己一套特有的哲学，可谓是增之一分则太长，减之一分则太短。&lt;&#x2F;p&gt;
&lt;p&gt;本文也只是浅显地介绍了一些东西而已，我也没有拿 Rust 写过什么能拿得出手的东西，都只是停留在 TODO list 上。至于底层的一些实现，那更不是我现在能说得清的。等我深入实践过之后，再来写点感悟吧。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>大学这四年</title>
		<published>2017-12-19T00:00:00+00:00</published>
		<updated>2017-12-19T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/da-xue-zhe-si-nian/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/da-xue-zhe-si-nian/</id>
		<content type="html">&lt;p&gt;时光飞逝，还没来得及好好享受，就已经大学毕业了。&lt;&#x2F;p&gt;
&lt;p&gt;回想这四年的时光，虽然多是无聊的日子，但多少也有一些值得怀念的记忆。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;xue-xi&quot;&gt;学习&lt;&#x2F;h3&gt;
&lt;p&gt;一开始我是没这个打算的。好不容易有时间打游戏了，学习什么的，能及格就可以了吧。&lt;&#x2F;p&gt;
&lt;p&gt;半年后拥有了自己的电脑，准系统的性能足够我玩任何想玩的游戏了。一定要说限制因素的话，大概就是信息吧。自己习惯了一个人玩，能找的资源无非就是盗版单机，国产网游什么的，体验很差，一些情怀也很快就耗尽了。我实在没可能沉迷游戏，即使是后来接触 Steam 玩正版，单机角色扮演只刷刷剧情，网游完全没兴趣，手游看到坑就跑，好像也就 NBA2K 玩得比较多吧。&lt;&#x2F;p&gt;
&lt;p&gt;那时候感到特别无聊，无聊到去机房写代码。本身对代码有点兴趣，还想着要不要写个刷怪的脚本什么的。一开始确实被各种初级 ACM 题目虐，熟悉之后就轻松多了，考试什么的完全不在话下，但是课外也不知道能写个什么东西。然而数学方面总是有很多麻烦，上课完全听不进去，平时写作业都很头疼，考试也复习得很烂，基本都是靠考场上的发挥，强行推导。&lt;&#x2F;p&gt;
&lt;p&gt;到后面，课本上的东西确实太无聊了，刷了一些 MOOC，感觉还不错，尤其是 Coursera 上的一些课程。一开始以为自己听全英的课是不可能不依赖中文字幕的，后来尝试过才发现有英文字幕就足够了，熟悉后连字幕都不需要。那个时候兴致真的高，即使学校的课排满课表，依然坚持刷几门 MOOC。考虑到我不是那种认真应对考试的人，这些并没有影响到我的 GPA，本来也没有当回事。&lt;&#x2F;p&gt;
&lt;p&gt;说起来，直到毕业，自己也没有做出来什么项目。那个什么游戏脚本也早就没兴趣了，而且我估计以后也不可能写这种东西，要写也是写强化学习了吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-mo&quot;&gt;数模&lt;&#x2F;h3&gt;
&lt;p&gt;数学建模真的是我大学生活的重要组成部分。入了这个大坑后，接触到很多方面的东西，像建模，编程，写作，排版，算法等，这种交叉性很强的比赛还是很适合我的，或者说我刚好全都占了，所以入门之后就飞起来了。当然了，老师能允许我提前一年参加，也是一个很重要的因素。&lt;&#x2F;p&gt;
&lt;p&gt;也因为这个，我的寒暑假再也不完整了。各种培训，比赛，完全没有时间做别的事情了。虽然好像我也没有别的事情可以做的。&lt;&#x2F;p&gt;
&lt;p&gt;有些人觉得数模很水，确实很水，很多渣渣胡搞的东西都能得奖，很多东西明明是造假的也能轻松骗过评委，有些人明明做了不错的东西也可能什么奖都没有。另一方面，每年的题目也不都是合格的。经常会遇到一些老师把自己课题的一部分拿出来当作题目的，这种的还好吧，不是很坑，多少能做，无非就是一些优秀的成果被窃取了。还有那种十分扯淡的题目的，做起来就发现完全没道理，与实际相差十万八千里，没有任何意义的题目，这种就只能认栽了，我能耐着性子给出一个结果就不错了。&lt;&#x2F;p&gt;
&lt;p&gt;吐槽归吐槽，我多少也从中学到不少东西。从文献检索，数据收集，数据清洗，建模，算法调研与实现，到文献汇总，论文写作与排版，画图制表，这些必备的技能自然不在话下。MATLAB，SAS，Lingo 什么的也都是玩得转的，Office 技能可以说是很专业了。另外，在接触了各种交叉学科的题目后，也学到很多乱七八糟学科的皮毛，让我觉得真的还是数学优美，庆幸自己也算个半吊子的数学专业的学生。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duan-lian-shen-ti&quot;&gt;锻炼身体&lt;&#x2F;h3&gt;
&lt;p&gt;我一直都怀疑自己高中长身体的时候严重影响了大脑正常工作，导致我成绩非常差，好好学习还会考得更差。&lt;&#x2F;p&gt;
&lt;p&gt;大学之后，身体好很多了，自己一开始还担心会不会像以前一样天天生病，结果一般一年也就一两次感冒而已。&lt;&#x2F;p&gt;
&lt;p&gt;体育课本来是我的弱项的，没想到大学体育的成绩居然会很好，让我怀疑是不是其他人太菜了。哦，这倒是真的。&lt;&#x2F;p&gt;
&lt;p&gt;虽然学校很奇葩，有早操，有环湖跑，很麻烦，但总体还算合理吧。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面，打篮球可能是我唯一的娱乐活动了。没有高中那么憋屈了，但还是没好到哪儿去。毕竟中锋这种蓝领工作，几乎就是给别人捡球的。到后来强壮一些后，渐渐有了一些球权，但还是很窝囊，很少有人传球。后来实习的时候，自己已经能在野球场上打出一些好球了，可能第一印象还不错吧，多少有了球权了，配合也比较多，打起来还是比较舒心的。&lt;&#x2F;p&gt;
&lt;p&gt;自己一直都没怎么注意身体损伤，以前崴脚也不当回事儿，直到自己膝盖疼得不能弯曲，终于老实了，知道要保护自己，要适当热身，要纠正不规范的姿势了。大概二十岁就到了养生的年纪了吧，明显感觉到不年轻了，不能瞎折腾了，该好好珍惜了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-xi&quot;&gt;实习&lt;&#x2F;h3&gt;
&lt;p&gt;一语成谶，真的就在果壳实习了几乎一年。&lt;&#x2F;p&gt;
&lt;p&gt;回想起来，真的很不喜欢北京这座城市，却又无可奈何。对租房感到无比头疼，有太多不如意的地方了。回想起自己在学校的时候，觉得吃苦就吃苦吧，实在没条件，以后一定一定要过得舒服，等自己出了校门才知道，还差得远呢，这种憋屈的日子还长长长着呢。&lt;&#x2F;p&gt;
&lt;p&gt;实习感觉更大程度是自己慢慢学习的过程。从一个学了一堆理论，会写代码却没有什么项目经验的菜鸟，到一个学了更多理论，在实践中慢慢体会软件工程，看起来好像不是菜鸟的菜鸟。自己终究还是复习了很多数学和统计的知识，一点一点规划自己的知识网络，然后不断做项目，总结经验，不断被自己的之前的代码恶心到，不断修改，一点点成长起来。从算法到前后端，不管是哪方面，都有了一定基础了，知道自己能够去挑战一些有难度的东西。&lt;&#x2F;p&gt;
&lt;p&gt;后来呢，我也不知道自己能去哪里，就留下继续工作了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-han&quot;&gt;遗憾&lt;&#x2F;h3&gt;
&lt;p&gt;在感情这件事上，真的很遗憾。不光是因为自己最后是单身的，更是因为自己好像已经跑得很偏了。没有什么喜欢的感觉了，更多的可能是对科学的向往，甚至到了“万般皆下品，惟有读书高”的程度。一个人就一个人吧，可悲的是自己一个人的生活简直一团糟，同时还没有什么可能去打破这种困境。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面，很多比赛也从来没有用心参与过，感觉自己能力到位了，决心总是不到位。&lt;&#x2F;p&gt;
&lt;p&gt;如果能重来，我大概不会选这样的生活了，一个人确实很难受。但是性格如此，恐怕重来一次，也会一模一样。想要坚守的原则不会变，难受就难受吧。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Flask 规范化</title>
		<published>2017-11-19T00:00:00+00:00</published>
		<updated>2017-11-19T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/flask-gui-fan-hua/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/flask-gui-fan-hua/</id>
		<content type="html">&lt;p&gt;说到 &lt;code&gt;Flask&lt;&#x2F;code&gt; ，这是我接触的第一个后端架构，也基本是目前唯一一个比较熟悉的。&lt;&#x2F;p&gt;
&lt;p&gt;对于规范化，这当然是很有必要的，特别是你的项目越做越复杂，不断增加新功能的时候，就会发现如果一开始结构很差，基本就需要大规模重构了。而重构，又通常是说说而已，真正动手完全重构什么的是不存在的，这么丑的代码，就算是我自己写得，我也不想再看了。&lt;&#x2F;p&gt;
&lt;p&gt;所以呢，一开始就尽可能做得规范一点，这样以后看起来就很舒服了，进行修改也会变得相对简单，别人要接手也不会看吐了。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;mu-lu&quot;&gt;目录&lt;&#x2F;h3&gt;
&lt;p&gt;大概长这个样子：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#4d4d4c;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;├── docker-compose.yml
&lt;&#x2F;span&gt;&lt;span&gt;├── Dockerfile
&lt;&#x2F;span&gt;&lt;span&gt;├── docs&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── main.py
&lt;&#x2F;span&gt;&lt;span&gt;├── README.md
&lt;&#x2F;span&gt;&lt;span&gt;├── requirements.txt
&lt;&#x2F;span&gt;&lt;span&gt;├── run.sh
&lt;&#x2F;span&gt;&lt;span&gt;├── app_name&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── config.py
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── data&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── __init__.py
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── static&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── css&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── fonts&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── img&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   │   └── js&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── templates&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── index.html
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── layout.html
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── blueprint_1
&lt;&#x2F;span&gt;&lt;span&gt;│   │   └── blueprint_n
&lt;&#x2F;span&gt;&lt;span&gt;│   └── blueprints&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│       ├── __init__.py
&lt;&#x2F;span&gt;&lt;span&gt;│       ├── blueprint_1.py
&lt;&#x2F;span&gt;&lt;span&gt;│       └── blueprint_n.py
&lt;&#x2F;span&gt;&lt;span&gt;└── tests
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;先说根目录，一般都用 Docker 的，这里就需要两个配置文件 &lt;code&gt;Dockerfile&lt;&#x2F;code&gt; 和 &lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt; 了；&lt;code&gt;README&lt;&#x2F;code&gt; 当然还是要写的；&lt;code&gt;requirements.txt&lt;&#x2F;code&gt; 里面写上项目用到的各种包；&lt;code&gt;main.py&lt;&#x2F;code&gt; 和 &lt;code&gt;run.sh&lt;&#x2F;code&gt; ，前者是项目的运行文件，后者是考虑如果使用 &lt;code&gt;gunicorn&lt;&#x2F;code&gt; 的话，写到文件里比较省事；&lt;code&gt;docs&lt;&#x2F;code&gt; 和 &lt;code&gt;tests&lt;&#x2F;code&gt; 目录也是需要有的，虽然不是每个人都写测试和文档；最后 &lt;code&gt;app_name&lt;&#x2F;code&gt; ，是整个项目的主体。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;app_name&lt;&#x2F;code&gt; 下，每个包含 Python 的文件都需要 &lt;code&gt;__init__.py&lt;&#x2F;code&gt; ，&lt;code&gt;config.py&lt;&#x2F;code&gt; 里面包含项目的各种配置，&lt;code&gt;static&lt;&#x2F;code&gt; ，&lt;code&gt;templates&lt;&#x2F;code&gt; 里面是前端的文件，&lt;code&gt;blueprints&lt;&#x2F;code&gt; 里面包含各个模块的 blueprint。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yong-fa&quot;&gt;用法&lt;&#x2F;h3&gt;
&lt;p&gt;这里主要说明的是 Blueprint 在项目中的重要作用。&lt;&#x2F;p&gt;
&lt;p&gt;对于有一定规模的项目来说，通常会有很多不同用途的组件，比如用户登录相关的，API 相关的，某个重要功能相关的等等，这时候利用不同的 Blueprint 加以区分就能够简化整个项目结构，降低模块间的耦合，不管是对于协作开发还是增改功能都有很大益处。&lt;&#x2F;p&gt;
&lt;p&gt;针对不同的 Blueprint，HTML 文件最好也放置在 &lt;code&gt;template&lt;&#x2F;code&gt; 下不同的文件夹中。&lt;&#x2F;p&gt;
&lt;p&gt;在使用 Blueprint 的过程中，有几点需要特别注意：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__init__.py&lt;&#x2F;code&gt; 文件并不是摆设，通常里面需要 import 该文件夹下相关的模块，也可以做一些初始化一类的操作，尤其是 &lt;code&gt;app_name&lt;&#x2F;code&gt; 文件夹下的，需要设置各种扩展，以及注册所需的 Blueprint&lt;&#x2F;li&gt;
&lt;li&gt;使用这种结构的时候，新手很容易发生 Circular import 问题，这个通常是自己没设计好。另外，推荐大家熟悉一下 Python import 的细节，了解一点底层的东西，就能很好解决这个问题了。我发现有时候改变一下 &lt;code&gt;import&lt;&#x2F;code&gt; 命令的上下位置就可以解决一些问题了……不过这种方法并不优雅&lt;&#x2F;li&gt;
&lt;li&gt;推荐所有使用 css&#x2F;js 的地方都用 &lt;code&gt;url_for&lt;&#x2F;code&gt; 来解决&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;chang-yong-kuo-zhan&quot;&gt;常用扩展&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flask_login&lt;&#x2F;code&gt; 用户登录，做一些权限限制等&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;flask_sqlalchemy&lt;&#x2F;code&gt; 数据库操作的 ORM&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;flask_wtf&lt;&#x2F;code&gt; 提供简单的 WTForms 集成，方便控制表单&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;flask_restful&lt;&#x2F;code&gt; 方便写 RESTful API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;其他的可以浏览 &lt;a href=&quot;http:&#x2F;&#x2F;flask.pocoo.org&#x2F;extensions&#x2F;&quot;&gt;Flask Extensions Registry&lt;&#x2F;a&gt;  。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Docker 常用命令</title>
		<published>2017-11-18T00:00:00+00:00</published>
		<updated>2017-11-18T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/docker-chang-yong-ming-ling/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/docker-chang-yong-ming-ling/</id>
		<content type="html">&lt;p&gt;Docker 这几年非常火，只不过对于我这种基本不接触业务的人而言，平时很少会用到 Docker，自己写项目愿意用 Python 的 &lt;code&gt;virtualenv&lt;&#x2F;code&gt; 就不错了。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;对于 Docker，个人了解很肤浅，这里不过是想记录一下自己偶尔需要用到的命令，方便自己使用而已。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Dockerfile&lt;&#x2F;code&gt; 基本配置如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; docker-images
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ADD &lt;&#x2F;span&gt;&lt;span&gt;. &#x2F;app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;pip install -r requirements.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;EXPOSE &lt;&#x2F;span&gt;&lt;span&gt;5000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;ENV &lt;&#x2F;span&gt;&lt;span&gt;NUM_WORKS 4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;CMD &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;python3&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;#39;main.py&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过 &lt;code&gt;Dockerfile&lt;&#x2F;code&gt; 来创建 Docker image：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; my-image
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; 4000:80 my-image
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Docker 里面各种带 &lt;code&gt;:&lt;&#x2F;code&gt; 的，前面表示的是外部的，后面是镜像里面的。&lt;&#x2F;p&gt;
&lt;p&gt;停止：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; container stop container_id
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其他相关命令：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; container ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; container rm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; image ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; username&#x2F;repository:tag
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; push username&#x2F;repository:tag
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; run username&#x2F;repository:tag
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;service&quot;&gt;Service&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt; 基本配置如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;3&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;web&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;username&#x2F;repository:tag
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;deploy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;replicas&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;resources&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;cpus&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;0.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;memory&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;50M
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;restart_policy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;condition&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;on-failure
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;80:80&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&#x2F;home&#x2F;username&#x2F;data:&#x2F;data&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;redis
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;6379:6379&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;&amp;quot;&#x2F;home&#x2F;docker&#x2F;data:&#x2F;data&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#718c00;&quot;&gt;redis-server --appendonly yess
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;初始化：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; swarm init
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; stack deploy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; docker-compose.yml your_app_name
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其他：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; service ls
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; service ps your_app_name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; stack rm your_app_name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; swarm leave&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --force
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;compose&quot;&gt;Compose&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -d --build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; stop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;启动镜像，在镜像里面修改并提交：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#4d4d4c;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ubuntu_bash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f5871f;&quot;&gt; -i -t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; ubuntu-python35 &#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#999999;&quot;&gt;# do something in cmd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c82829;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt; commit container_id username&#x2F;repository:tag
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;还有 Swarm 管理和监控等，因为我平时也不用，所以就不写了。&lt;&#x2F;p&gt;
&lt;p&gt;我发现官方文档比以前好一点了，起码 Tutorial 写得能看了。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>折腾各种工具</title>
		<published>2017-11-16T00:00:00+00:00</published>
		<updated>2017-11-16T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/zhe-teng-ge-chong-gong-ju/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/zhe-teng-ge-chong-gong-ju/</id>
		<content type="html">&lt;p&gt;俗话说的好，技术水平不重要，重要的是折腾各种工具的过程。: )&lt;&#x2F;p&gt;
&lt;p&gt;那么，就来总结一下自己觉得还不错的工具吧。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;chrome&quot;&gt;Chrome&lt;&#x2F;h3&gt;
&lt;p&gt;先从浏览器说起吧。虽然大家都不相信 &amp;quot;Don&#x27;t be eval&amp;quot;，最近也有 Firefox 速度已经领先的说法，&lt;del&gt;无所谓，暂时懒得换了&lt;&#x2F;del&gt; 考虑到 Chrome 未来会禁止非商业版的一些 API 导致不能屏蔽广告，果断换 Firefox 啊，慢慢适应吧。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chrome.google.com&#x2F;webstore&#x2F;detail&#x2F;json-viewer&#x2F;gbmdgpbipfallnflgajpaliibnhdgobh?utm_source=chrome-app-launcher-info-dialog&quot;&gt;JSON Viewer&lt;&#x2F;a&gt; 在浏览器中查看 JSON 格式，支持把返回的 utf-8 编码的字符串变成文本，有各种 theme&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chrome.google.com&#x2F;webstore&#x2F;detail&#x2F;its-raining&#x2F;fkakmejoechmicbecchienoapbakancc?utm_source=chrome-app-launcher-info-dialog&quot;&gt;It&#x27;s Raining&lt;&#x2F;a&gt; 雨声，适合工作的时候听。别跟我扯什么“适合工作的时候听的歌单”、“安静学习的音乐”，我只认白噪声，完全不挑耳机的，当然也可以用来煲耳机&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chrome.google.com&#x2F;webstore&#x2F;detail&#x2F;markdown-preview-plus&#x2F;febilkbfcbhebfnokafefeacimjdckgl?utm_source=chrome-app-launcher-info-dialog&quot;&gt;Markdown Preview Plus&lt;&#x2F;a&gt; 在浏览器中查看 Markdown&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chrome.google.com&#x2F;webstore&#x2F;detail&#x2F;octotree&#x2F;bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US&quot;&gt;Octotree&lt;&#x2F;a&gt; 显示 GitHub 仓库的目录&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chrome.google.com&#x2F;webstore&#x2F;detail&#x2F;polarr-photo-editor&#x2F;djonnbgfieijldcieafgjcnhmpcfpmgg?utm_source=chrome-app-launcher-info-dialog&quot;&gt;Polarr Photo Editor&lt;&#x2F;a&gt; 泼辣修图，适合我这种业余人士修改图片格式，进行裁剪什么的（对，我完全不修图的&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chrome.google.com&#x2F;webstore&#x2F;detail&#x2F;postman&#x2F;fhbjgbiflinjbdggehcddcbncdddomop?utm_source=chrome-app-launcher-info-dialog&quot;&gt;Postman&lt;&#x2F;a&gt; 测试 API 接口的，很方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chrome.google.com&#x2F;webstore&#x2F;detail&#x2F;vimium&#x2F;dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=chrome-app-launcher-info-dialog&quot;&gt;Vimium&lt;&#x2F;a&gt; Vim 快捷键，不用把手从键盘上移开就可以轻松浏览网页了，非常方便&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kua-ping-tai-ying-yong&quot;&gt;跨平台应用&lt;&#x2F;h2&gt;
&lt;p&gt;当学生的时候主要还是 Windows，毕业了就用 Linux 了，工作一段时间后用 Mac。&lt;&#x2F;p&gt;
&lt;p&gt;（现在又切换到 Windows 下用 WSL 了，大部分时候都还不错，期待能做得更好）&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;VS Code&lt;&#x2F;a&gt; 非常好用的编辑器了，一开始关注 Electron 的时候，发现了 Atom，非常棒，后来有了这个就没用过其他的了，反正我开始使用各种语言写代码的时候，已经有这个了，所以一直没试过 Sublime Text。插件是一大特色，很多非常优秀的插件，主题等。各种语言相关的支持插件就不说了&lt;&#x2F;li&gt;
&lt;li&gt;找了一下，我以为我应该装了很多的，发现不少优秀的东西都被集成了，比如一些常见的主题，minimap 等&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mendeley.com&#x2F;&quot;&gt;Mendeley&lt;&#x2F;a&gt; 论文管理和阅读。缺点是国内同步比较慢，优点是跨平台且免费，完全可以满足基本需求，看论文，做标注，记笔记，管理阅读过的文献&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;typora.io&#x2F;&quot;&gt;Typora&lt;&#x2F;a&gt; Markdown 写作，支持 LaTeX，所见即所得，很方便&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;store.steampowered.com&#x2F;&quot;&gt;Steam&lt;&#x2F;a&gt; 后悔自己毕业了才开始从这里买游戏&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hovancik.net&#x2F;stretchly&#x2F;&quot;&gt;Stretchly&lt;&#x2F;a&gt; 工作休息提醒，很方便，十分钟一个 20 s 的休息，半小时一个 5 min 的休息，特别适合上班摸鱼的时候注意休息，忙的时候暂停就可以了。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;windows&quot;&gt;Windows&lt;&#x2F;h3&gt;
&lt;p&gt;用户最多的操作系统了，最近还是向着好的方向发展的，相对的，Mac 似乎最近口碑很差。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;cmder.net&#x2F;&quot;&gt;Cmder&lt;&#x2F;a&gt; 一款终端，免安装，可以使用很多常见的命令，现在做得很棒了，个人认为是 Windows 下最好用的终端&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;store&#x2F;p&#x2F;one-commander&#x2F;9nblggh4s79b&quot;&gt;One Commander&lt;&#x2F;a&gt; 文件管理系统，以前用 Clover，广告很难受，就换了这个，启动略慢&lt;&#x2F;li&gt;
&lt;li&gt;没了。一般软件都先看看 UWP 版本的评价好不好，优先使用 UWP 版。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;linux&quot;&gt;Linux&lt;&#x2F;h3&gt;
&lt;p&gt;穷人用这个就挺好的，一般直接 Ubuntu，想折腾就上 Arch，想装黑客可以上 Kali。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;axel-download-accelerator&#x2F;axel&quot;&gt;AXEL&lt;&#x2F;a&gt; 下载加速器，一般下载什么包的时候就用上了，可以用来下载百度云盘的东西，不会被限速 200 的&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sharkdp&#x2F;fd&quot;&gt;fd&lt;&#x2F;a&gt; Rust 开发的本地文件搜索工具，非常强悍&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;soimort&#x2F;you-get&quot;&gt;you-get&lt;&#x2F;a&gt; 下载视频、图片的神器，抽空下载好就不用看烦人的广告了&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>无聊写博客</title>
		<published>2017-11-05T00:00:00+00:00</published>
		<updated>2017-11-05T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/wu-liao-xie-bo-ke/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/wu-liao-xie-bo-ke/</id>
		<content type="html">&lt;p&gt;大概一年多没有写博客了。这一年间，多多少少接触了很多工业界的东西，不少东西还是值得记下的。更重要的是，很多东西不记下来自己就忘了，用的时候查资料也不一定方便，毕竟不是每个开源项目的文档都写得那么好用，也只有自己写出来的才最适合自己。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;像很多人一样，开始写博客前都要花很多时间折腾一下。专门的博客服务，&lt;code&gt;WordPress&lt;&#x2F;code&gt;，&lt;code&gt;GitHub Page&lt;&#x2F;code&gt;，完全自己搭建等，基本上都试过了，到头来还是觉得静态页面完全可以满足需求了（是的，变成老实人了呢）。&lt;&#x2F;p&gt;
&lt;p&gt;另一方面，学习过程中写笔记是很好的习惯，只是一直没有一个合适的笔记应用，我希望是跨平台的，对 &lt;code&gt;Markdown&lt;&#x2F;code&gt; 支持良好，能添加 &lt;code&gt;LaTeX&lt;&#x2F;code&gt; 公式的，速度当然不能慢了。一个个筛选下来，没有一个能满足需求的。不过直接写到博客里面也没有什么不好的，虽说一般笔记是粗糙的知识，博客应该是自己提炼过的，但是想到反正也没人看，自己的博客还不是自己做主嘛，随便瞎写也没关系。&lt;&#x2F;p&gt;
&lt;p&gt;说到底，也不指望自己能写多少东西，写一点算一点吧，记录一下生活也好。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Basic NLP Knowledge</title>
		<published>2016-08-11T00:00:00+00:00</published>
		<updated>2016-08-11T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/natural-language-processing-knowledge/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/natural-language-processing-knowledge/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;web.stanford.edu&#x2F;%7Ejurafsky&#x2F;NLPCourseraSlides.html&quot;&gt;&lt;em&gt;Notes of Stanford NLP course&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;preference&quot;&gt;Preference&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;language-technology&quot;&gt;Language Technology&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Mostly solved:
&lt;ul&gt;
&lt;li&gt;Spam detection&lt;&#x2F;li&gt;
&lt;li&gt;Part-of-speech (POS) tagging&lt;&#x2F;li&gt;
&lt;li&gt;Named Entity Recognition (NER)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Making good progress
&lt;ul&gt;
&lt;li&gt;Sentiment analysis&lt;&#x2F;li&gt;
&lt;li&gt;Co-reference resolution&lt;&#x2F;li&gt;
&lt;li&gt;Word sense disambiguation (WSD)&lt;&#x2F;li&gt;
&lt;li&gt;Parsing&lt;&#x2F;li&gt;
&lt;li&gt;Machine translation (MT)&lt;&#x2F;li&gt;
&lt;li&gt;Information Extraction (IE)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Still really hard
&lt;ul&gt;
&lt;li&gt;Question answering (QA)&lt;&#x2F;li&gt;
&lt;li&gt;Paraphrase&lt;&#x2F;li&gt;
&lt;li&gt;Summarization&lt;&#x2F;li&gt;
&lt;li&gt;Dialog&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;why-nlp-difficult&quot;&gt;Why NLP difficult?&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Non-standard Language&lt;&#x2F;li&gt;
&lt;li&gt;segmentation issues&lt;&#x2F;li&gt;
&lt;li&gt;idioms&lt;&#x2F;li&gt;
&lt;li&gt;neologisms&lt;&#x2F;li&gt;
&lt;li&gt;world knowledge&lt;&#x2F;li&gt;
&lt;li&gt;tricky entity names&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;basic-skills&quot;&gt;Basic skills&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Regular Expressions&lt;&#x2F;li&gt;
&lt;li&gt;Tokenization&lt;&#x2F;li&gt;
&lt;li&gt;Word Normalization and Stemming&lt;&#x2F;li&gt;
&lt;li&gt;Classifier
&lt;ul&gt;
&lt;li&gt;Decision Tree&lt;&#x2F;li&gt;
&lt;li&gt;Logistic Regression&lt;&#x2F;li&gt;
&lt;li&gt;SVM&lt;&#x2F;li&gt;
&lt;li&gt;Neural Nets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;edit-distance&quot;&gt;Edit Distance&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Used for
&lt;ul&gt;
&lt;li&gt;Spell correction&lt;&#x2F;li&gt;
&lt;li&gt;Computational Biology&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Basic operations
&lt;ul&gt;
&lt;li&gt;Insertion&lt;&#x2F;li&gt;
&lt;li&gt;Deletion&lt;&#x2F;li&gt;
&lt;li&gt;Substitution&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Algorithm
&lt;ul&gt;
&lt;li&gt;Levenshtein&lt;&#x2F;li&gt;
&lt;li&gt;Back trace&lt;&#x2F;li&gt;
&lt;li&gt;Needleman-Wunsch&lt;&#x2F;li&gt;
&lt;li&gt;Smith-Waterman&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;language-model&quot;&gt;Language Model&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;probabilistic-language-models&quot;&gt;Probabilistic Language Models&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Machine translation&lt;&#x2F;li&gt;
&lt;li&gt;Spell correction&lt;&#x2F;li&gt;
&lt;li&gt;Speech Recognition&lt;&#x2F;li&gt;
&lt;li&gt;Summarization&lt;&#x2F;li&gt;
&lt;li&gt;Question answering&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;markov-assumption&quot;&gt;Markov Assumption&lt;&#x2F;h3&gt;
&lt;p&gt;$$ P(\omega_1 \omega_2 \dots \omega_n) \approx  \prod_i P(\omega_i | \omega_{i-k} \dots \omega_{i-1}) $$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unigram-model&quot;&gt;Unigram Model&lt;&#x2F;h3&gt;
&lt;p&gt;$$ P(\omega_1 \omega_2 \dots \omega_n) \approx  \prod_i P(\omega_i) $$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bigram-model&quot;&gt;Bigram Model&lt;&#x2F;h3&gt;
&lt;p&gt;$$ P(\omega_i | \omega_1 \omega_2 \dots \omega_{i-1}) \approx  \prod_i P(\omega_i | \omega{i-1}) $$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;add-k-smoothing&quot;&gt;Add-k Smoothing&lt;&#x2F;h3&gt;
&lt;p&gt;$$ P_{Add-k}(\omega_i|\omega{i-1})=\tfrac{c(\omega_{i-1},\omega_i)+k}{c(\omega_{i-1})+kV} $$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unigram-prior-smoothing&quot;&gt;Unigram prior smoothing&lt;&#x2F;h3&gt;
&lt;p&gt;$$ P_{Add-k}(\omega_i|\omega_{i-1})=\tfrac{c(\omega_{i-1},\omega_i)+m(\tfrac{1}{V})}{c(\omega_{i-1})+m} $$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;smoothing-algorithm&quot;&gt;Smoothing Algorithm&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Good-Turing&lt;&#x2F;li&gt;
&lt;li&gt;Kneser-Ney&lt;&#x2F;li&gt;
&lt;li&gt;Witten-Bell&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;spelling-correction&quot;&gt;Spelling Correction&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;tasks:
&lt;ul&gt;
&lt;li&gt;Spelling error detection&lt;&#x2F;li&gt;
&lt;li&gt;Spelling error correction
&lt;ul&gt;
&lt;li&gt;Autocorrect&lt;&#x2F;li&gt;
&lt;li&gt;Suggest a correction&lt;&#x2F;li&gt;
&lt;li&gt;Suggestion lists&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Real word spelling errors:
&lt;ul&gt;
&lt;li&gt;For each word $w$, generate candidate set&lt;&#x2F;li&gt;
&lt;li&gt;Choose best candidate&lt;&#x2F;li&gt;
&lt;li&gt;Find the correct word $w$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Candidate generation
&lt;ul&gt;
&lt;li&gt;words with similar spelling&lt;&#x2F;li&gt;
&lt;li&gt;words with similar pronunciation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Factors that could influence &lt;code&gt;p(misspelling|word)&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;source letter&lt;&#x2F;li&gt;
&lt;li&gt;target letter&lt;&#x2F;li&gt;
&lt;li&gt;surrounding letter&lt;&#x2F;li&gt;
&lt;li&gt;the position in the word&lt;&#x2F;li&gt;
&lt;li&gt;nearby keys on the keyboard&lt;&#x2F;li&gt;
&lt;li&gt;homology on the keyboard&lt;&#x2F;li&gt;
&lt;li&gt;pronunciation&lt;&#x2F;li&gt;
&lt;li&gt;likely morpheme transformations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;text-classification&quot;&gt;Text Classification&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;used-for&quot;&gt;Used for:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Assigning subject categories, topics, or genres&lt;&#x2F;li&gt;
&lt;li&gt;Spam detection&lt;&#x2F;li&gt;
&lt;li&gt;Authorship identification&lt;&#x2F;li&gt;
&lt;li&gt;Age&#x2F;gender identification&lt;&#x2F;li&gt;
&lt;li&gt;Language identification&lt;&#x2F;li&gt;
&lt;li&gt;Sentiment analysis&lt;&#x2F;li&gt;
&lt;li&gt;...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;methods-supervised-machine-learning&quot;&gt;Methods: Supervised Machine Learning&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Naive Bayes&lt;&#x2F;li&gt;
&lt;li&gt;Logistic Regression&lt;&#x2F;li&gt;
&lt;li&gt;Support Vector Machines&lt;&#x2F;li&gt;
&lt;li&gt;k-Nearset Neighbors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;naive-bayes&quot;&gt;Naive Bayes&lt;&#x2F;h3&gt;
&lt;p&gt;$$ C_{MAP}=arg\max_{c\in C}P(x_1,x_2,\dots,x_n|c)P(c) $$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Laplace (add-1) Smoothing&lt;&#x2F;li&gt;
&lt;li&gt;Used for Spam Filtering&lt;&#x2F;li&gt;
&lt;li&gt;Training data:
&lt;ul&gt;
&lt;li&gt;No training data: manually written rules&lt;&#x2F;li&gt;
&lt;li&gt;Very little data:
&lt;ul&gt;
&lt;li&gt;Use Naive Bayes&lt;&#x2F;li&gt;
&lt;li&gt;Get more labeled data&lt;&#x2F;li&gt;
&lt;li&gt;Try semi-supervised training methods&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;A reasonable amount of data:
&lt;ul&gt;
&lt;li&gt;All clever Classifiers:
&lt;ul&gt;
&lt;li&gt;SVM&lt;&#x2F;li&gt;
&lt;li&gt;Regularized Logistic Regression&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;User-interpretable decision trees&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;A huge amount of data:
&lt;ul&gt;
&lt;li&gt;At a cost
&lt;ul&gt;
&lt;li&gt;SVM (train time)&lt;&#x2F;li&gt;
&lt;li&gt;kNN (test time)&lt;&#x2F;li&gt;
&lt;li&gt;Regularized Logistic Regression can be somewhat better&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Naive Bayes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Tweak performance
&lt;ul&gt;
&lt;li&gt;Domain-specific&lt;&#x2F;li&gt;
&lt;li&gt;Collapse terms&lt;&#x2F;li&gt;
&lt;li&gt;Upweighting some words&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;f-measure&quot;&gt;F Measure&lt;&#x2F;h3&gt;
&lt;p&gt;Precision: % of selected items that are correct&lt;&#x2F;p&gt;
&lt;p&gt;Recall: % of correct items that are selected&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&#x2F;&lt;&#x2F;th&gt;&lt;th&gt;correct&lt;&#x2F;th&gt;&lt;th&gt;not correct&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;selected&lt;&#x2F;td&gt;&lt;td&gt;tp&lt;&#x2F;td&gt;&lt;td&gt;fp&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;not selected&lt;&#x2F;td&gt;&lt;td&gt;fn&lt;&#x2F;td&gt;&lt;td&gt;tn&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;$$ F=\tfrac{1}{\alpha \tfrac{1}{P} +(1-\alpha)\tfrac{1}{R}}=\tfrac{(\beta^2+1)PR}{\beta^2P+R} $$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sentiment-analysis&quot;&gt;Sentiment Analysis&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Typology of Affective States
&lt;ul&gt;
&lt;li&gt;Emotion&lt;&#x2F;li&gt;
&lt;li&gt;Mood&lt;&#x2F;li&gt;
&lt;li&gt;Interpersonal stances&lt;&#x2F;li&gt;
&lt;li&gt;Attitudes (Sentiment Analysis)&lt;&#x2F;li&gt;
&lt;li&gt;Personality traits&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Baseline Algorithm
&lt;ul&gt;
&lt;li&gt;Tokenization&lt;&#x2F;li&gt;
&lt;li&gt;Feature Extraction&lt;&#x2F;li&gt;
&lt;li&gt;Classification
&lt;ul&gt;
&lt;li&gt;Naive Bayes&lt;&#x2F;li&gt;
&lt;li&gt;MaxEnt (better)&lt;&#x2F;li&gt;
&lt;li&gt;SVM (better)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Issues
&lt;ul&gt;
&lt;li&gt;HTML, XML and other markups&lt;&#x2F;li&gt;
&lt;li&gt;Capitalization&lt;&#x2F;li&gt;
&lt;li&gt;Phone numbers, dates&lt;&#x2F;li&gt;
&lt;li&gt;Emoticons&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;sentiment-lexicons&quot;&gt;Sentiment Lexicons&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;semi-supervised learning of lexicons
&lt;ul&gt;
&lt;li&gt;use a small amount of information&lt;&#x2F;li&gt;
&lt;li&gt;to bootstrap a lexicon&lt;&#x2F;li&gt;
&lt;li&gt;adjectives conjoined by &amp;quot;and&amp;quot; have same polarity&lt;&#x2F;li&gt;
&lt;li&gt;adjectives conjoined by &amp;quot;but&amp;quot; do not&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Process
&lt;ul&gt;
&lt;li&gt;label seed set of adjectives&lt;&#x2F;li&gt;
&lt;li&gt;expand seed set to conjoined adjectives&lt;&#x2F;li&gt;
&lt;li&gt;supervised classifier assigns &amp;quot;polarity similarity&amp;quot; to each word pair&lt;&#x2F;li&gt;
&lt;li&gt;clustering for partitioning&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Turney Algorithm
&lt;ul&gt;
&lt;li&gt;extract a phrasal lexicon from reviews&lt;&#x2F;li&gt;
&lt;li&gt;learn polarity of each phrase&lt;&#x2F;li&gt;
&lt;li&gt;rate a review by the average polarity of its phrases&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Advantages
&lt;ul&gt;
&lt;li&gt;domain-specific&lt;&#x2F;li&gt;
&lt;li&gt;more robust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Assume classes have equal frequencies:
&lt;ul&gt;
&lt;li&gt;if not balanced: need to use F-scores&lt;&#x2F;li&gt;
&lt;li&gt;severe imbalancing also can degrade classifier performance&lt;&#x2F;li&gt;
&lt;li&gt;solutions:
&lt;ul&gt;
&lt;li&gt;Resampling in training&lt;&#x2F;li&gt;
&lt;li&gt;Cost-sensitive learning
&lt;ul&gt;
&lt;li&gt;penalize SVM more for misclassification of the rare thing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Features:
&lt;ul&gt;
&lt;li&gt;Negation is important&lt;&#x2F;li&gt;
&lt;li&gt;Using all words works well for some tasks (NB)&lt;&#x2F;li&gt;
&lt;li&gt;Finding subsets of words may help in other tasks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;features&quot;&gt;Features&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;joint-and-discriminative&quot;&gt;Joint and Discriminative&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Joint (generative) models: place probabilities over both observed data and the hidden stuff ---- P(c,d)
&lt;ul&gt;
&lt;li&gt;N-gram models&lt;&#x2F;li&gt;
&lt;li&gt;Naive Bayes classifiers&lt;&#x2F;li&gt;
&lt;li&gt;Hidden Markov models&lt;&#x2F;li&gt;
&lt;li&gt;Probabilistic context-free grammars&lt;&#x2F;li&gt;
&lt;li&gt;IBM machine translation alignment models&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Discriminative (conditional) models: take the data as given, and put a probability over hidden structure given the data ---- &lt;code&gt;P(c|d)&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Logistic regression&lt;&#x2F;li&gt;
&lt;li&gt;Conditional loglinear&lt;&#x2F;li&gt;
&lt;li&gt;Maximum Entropy models&lt;&#x2F;li&gt;
&lt;li&gt;Conditional Random Fields&lt;&#x2F;li&gt;
&lt;li&gt;SVMs&lt;&#x2F;li&gt;
&lt;li&gt;Perceptron&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;features-1&quot;&gt;Features&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Feature Expectations:
&lt;ul&gt;
&lt;li&gt;Empirical count&lt;&#x2F;li&gt;
&lt;li&gt;Model expectation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Feature-Based Models:
&lt;ul&gt;
&lt;li&gt;Text Categorization&lt;&#x2F;li&gt;
&lt;li&gt;Word-Sense Disambiguation&lt;&#x2F;li&gt;
&lt;li&gt;POS Tagging&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;maximum-entropy&quot;&gt;Maximum Entropy&lt;&#x2F;h3&gt;
&lt;p&gt;$$ \log P(C|D,\lambda)=\sum_{(c,d)\in (C,D)}\log P(c|d,\lambda)=\sum_{(c,d)\in(C,D)}\log \tfrac{exp \sum_{i} \lambda_if_i(c,d)}{\sum_{c&#x27;} exp\sum_i \lambda_if_i(c&#x27;,d)} $$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Find the optimal parameters
&lt;ul&gt;
&lt;li&gt;Gradient descent (GD), Stochastic gradient descent (SGD)&lt;&#x2F;li&gt;
&lt;li&gt;Iterative proportional fitting methods: Generalized Iterative Scaling (GIS) and Improved Iterative Scaling (IIS)&lt;&#x2F;li&gt;
&lt;li&gt;Conjugate gradient (CG), perhaps with preconditioning&lt;&#x2F;li&gt;
&lt;li&gt;Quasi-Newton methods - limited memory variable metric (LMVM) methods, in particular, L-BFGS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Feature Overlap
&lt;ul&gt;
&lt;li&gt;Maxent models handle overlapping features well&lt;&#x2F;li&gt;
&lt;li&gt;Unlike NB, there is no double counting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Feature Interaction
&lt;ul&gt;
&lt;li&gt;Maxent models handle overlapping features well, but do not automatically model feature interactions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Feature Interaction
&lt;ul&gt;
&lt;li&gt;If you want to interaction terms, you have to add them&lt;&#x2F;li&gt;
&lt;li&gt;A disjunctive feature would also have done it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Smoothing:
&lt;ul&gt;
&lt;li&gt;Issues of scale
&lt;ul&gt;
&lt;li&gt;Lots of features&lt;&#x2F;li&gt;
&lt;li&gt;Lots of sparsity&lt;&#x2F;li&gt;
&lt;li&gt;Optimization problems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Methods
&lt;ul&gt;
&lt;li&gt;Early stopping&lt;&#x2F;li&gt;
&lt;li&gt;Priors (MAP)&lt;&#x2F;li&gt;
&lt;li&gt;Regularization&lt;&#x2F;li&gt;
&lt;li&gt;Virtual Data&lt;&#x2F;li&gt;
&lt;li&gt;Count Cutoffs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;named-entity-recognition-ner&quot;&gt;Named Entity Recognition (NER)&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The uses:
&lt;ul&gt;
&lt;li&gt;Named entities can be indexed, linked off, etc.&lt;&#x2F;li&gt;
&lt;li&gt;Sentiment can be attributed to companies or products&lt;&#x2F;li&gt;
&lt;li&gt;A lot of IE relations are associations between named entities&lt;&#x2F;li&gt;
&lt;li&gt;For question answering, answers are often named entities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Training:
&lt;ul&gt;
&lt;li&gt;Collect a set of representative training documents&lt;&#x2F;li&gt;
&lt;li&gt;Label each token for its entity class or other&lt;&#x2F;li&gt;
&lt;li&gt;Design feature extractors appropriate to the text and classes&lt;&#x2F;li&gt;
&lt;li&gt;Train a sequence classifier to predict the labels form the data&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Inference
&lt;ul&gt;
&lt;li&gt;Greedy
&lt;ul&gt;
&lt;li&gt;Fast, no extra memory requirements&lt;&#x2F;li&gt;
&lt;li&gt;Very easy to implement&lt;&#x2F;li&gt;
&lt;li&gt;With rich features including observations to the right, it may perform quite well&lt;&#x2F;li&gt;
&lt;li&gt;Greedy, we make commit errors we cannot recover from&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Beam
&lt;ul&gt;
&lt;li&gt;Fast, beam sizes of 3-5 are almost as good as exact inference in many cases&lt;&#x2F;li&gt;
&lt;li&gt;Easy to implement&lt;&#x2F;li&gt;
&lt;li&gt;Inexact: the globally best sequence can fall off the beam&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Viterbi
&lt;ul&gt;
&lt;li&gt;Exact: the global best sequence is returned&lt;&#x2F;li&gt;
&lt;li&gt;Harder to implement long-distance state-state interactions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;CRFs
&lt;ul&gt;
&lt;li&gt;Training is slower, but CRFs avoid causal-competition biases&lt;&#x2F;li&gt;
&lt;li&gt;In practice usually work much the same as MEMMs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;relation-extraction&quot;&gt;Relation Extraction&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;How to build relation extractors
&lt;ul&gt;
&lt;li&gt;Hand-written patterns
&lt;ul&gt;
&lt;li&gt;High-precision and low-recall&lt;&#x2F;li&gt;
&lt;li&gt;Specific domains&lt;&#x2F;li&gt;
&lt;li&gt;A lot of work&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Supervised machine learning
&lt;ul&gt;
&lt;li&gt;MaxEnt, Naive Bayes, SVM&lt;&#x2F;li&gt;
&lt;li&gt;Can get high accuracies with enough training data&lt;&#x2F;li&gt;
&lt;li&gt;Labeling a large training set is expensive&lt;&#x2F;li&gt;
&lt;li&gt;Brittle, don&#x27;t generalize well to different genres&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Semi-supervised and unsupervised
&lt;ul&gt;
&lt;li&gt;Bootstrapping (using seeds)
&lt;ul&gt;
&lt;li&gt;Find sentences with these pairs&lt;&#x2F;li&gt;
&lt;li&gt;Look at the context between or around the pair and generalize the context to create patterns&lt;&#x2F;li&gt;
&lt;li&gt;Use the patterns for grep for more pairs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Distance supervision
&lt;ul&gt;
&lt;li&gt;Doesn&#x27;t require iteratively expanding patterns&lt;&#x2F;li&gt;
&lt;li&gt;Uses very large amounts of unlabeled data&lt;&#x2F;li&gt;
&lt;li&gt;Not sensitive to genre issues in training corpus&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Unsupervised learning from the web
&lt;ul&gt;
&lt;li&gt;Use parsed data to train a &amp;quot;trustworthy tuple&amp;quot; classifier&lt;&#x2F;li&gt;
&lt;li&gt;Single-pass extract all relations between NPs, keep if trustworthy&lt;&#x2F;li&gt;
&lt;li&gt;Assessor ranks relations based on text redundancy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pos-tagging&quot;&gt;POS Tagging&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Performance
&lt;ul&gt;
&lt;li&gt;About 97% currently&lt;&#x2F;li&gt;
&lt;li&gt;But baseline is already 90%&lt;&#x2F;li&gt;
&lt;li&gt;Partly easy because
&lt;ul&gt;
&lt;li&gt;Many words are unambiguous&lt;&#x2F;li&gt;
&lt;li&gt;You get points for them and for punctuation marks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Difficulty
&lt;ul&gt;
&lt;li&gt;ambiguous words&lt;&#x2F;li&gt;
&lt;li&gt;common words can be ambiguous&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Source of information
&lt;ul&gt;
&lt;li&gt;knowledge of neighboring words&lt;&#x2F;li&gt;
&lt;li&gt;knowledge of word probabilities&lt;&#x2F;li&gt;
&lt;li&gt;word&lt;&#x2F;li&gt;
&lt;li&gt;lowercased word&lt;&#x2F;li&gt;
&lt;li&gt;prefixes&lt;&#x2F;li&gt;
&lt;li&gt;suffixes&lt;&#x2F;li&gt;
&lt;li&gt;capitalization&lt;&#x2F;li&gt;
&lt;li&gt;word shapes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Summary
&lt;ul&gt;
&lt;li&gt;the change from generative to discriminative model does not by itself result in great improvement&lt;&#x2F;li&gt;
&lt;li&gt;the higher accuracy of discriminative models comes at the price of much slower training&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;parsing&quot;&gt;Parsing&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Treebank
&lt;ul&gt;
&lt;li&gt;reusability of the labor
&lt;ul&gt;
&lt;li&gt;many parser, POS taggers, etc.&lt;&#x2F;li&gt;
&lt;li&gt;valuable resource for linguistics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;broad coverage&lt;&#x2F;li&gt;
&lt;li&gt;frequencies and distributional information&lt;&#x2F;li&gt;
&lt;li&gt;a way to evaluate systems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Statistical parsing applications
&lt;ul&gt;
&lt;li&gt;high precision question answering&lt;&#x2F;li&gt;
&lt;li&gt;improving biological named entity finding&lt;&#x2F;li&gt;
&lt;li&gt;syntactically based sentence compression&lt;&#x2F;li&gt;
&lt;li&gt;extracting interaction in computer games&lt;&#x2F;li&gt;
&lt;li&gt;helping linguists find data&lt;&#x2F;li&gt;
&lt;li&gt;source sentence analysis for machine translation&lt;&#x2F;li&gt;
&lt;li&gt;relation extraction systems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Phrase structure grammars (= context-free grammars, CFGs) in NLP
&lt;ul&gt;
&lt;li&gt;G = (T, C, N, S, L, R)
&lt;ul&gt;
&lt;li&gt;T is a set of terminal symbols&lt;&#x2F;li&gt;
&lt;li&gt;C is a set of preterminal symbols&lt;&#x2F;li&gt;
&lt;li&gt;N is a set of nonterminal symbols&lt;&#x2F;li&gt;
&lt;li&gt;S is the start symbol&lt;&#x2F;li&gt;
&lt;li&gt;L is the lexicon, a set of items of the form X -&amp;gt; x&lt;&#x2F;li&gt;
&lt;li&gt;R is the grammar, a set of items of the form X -&amp;gt; $\gamma$&lt;&#x2F;li&gt;
&lt;li&gt;e is the empty symbol&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;probabilistic-parsing&quot;&gt;Probabilistic Parsing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Probabilistic - or stochastic - context-free grammars (PCFGs)
&lt;ul&gt;
&lt;li&gt;G = (T, N, S, R, P)
&lt;ul&gt;
&lt;li&gt;P is a probability function&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Chomsky Normal Form
&lt;ul&gt;
&lt;li&gt;Reconstructing n-aries is easy&lt;&#x2F;li&gt;
&lt;li&gt;Reconstructing unaries&#x2F;empties is trickier&lt;&#x2F;li&gt;
&lt;li&gt;Binarization is crucial for cubic time CFG parsing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Cocke-Kasami-Younger (CKY) Constituency Parsing
&lt;ul&gt;
&lt;li&gt;Unaries can by incorporated into the algorithm&lt;&#x2F;li&gt;
&lt;li&gt;Empties can be incorporated&lt;&#x2F;li&gt;
&lt;li&gt;Binarization is vital&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Performance
&lt;ul&gt;
&lt;li&gt;Robust&lt;&#x2F;li&gt;
&lt;li&gt;Partial solution for grammar ambiguity&lt;&#x2F;li&gt;
&lt;li&gt;Give a probabilistic language model&lt;&#x2F;li&gt;
&lt;li&gt;The problem seems to be that PCFGs lack the lexicalization of a trigram model&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;lexicalized-parsing&quot;&gt;Lexicalized Parsing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Charniak
&lt;ul&gt;
&lt;li&gt;Probabilistic conditioning is &amp;quot;top-down&amp;quot; like a regular PCFG, but actual parsing is bottom-up, somewhat like the CKY algorithm we saw&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Non-Independence
&lt;ul&gt;
&lt;li&gt;The independence assumptions of a PCFG are often too strong&lt;&#x2F;li&gt;
&lt;li&gt;We can relax independence assumptions by encoding dependencies into the PCFG symbols, by state splitting (sparseness)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Accurate Unlexicalized Parsing
&lt;ul&gt;
&lt;li&gt;Grammar rules are not systematically specified to the level of lexical items&lt;&#x2F;li&gt;
&lt;li&gt;Closed vs. open class words&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Learning Latent Annotations
&lt;ul&gt;
&lt;li&gt;brackets are known&lt;&#x2F;li&gt;
&lt;li&gt;base categories are known&lt;&#x2F;li&gt;
&lt;li&gt;induce subcategories&lt;&#x2F;li&gt;
&lt;li&gt;clever split&#x2F;merge category refinement&lt;&#x2F;li&gt;
&lt;li&gt;EM, like Forward-Backward for HMMs, but constrained by tree&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;dependency-parsing&quot;&gt;Dependency Parsing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Methods
&lt;ul&gt;
&lt;li&gt;Dynamic programming (like in the CKY algorithm)&lt;&#x2F;li&gt;
&lt;li&gt;Graph algorithm&lt;&#x2F;li&gt;
&lt;li&gt;Constraint Satisfaction&lt;&#x2F;li&gt;
&lt;li&gt;Deterministic Parsing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Sources of information
&lt;ul&gt;
&lt;li&gt;Bilexical affinities&lt;&#x2F;li&gt;
&lt;li&gt;Dependency distance&lt;&#x2F;li&gt;
&lt;li&gt;Intervening material&lt;&#x2F;li&gt;
&lt;li&gt;Valency of heads&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;MaltParser
&lt;ul&gt;
&lt;li&gt;Greedy&lt;&#x2F;li&gt;
&lt;li&gt;Bottom up&lt;&#x2F;li&gt;
&lt;li&gt;Has
&lt;ul&gt;
&lt;li&gt;a stack&lt;&#x2F;li&gt;
&lt;li&gt;a buffer&lt;&#x2F;li&gt;
&lt;li&gt;a set of dependency arcs&lt;&#x2F;li&gt;
&lt;li&gt;a set of actions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Each action is predicted by a discriminative classifier (SVM)&lt;&#x2F;li&gt;
&lt;li&gt;No search&lt;&#x2F;li&gt;
&lt;li&gt;Provides close to state of the art parsing performance&lt;&#x2F;li&gt;
&lt;li&gt;Provides very fast linear time parsing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Projective
&lt;ul&gt;
&lt;li&gt;Dependencies from a CFG tree using heads, must be projective&lt;&#x2F;li&gt;
&lt;li&gt;But dependency theory normally does allow non-projective structure to account for displaced constituents&lt;&#x2F;li&gt;
&lt;li&gt;The arc-eager algorithm only builds projective dependency trees&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Stanford Dependencies
&lt;ul&gt;
&lt;li&gt;Projective&lt;&#x2F;li&gt;
&lt;li&gt;Can be generated by postprocessing headed phrase structure parses, or dependency parsers like MaltParser or the Easy-First Parser&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;information-retrieval&quot;&gt;Information Retrieval&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Used for
&lt;ul&gt;
&lt;li&gt;web search&lt;&#x2F;li&gt;
&lt;li&gt;e-mail search&lt;&#x2F;li&gt;
&lt;li&gt;searching your laptop&lt;&#x2F;li&gt;
&lt;li&gt;corporate knowledge bases&lt;&#x2F;li&gt;
&lt;li&gt;legal information retrieval&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;classic-search&quot;&gt;Classic search&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;User task&lt;&#x2F;li&gt;
&lt;li&gt;Info need&lt;&#x2F;li&gt;
&lt;li&gt;Query &amp;amp; Collection&lt;&#x2F;li&gt;
&lt;li&gt;Search engine&lt;&#x2F;li&gt;
&lt;li&gt;Results&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;initial-stages-of-text-processing&quot;&gt;Initial stages of text processing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Tokenization&lt;&#x2F;li&gt;
&lt;li&gt;Normalization&lt;&#x2F;li&gt;
&lt;li&gt;Stemming&lt;&#x2F;li&gt;
&lt;li&gt;Stop words&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;query-processing&quot;&gt;Query processing&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;AND
&lt;ul&gt;
&lt;li&gt;&amp;quot;merge&amp;quot; algorithm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Phrase queries
&lt;ul&gt;
&lt;li&gt;Biword indexes
&lt;ul&gt;
&lt;li&gt;false positives&lt;&#x2F;li&gt;
&lt;li&gt;bigger dictionary&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Positional indexes
&lt;ul&gt;
&lt;li&gt;Extract inverted index entries for each distinct term&lt;&#x2F;li&gt;
&lt;li&gt;Merge their doc:position lists to enumerate all positions&lt;&#x2F;li&gt;
&lt;li&gt;Same general method for proximity searches&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;A positional index is 2-4 as large as a non-positional index&lt;&#x2F;li&gt;
&lt;li&gt;Caveat: all of this holds for &amp;quot;English-like&amp;quot; language&lt;&#x2F;li&gt;
&lt;li&gt;These two approaches can be profitably combined&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;ranked-retrieval&quot;&gt;Ranked Retrieval&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Advantage
&lt;ul&gt;
&lt;li&gt;Free text queries&lt;&#x2F;li&gt;
&lt;li&gt;large result sets are not an issue&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Query-document matching scores
&lt;ul&gt;
&lt;li&gt;Jaccard coefficient
&lt;ul&gt;
&lt;li&gt;Doesn&#x27;t consider term frequency&lt;&#x2F;li&gt;
&lt;li&gt;Length normalization needed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Bag of words model
&lt;ul&gt;
&lt;li&gt;Term frequency (tf)&lt;&#x2F;li&gt;
&lt;li&gt;Log-frequency weighting&lt;&#x2F;li&gt;
&lt;li&gt;Inverse document frequency (idf)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;tf-idf-weighting&quot;&gt;tf-idf weighting&lt;&#x2F;h3&gt;
&lt;p&gt;$$ W_{t,d}=(1+\log tf_{t,d})\times \log_{10}(N&#x2F;df_t) $$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Best known weighting scheme in information retrieval&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;distance-cosine-query-document&quot;&gt;Distance: cosine(query, document)&lt;&#x2F;h3&gt;
&lt;p&gt;$$ \cos(\vec q,\vec d)=\tfrac{\vec q \bullet \vec d}{|\vec q||\vec d|}=\tfrac{\vec q}{|\vec q|}\bullet \tfrac{\vec d}{|\vec d|}=\tfrac{\sum^{|V|}&lt;em&gt;{i=1}q_id_i}{\sqrt{\sum^{|V|}&lt;&#x2F;em&gt;{i=1}q_i^2}\sqrt{\sum^{|V|}_{i=1}d^2_i}} $$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;weighting&quot;&gt;Weighting&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Many search engines allow for different weightings for queries vs. documents&lt;&#x2F;li&gt;
&lt;li&gt;A very standard weighting scheme is: Inc.Itc&lt;&#x2F;li&gt;
&lt;li&gt;Document: logarithmic tf, no idf and cosine normalization&lt;&#x2F;li&gt;
&lt;li&gt;Query: logarithmic tf idf, cosine normalization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;evaluation&quot;&gt;Evaluation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Mean average precision (MAP)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;semantic&quot;&gt;Semantic&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;situation&quot;&gt;Situation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Reminder: lemma and wordform&lt;&#x2F;li&gt;
&lt;li&gt;Homonymy
&lt;ul&gt;
&lt;li&gt;Homographs&lt;&#x2F;li&gt;
&lt;li&gt;Homophones&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Polysemy&lt;&#x2F;li&gt;
&lt;li&gt;Synonyms&lt;&#x2F;li&gt;
&lt;li&gt;Antonyms&lt;&#x2F;li&gt;
&lt;li&gt;Hyponymy and Hypernymy&lt;&#x2F;li&gt;
&lt;li&gt;Hyponyms and Instances&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;applications-of-thesauri-and-ontologies&quot;&gt;Applications of Thesauri and Ontologies&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Information Extraction&lt;&#x2F;li&gt;
&lt;li&gt;Information Retrieval&lt;&#x2F;li&gt;
&lt;li&gt;Question Answering&lt;&#x2F;li&gt;
&lt;li&gt;Bioinformatics and Medical Informatics&lt;&#x2F;li&gt;
&lt;li&gt;Machine Translation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;word-similarity&quot;&gt;Word Similarity&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Synonymy and similarity&lt;&#x2F;li&gt;
&lt;li&gt;Similarity algorithm
&lt;ul&gt;
&lt;li&gt;Thesaurus-based algorithm&lt;&#x2F;li&gt;
&lt;li&gt;Distributional algorithms&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;thesaurus-based-similarity&quot;&gt;Thesaurus-based similarity&lt;&#x2F;h3&gt;
&lt;p&gt;$LCS(c_1,c_2)=$ The most informative (lowest) node in the hierarchy subsuming both $c_1$ and $c_2$&lt;&#x2F;p&gt;
&lt;p&gt;$$ Sim_{path}(c_1,c_2)=\tfrac{1}{pathlen(c_1,c_2)} $$&lt;&#x2F;p&gt;
&lt;p&gt;$$ Sim_{resnik}(c_1,c_2)=-\log P(LCS(c_1,c_2)) $$&lt;&#x2F;p&gt;
&lt;p&gt;$$ Sim_{lin}(c_1,c_2)=\tfrac{1\log P(LCS(c_1,c_2))}{\log P(c_1)+\log P(c_2)} $$&lt;&#x2F;p&gt;
&lt;p&gt;$$ Sim_{jiangconrath}(c_1,c_2)=\tfrac{1}{\log P(c_1)+\log P(c_2)-2\log P(LCS(c_1,c_2))} $$&lt;&#x2F;p&gt;
&lt;p&gt;$$ Sim_{eLesk}(c_1,c_2)=\sum_{r,q\in RELS}overlap(gloss(r(c_1)),gloss(q(c_2))) $$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Evaluating
&lt;ul&gt;
&lt;li&gt;Intrinsic
&lt;ul&gt;
&lt;li&gt;Correlation between algorithm and human word similarity ratings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Extrinsic (task_based, end-to-end)
&lt;ul&gt;
&lt;li&gt;Malapropism (Spelling error) detection&lt;&#x2F;li&gt;
&lt;li&gt;WSD&lt;&#x2F;li&gt;
&lt;li&gt;Essay grading&lt;&#x2F;li&gt;
&lt;li&gt;Taking TOEFL multiple-choice vocabulary tests&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Problems
&lt;ul&gt;
&lt;li&gt;We don&#x27;t have a thesaurus for every language&lt;&#x2F;li&gt;
&lt;li&gt;recall
&lt;ul&gt;
&lt;li&gt;missing words&lt;&#x2F;li&gt;
&lt;li&gt;missing phrases&lt;&#x2F;li&gt;
&lt;li&gt;missing connections between senses&lt;&#x2F;li&gt;
&lt;li&gt;works less well for verbs, adj.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;distributional-models-of-meaning&quot;&gt;Distributional models of meaning&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;For the term-document matrix: tf-idf&lt;&#x2F;li&gt;
&lt;li&gt;For the term-context matrix: Positive Pointwise Mutual Information (PPMI) is common&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$$ PMI(w_1,w_2)=\log_2\tfrac{P(w_1,w_2)}{P(w_1)P(w_2)} $$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;PMI is biased toward infrequent events
&lt;ul&gt;
&lt;li&gt;various weighting schemes&lt;&#x2F;li&gt;
&lt;li&gt;add-one smoothing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;question-answering&quot;&gt;Question Answering&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Question processing
&lt;ul&gt;
&lt;li&gt;Detect question type, answer type (NER), focus, relations&lt;&#x2F;li&gt;
&lt;li&gt;Formulate queries to send a search engine&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Passage Retrieval
&lt;ul&gt;
&lt;li&gt;Retrieval ranked documents&lt;&#x2F;li&gt;
&lt;li&gt;Break into suitable passages and re-rank&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Answer processing
&lt;ul&gt;
&lt;li&gt;Extract candidate answers&lt;&#x2F;li&gt;
&lt;li&gt;Rank candidates&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;approaches&quot;&gt;Approaches&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Knowledge-based
&lt;ul&gt;
&lt;li&gt;build a semantic representation of the query&lt;&#x2F;li&gt;
&lt;li&gt;Map from this semantics to query structured data or resources&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Hybrid
&lt;ul&gt;
&lt;li&gt;build a shallow semantic representation of the query&lt;&#x2F;li&gt;
&lt;li&gt;generate answer candidate using IR methods&lt;&#x2F;li&gt;
&lt;li&gt;Score each candidate using richer knowledge sources&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;answer-type-taxonomy&quot;&gt;Answer type taxonomy&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;6 coarse classes
&lt;ul&gt;
&lt;li&gt;Abbreviation&lt;&#x2F;li&gt;
&lt;li&gt;Entity&lt;&#x2F;li&gt;
&lt;li&gt;Description&lt;&#x2F;li&gt;
&lt;li&gt;Human&lt;&#x2F;li&gt;
&lt;li&gt;Location&lt;&#x2F;li&gt;
&lt;li&gt;Numeric&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;50 finer classes&lt;&#x2F;li&gt;
&lt;li&gt;Detection
&lt;ul&gt;
&lt;li&gt;Hand-written rules&lt;&#x2F;li&gt;
&lt;li&gt;Machine Learning&lt;&#x2F;li&gt;
&lt;li&gt;Hybrids&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Features
&lt;ul&gt;
&lt;li&gt;Question words and phrases&lt;&#x2F;li&gt;
&lt;li&gt;Part-of-speech tags&lt;&#x2F;li&gt;
&lt;li&gt;Parse features&lt;&#x2F;li&gt;
&lt;li&gt;Named Entities&lt;&#x2F;li&gt;
&lt;li&gt;Semantically related words&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;keyword-selection&quot;&gt;Keyword selection&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Non-stop words&lt;&#x2F;li&gt;
&lt;li&gt;NNP words in recognized named entities&lt;&#x2F;li&gt;
&lt;li&gt;Complex nominals with their adjectival modifiers&lt;&#x2F;li&gt;
&lt;li&gt;Other complex nominals&lt;&#x2F;li&gt;
&lt;li&gt;Nouns with their adjectival modifiers&lt;&#x2F;li&gt;
&lt;li&gt;Other nouns&lt;&#x2F;li&gt;
&lt;li&gt;Verbs&lt;&#x2F;li&gt;
&lt;li&gt;Adverbs&lt;&#x2F;li&gt;
&lt;li&gt;QFW word (skipped in all previous steps)&lt;&#x2F;li&gt;
&lt;li&gt;Other words&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;passage-retrieval&quot;&gt;Passage Retrieval&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;IR engine retrieves documents using query terms&lt;&#x2F;li&gt;
&lt;li&gt;Segment the documents into shorter units&lt;&#x2F;li&gt;
&lt;li&gt;Passage ranking
&lt;ul&gt;
&lt;li&gt;number of named entities of the right type in passage&lt;&#x2F;li&gt;
&lt;li&gt;number of query words in passage&lt;&#x2F;li&gt;
&lt;li&gt;number of question N-grams also in passage&lt;&#x2F;li&gt;
&lt;li&gt;proximity of query keywords to each other in passage&lt;&#x2F;li&gt;
&lt;li&gt;longest sequence of question words&lt;&#x2F;li&gt;
&lt;li&gt;rank of the document containing passage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;features-for-ranking-candidate-answers&quot;&gt;Features for ranking candidate answers&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;answer type match&lt;&#x2F;li&gt;
&lt;li&gt;pattern match&lt;&#x2F;li&gt;
&lt;li&gt;question keywords&lt;&#x2F;li&gt;
&lt;li&gt;keyword distance&lt;&#x2F;li&gt;
&lt;li&gt;novelty factor&lt;&#x2F;li&gt;
&lt;li&gt;apposition features&lt;&#x2F;li&gt;
&lt;li&gt;punctuation location&lt;&#x2F;li&gt;
&lt;li&gt;sequences of question terms&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;common-evaluation-metrics&quot;&gt;Common Evaluation Metrics&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Accuracy&lt;&#x2F;li&gt;
&lt;li&gt;Mean Reciprocal Rank (MRR)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$$ MRR = \tfrac{\sum_{i=1}^N \tfrac{1}{rank_i}}{N} $$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summarization&quot;&gt;Summarization&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Applications
&lt;ul&gt;
&lt;li&gt;outlines or abstracts&lt;&#x2F;li&gt;
&lt;li&gt;summaries&lt;&#x2F;li&gt;
&lt;li&gt;action items&lt;&#x2F;li&gt;
&lt;li&gt;simplifying&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Three stages
&lt;ul&gt;
&lt;li&gt;content selection&lt;&#x2F;li&gt;
&lt;li&gt;information ordering&lt;&#x2F;li&gt;
&lt;li&gt;sentence realization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;salient words
&lt;ul&gt;
&lt;li&gt;tf-idf&lt;&#x2F;li&gt;
&lt;li&gt;topic signature
&lt;ul&gt;
&lt;li&gt;mutual information&lt;&#x2F;li&gt;
&lt;li&gt;log-likelihood ratio (LLR)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$$
weight(w_i)=
\begin{cases}
1,&amp;amp; if -2\log \lambda(w_i)&amp;gt;10 \ 0,&amp;amp; otherwise
\end{cases}
$$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Supervised content selection problem
&lt;ul&gt;
&lt;li&gt;hard to get labeled training data&lt;&#x2F;li&gt;
&lt;li&gt;alignment difficult&lt;&#x2F;li&gt;
&lt;li&gt;performance not better than unsupervised algorithm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;ROUGE (Recall Oriented Understudy for Gisting Evaluation)
&lt;ul&gt;
&lt;li&gt;Intrinsic metric for automatically evaluating summaries
&lt;ul&gt;
&lt;li&gt;based on BLEU&lt;&#x2F;li&gt;
&lt;li&gt;not as good as human evaluation&lt;&#x2F;li&gt;
&lt;li&gt;much more convenient&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$$ ROUGE-2=\tfrac{\sum_{x\in {RefSummaries}}\sum_{bigrams:i\in S}\min(count(i,X),count(i,S))}{\sum_{x\in{RefSummaries}}\sum_{bigrams:i\in S}count(i,S)} $$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Maximal Marginal Relevance (MMR)
&lt;ul&gt;
&lt;li&gt;Iteratively (greedily)
&lt;ul&gt;
&lt;li&gt;Relevant: high cosine similarity to the query&lt;&#x2F;li&gt;
&lt;li&gt;Novel: low cosine similarity to the summary&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Stop when desired length&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Information Ordering
&lt;ul&gt;
&lt;li&gt;Chronological ordering&lt;&#x2F;li&gt;
&lt;li&gt;Coherence&lt;&#x2F;li&gt;
&lt;li&gt;Topical ordering&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>变量命名规则</title>
		<published>2016-05-16T00:00:00+00:00</published>
		<updated>2016-05-16T00:00:00+00:00</updated>
		<link href="https://blog.mapotofu.org/blogs/variable-name/" type="text/html"/>
		<id>https://blog.mapotofu.org/blogs/variable-name/</id>
		<content type="html">&lt;p&gt;原文：&lt;a href=&quot;http:&#x2F;&#x2F;a-nickels-worth.blogspot.com&#x2F;2016&#x2F;04&#x2F;a-guide-to-naming-variables.html?utm_source=wanqu.co&amp;amp;utm_campaign=Wanqu+Daily&amp;amp;utm_medium=email&quot;&gt;Variable name&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;本文翻译了该文章的大致意思，省略了代码示例。&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;ming-ming-yuan-ze&quot;&gt;命名原则&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;代码是给人看的，而不是给机器看的&lt;&#x2F;li&gt;
&lt;li&gt;不要让别人思考代码想做什么，命名应该传达出作者的真正意图&lt;&#x2F;li&gt;
&lt;li&gt;代码审查是件异常繁重的工作，所以变量名应该尽可能简洁，使人将精力放在代码上&lt;&#x2F;li&gt;
&lt;li&gt;相对于注释，我们更喜欢好的名字，但这并不能取代所有的注释&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shi-yong-fang-zhen&quot;&gt;实用方针&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;不要在名字里放数据类型
&lt;ul&gt;
&lt;li&gt;将变量名改为复数形式，而不是加入类型&lt;&#x2F;li&gt;
&lt;li&gt;如果你要加入一些标量类型（int，String，char），确保你能解释清楚这个变量是什么，派生这个变量你做了什么转化（例如变为小写）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;多数情况下使用日耳曼命名
&lt;ul&gt;
&lt;li&gt;浅显易懂，不需要太多的先验知识&lt;&#x2F;li&gt;
&lt;li&gt;足够特定，不会混淆&lt;&#x2F;li&gt;
&lt;li&gt;对于通用的方法，使用通用的命名即可&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;简单的注释体现在变量名上
&lt;ul&gt;
&lt;li&gt;减少代码审核工作者的压力&lt;&#x2F;li&gt;
&lt;li&gt;如果这个变量使用的时候中间隔了很远，那么审核者不需要向前翻阅注释&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;避免陈词滥调
&lt;ul&gt;
&lt;li&gt;类似于这些用烂的命名应该避免使用：val，value，result，res，retval，tmp，temp，count，str，tempString，intStr&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;当意思很明确的时候，使用约定俗成的命名
&lt;ul&gt;
&lt;li&gt;跟上面的陈词滥调不同，这里说的是一些被广泛认可的命名&lt;&#x2F;li&gt;
&lt;li&gt;对于循环直接使用i，j，k&lt;&#x2F;li&gt;
&lt;li&gt;对于极限或数量，使用n&lt;&#x2F;li&gt;
&lt;li&gt;对于例外使用e&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;当使用范围很小的时候，可以用短命名（一到两个字母）
&lt;ul&gt;
&lt;li&gt;5行以内&lt;&#x2F;li&gt;
&lt;li&gt;对该变量没有更合适的名字&lt;&#x2F;li&gt;
&lt;li&gt;读者在该情况下无法记住更多的信息&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;删掉没多少用处的一次性变量（OTVs）
&lt;ul&gt;
&lt;li&gt;对于那些只为了传递结果的垃圾变量，尽量删除&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;使用短OTVs来打破长句子
&lt;ul&gt;
&lt;li&gt;当需要调用很多次中间结果的时候，可以使用短OTVs来增强可读性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;使用短OTVs打破复杂的表达方式
&lt;ul&gt;
&lt;li&gt;理由同上&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;使用长OTVs来解释不易理解的代码
&lt;ul&gt;
&lt;li&gt;比如，你不得不调用别人的代码，但是别人用的函数名不易理解&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
</feed>
